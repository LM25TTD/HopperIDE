/*
 * generated by Xtext 2.9.0
 */
parser grammar InternalPortugolParser;

options {
	tokenVocab=InternalPortugolLexer;
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@header {
package org.hopper.language.ide.contentassist.antlr.internal;
import java.util.Map;
import java.util.HashMap;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.hopper.language.services.PortugolGrammarAccess;

}
@members {
	private PortugolGrammarAccess grammarAccess;
	private final Map<String, String> tokenNameToValue = new HashMap<String, String>();
	
	{
		tokenNameToValue.put("PercentSign", "'\%'");
		tokenNameToValue.put("Ampersand", "'&'");
		tokenNameToValue.put("LeftParenthesis", "'('");
		tokenNameToValue.put("RightParenthesis", "')'");
		tokenNameToValue.put("Asterisk", "'*'");
		tokenNameToValue.put("PlusSign", "'+'");
		tokenNameToValue.put("Comma", "','");
		tokenNameToValue.put("HyphenMinus", "'-'");
		tokenNameToValue.put("Solidus", "'/'");
		tokenNameToValue.put("Colon", "':'");
		tokenNameToValue.put("Semicolon", "';'");
		tokenNameToValue.put("LessThanSign", "'<'");
		tokenNameToValue.put("EqualsSign", "'='");
		tokenNameToValue.put("GreaterThanSign", "'>'");
		tokenNameToValue.put("E", "'E'");
		tokenNameToValue.put("CircumflexAccent", "'^'");
		tokenNameToValue.put("LessThanSignHyphenMinus", "'<-'");
		tokenNameToValue.put("LessThanSignEqualsSign", "'<='");
		tokenNameToValue.put("LessThanSignGreaterThanSign", "'<>'");
		tokenNameToValue.put("GreaterThanSignEqualsSign", "'>='");
		tokenNameToValue.put("OU", "'OU'");
		tokenNameToValue.put("De", "'de'");
		tokenNameToValue.put("Pi", "'pi'");
		tokenNameToValue.put("Se", "'se'");
		tokenNameToValue.put("MOD", "'MOD'");
		tokenNameToValue.put("NOT", "'NOT'");
		tokenNameToValue.put("XOU", "'XOU'");
		tokenNameToValue.put("Ate", "'ate'");
		tokenNameToValue.put("Var", "'var'");
		tokenNameToValue.put("Caso", "'caso'");
		tokenNameToValue.put("Faca", "'faca'");
		tokenNameToValue.put("Leia", "'leia'");
		tokenNameToValue.put("Para", "'para'");
		tokenNameToValue.put("Real", "'real'");
		tokenNameToValue.put("Compr", "'compr'");
		tokenNameToValue.put("Copia", "'copia'");
		tokenNameToValue.put("Entao", "'entao'");
		tokenNameToValue.put("Fimse", "'fimse'");
		tokenNameToValue.put("Passo", "'passo'");
		tokenNameToValue.put("Raizq", "'raizq'");
		tokenNameToValue.put("Senao", "'senao'");
		tokenNameToValue.put("Funcao", "'funcao'");
		tokenNameToValue.put("Inicio", "'inicio'");
		tokenNameToValue.put("Maiusc", "'maiusc'");
		tokenNameToValue.put("Repita", "'repita'");
		tokenNameToValue.put("Escolha", "'escolha'");
		tokenNameToValue.put("Escreva", "'escreva'");
		tokenNameToValue.put("Fimpara", "'fimpara'");
		tokenNameToValue.put("Inteiro", "'inteiro'");
		tokenNameToValue.put("Retorne", "'retorne'");
		tokenNameToValue.put("Caracter", "'caracter'");
		tokenNameToValue.put("Enquanto", "'enquanto'");
		tokenNameToValue.put("Escreval", "'escreval'");
		tokenNameToValue.put("Algoritmo", "'algoritmo'");
		tokenNameToValue.put("Caractere", "'caractere'");
		tokenNameToValue.put("Fimfuncao", "'fimfuncao'");
		tokenNameToValue.put("Outrocaso", "'outrocaso'");
		tokenNameToValue.put("Fimescolha", "'fimescolha'");
		tokenNameToValue.put("Interrompa", "'interrompa'");
		tokenNameToValue.put("Fimenquanto", "'fimenquanto'");
		tokenNameToValue.put("Fimalgoritmo", "'fimalgoritmo'");
		tokenNameToValue.put("Procedimento", "'procedimento'");
		tokenNameToValue.put("Fimprocedimento", "'fimprocedimento'");
	}

	public void setGrammarAccess(PortugolGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		String result = tokenNameToValue.get(tokenName);
		if (result == null)
			result = tokenName;
		return result;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeaderBlock
entryRuleHeaderBlock
:
{ before(grammarAccess.getHeaderBlockRule()); }
	 ruleHeaderBlock
{ after(grammarAccess.getHeaderBlockRule()); } 
	 EOF 
;

// Rule HeaderBlock
ruleHeaderBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderBlockAccess().getGroup()); }
		(rule__HeaderBlock__Group__0)
		{ after(grammarAccess.getHeaderBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclarationsBlock
entryRuleDeclarationsBlock
:
{ before(grammarAccess.getDeclarationsBlockRule()); }
	 ruleDeclarationsBlock
{ after(grammarAccess.getDeclarationsBlockRule()); } 
	 EOF 
;

// Rule DeclarationsBlock
ruleDeclarationsBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getGroup()); }
		(rule__DeclarationsBlock__Group__0)
		{ after(grammarAccess.getDeclarationsBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaredVarList
entryRuleDeclaredVarList
:
{ before(grammarAccess.getDeclaredVarListRule()); }
	 ruleDeclaredVarList
{ after(grammarAccess.getDeclaredVarListRule()); } 
	 EOF 
;

// Rule DeclaredVarList
ruleDeclaredVarList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaredVarListAccess().getGroup()); }
		(rule__DeclaredVarList__Group__0)
		{ after(grammarAccess.getDeclaredVarListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarName
entryRuleVarName
:
{ before(grammarAccess.getVarNameRule()); }
	 ruleVarName
{ after(grammarAccess.getVarNameRule()); } 
	 EOF 
;

// Rule VarName
ruleVarName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarNameAccess().getNameAssignment()); }
		(rule__VarName__NameAssignment)
		{ after(grammarAccess.getVarNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarType
entryRuleVarType
:
{ before(grammarAccess.getVarTypeRule()); }
	 ruleVarType
{ after(grammarAccess.getVarTypeRule()); } 
	 EOF 
;

// Rule VarType
ruleVarType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameAssignment()); }
		(rule__VarType__TypeNameAssignment)
		{ after(grammarAccess.getVarTypeAccess().getTypeNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubprograms
entryRuleSubprograms
:
{ before(grammarAccess.getSubprogramsRule()); }
	 ruleSubprograms
{ after(grammarAccess.getSubprogramsRule()); } 
	 EOF 
;

// Rule Subprograms
ruleSubprograms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
			(rule__Subprograms__BlockSubProgramsAssignment)
			{ after(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
		)
		(
			{ before(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
			(rule__Subprograms__BlockSubProgramsAssignment)*
			{ after(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockSubPrograms
entryRuleBlockSubPrograms
:
{ before(grammarAccess.getBlockSubProgramsRule()); }
	 ruleBlockSubPrograms
{ after(grammarAccess.getBlockSubProgramsRule()); } 
	 EOF 
;

// Rule BlockSubPrograms
ruleBlockSubPrograms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockSubProgramsAccess().getAlternatives()); }
		(rule__BlockSubPrograms__Alternatives)
		{ after(grammarAccess.getBlockSubProgramsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedureName
entryRuleProcedureName
:
{ before(grammarAccess.getProcedureNameRule()); }
	 ruleProcedureName
{ after(grammarAccess.getProcedureNameRule()); } 
	 EOF 
;

// Rule ProcedureName
ruleProcedureName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureNameAccess().getNameAssignment()); }
		(rule__ProcedureName__NameAssignment)
		{ after(grammarAccess.getProcedureNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
		(rule__FunctionName__NameAssignment)
		{ after(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockFunction
entryRuleBlockFunction
:
{ before(grammarAccess.getBlockFunctionRule()); }
	 ruleBlockFunction
{ after(grammarAccess.getBlockFunctionRule()); } 
	 EOF 
;

// Rule BlockFunction
ruleBlockFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getGroup()); }
		(rule__BlockFunction__Group__0)
		{ after(grammarAccess.getBlockFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockProcedure
entryRuleBlockProcedure
:
{ before(grammarAccess.getBlockProcedureRule()); }
	 ruleBlockProcedure
{ after(grammarAccess.getBlockProcedureRule()); } 
	 EOF 
;

// Rule BlockProcedure
ruleBlockProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getGroup()); }
		(rule__BlockProcedure__Group__0)
		{ after(grammarAccess.getBlockProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockCommand
entryRuleBlockCommand
:
{ before(grammarAccess.getBlockCommandRule()); }
	 ruleBlockCommand
{ after(grammarAccess.getBlockCommandRule()); } 
	 EOF 
;

// Rule BlockCommand
ruleBlockCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockCommandAccess().getGroup()); }
		(rule__BlockCommand__Group__0)
		{ after(grammarAccess.getBlockCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractCommand
entryRuleAbstractCommand
:
{ before(grammarAccess.getAbstractCommandRule()); }
	 ruleAbstractCommand
{ after(grammarAccess.getAbstractCommandRule()); } 
	 EOF 
;

// Rule AbstractCommand
ruleAbstractCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractCommandAccess().getAlternatives()); }
		(rule__AbstractCommand__Alternatives)
		{ after(grammarAccess.getAbstractCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBreakStatement
entryRuleBreakStatement
:
{ before(grammarAccess.getBreakStatementRule()); }
	 ruleBreakStatement
{ after(grammarAccess.getBreakStatementRule()); } 
	 EOF 
;

// Rule BreakStatement
ruleBreakStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBreakStatementAccess().getGroup()); }
		(rule__BreakStatement__Group__0)
		{ after(grammarAccess.getBreakStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement
:
{ before(grammarAccess.getReturnStatementRule()); }
	 ruleReturnStatement
{ after(grammarAccess.getReturnStatementRule()); } 
	 EOF 
;

// Rule ReturnStatement
ruleReturnStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReturnStatementAccess().getGroup()); }
		(rule__ReturnStatement__Group__0)
		{ after(grammarAccess.getReturnStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIfStatement
entryRuleIfStatement
:
{ before(grammarAccess.getIfStatementRule()); }
	 ruleIfStatement
{ after(grammarAccess.getIfStatementRule()); } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfStatementAccess().getGroup()); }
		(rule__IfStatement__Group__0)
		{ after(grammarAccess.getIfStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSwitchCaseStatement
entryRuleSwitchCaseStatement
:
{ before(grammarAccess.getSwitchCaseStatementRule()); }
	 ruleSwitchCaseStatement
{ after(grammarAccess.getSwitchCaseStatementRule()); } 
	 EOF 
;

// Rule SwitchCaseStatement
ruleSwitchCaseStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSwitchCaseStatementAccess().getGroup()); }
		(rule__SwitchCaseStatement__Group__0)
		{ after(grammarAccess.getSwitchCaseStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCaseList
entryRuleCaseList
:
{ before(grammarAccess.getCaseListRule()); }
	 ruleCaseList
{ after(grammarAccess.getCaseListRule()); } 
	 EOF 
;

// Rule CaseList
ruleCaseList 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCaseListAccess().getGroup()); }
		(rule__CaseList__Group__0)
		{ after(grammarAccess.getCaseListAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOtherCase
entryRuleOtherCase
:
{ before(grammarAccess.getOtherCaseRule()); }
	 ruleOtherCase
{ after(grammarAccess.getOtherCaseRule()); } 
	 EOF 
;

// Rule OtherCase
ruleOtherCase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOtherCaseAccess().getGroup()); }
		(rule__OtherCase__Group__0)
		{ after(grammarAccess.getOtherCaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForStatement
entryRuleForStatement
:
{ before(grammarAccess.getForStatementRule()); }
	 ruleForStatement
{ after(grammarAccess.getForStatementRule()); } 
	 EOF 
;

// Rule ForStatement
ruleForStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForStatementAccess().getGroup()); }
		(rule__ForStatement__Group__0)
		{ after(grammarAccess.getForStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement
:
{ before(grammarAccess.getWhileStatementRule()); }
	 ruleWhileStatement
{ after(grammarAccess.getWhileStatementRule()); } 
	 EOF 
;

// Rule WhileStatement
ruleWhileStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileStatementAccess().getGroup()); }
		(rule__WhileStatement__Group__0)
		{ after(grammarAccess.getWhileStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement
:
{ before(grammarAccess.getRepeatStatementRule()); }
	 ruleRepeatStatement
{ after(grammarAccess.getRepeatStatementRule()); } 
	 EOF 
;

// Rule RepeatStatement
ruleRepeatStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getGroup()); }
		(rule__RepeatStatement__Group__0)
		{ after(grammarAccess.getRepeatStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubprogramParam
entryRuleSubprogramParam
:
{ before(grammarAccess.getSubprogramParamRule()); }
	 ruleSubprogramParam
{ after(grammarAccess.getSubprogramParamRule()); } 
	 EOF 
;

// Rule SubprogramParam
ruleSubprogramParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSubprogramParamAccess().getGroup()); }
		(rule__SubprogramParam__Group__0)
		{ after(grammarAccess.getSubprogramParamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReadCommand
entryRuleReadCommand
:
{ before(grammarAccess.getReadCommandRule()); }
	 ruleReadCommand
{ after(grammarAccess.getReadCommandRule()); } 
	 EOF 
;

// Rule ReadCommand
ruleReadCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadCommandAccess().getGroup()); }
		(rule__ReadCommand__Group__0)
		{ after(grammarAccess.getReadCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWriteCommand
entryRuleWriteCommand
:
{ before(grammarAccess.getWriteCommandRule()); }
	 ruleWriteCommand
{ after(grammarAccess.getWriteCommandRule()); } 
	 EOF 
;

// Rule WriteCommand
ruleWriteCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWriteCommandAccess().getGroup()); }
		(rule__WriteCommand__Group__0)
		{ after(grammarAccess.getWriteCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWriteParam
entryRuleWriteParam
:
{ before(grammarAccess.getWriteParamRule()); }
	 ruleWriteParam
{ after(grammarAccess.getWriteParamRule()); } 
	 EOF 
;

// Rule WriteParam
ruleWriteParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWriteParamAccess().getGroup()); }
		(rule__WriteParam__Group__0)
		{ after(grammarAccess.getWriteParamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptDecimalPrecision
entryRuleOptDecimalPrecision
:
{ before(grammarAccess.getOptDecimalPrecisionRule()); }
	 ruleOptDecimalPrecision
{ after(grammarAccess.getOptDecimalPrecisionRule()); } 
	 EOF 
;

// Rule OptDecimalPrecision
ruleOptDecimalPrecision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptDecimalPrecisionAccess().getGroup()); }
		(rule__OptDecimalPrecision__Group__0)
		{ after(grammarAccess.getOptDecimalPrecisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
		ruleAssignment
		{ after(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorExpression
entryRuleXorExpression
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
		(rule__XorExpression__Group__0)
		{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquExpression
entryRuleEquExpression
:
{ before(grammarAccess.getEquExpressionRule()); }
	 ruleEquExpression
{ after(grammarAccess.getEquExpressionRule()); } 
	 EOF 
;

// Rule EquExpression
ruleEquExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquExpressionAccess().getGroup()); }
		(rule__EquExpression__Group__0)
		{ after(grammarAccess.getEquExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddExpression
entryRuleAddExpression
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
		(rule__AddExpression__Group__0)
		{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePowerExpression
entryRulePowerExpression
:
{ before(grammarAccess.getPowerExpressionRule()); }
	 rulePowerExpression
{ after(grammarAccess.getPowerExpressionRule()); } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getGroup()); }
		(rule__PowerExpression__Group__0)
		{ after(grammarAccess.getPowerExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
		(rule__UnaryExpression__Alternatives)
		{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePreDefinedFunctionCall
entryRulePreDefinedFunctionCall
:
{ before(grammarAccess.getPreDefinedFunctionCallRule()); }
	 rulePreDefinedFunctionCall
{ after(grammarAccess.getPreDefinedFunctionCallRule()); } 
	 EOF 
;

// Rule PreDefinedFunctionCall
rulePreDefinedFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPreDefinedFunctionCallAccess().getGroup()); }
		(rule__PreDefinedFunctionCall__Group__0)
		{ after(grammarAccess.getPreDefinedFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePredefineFunctions
entryRulePredefineFunctions
:
{ before(grammarAccess.getPredefineFunctionsRule()); }
	 rulePredefineFunctions
{ after(grammarAccess.getPredefineFunctionsRule()); } 
	 EOF 
;

// Rule PredefineFunctions
rulePredefineFunctions 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPredefineFunctionsAccess().getAlternatives()); }
		(rule__PredefineFunctions__Alternatives)
		{ after(grammarAccess.getPredefineFunctionsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaredVar
entryRuleDeclaredVar
:
{ before(grammarAccess.getDeclaredVarRule()); }
	 ruleDeclaredVar
{ after(grammarAccess.getDeclaredVarRule()); } 
	 EOF 
;

// Rule DeclaredVar
ruleDeclaredVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaredVarAccess().getVarNameAssignment()); }
		(rule__DeclaredVar__VarNameAssignment)
		{ after(grammarAccess.getDeclaredVarAccess().getVarNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral
:
{ before(grammarAccess.getNumericLiteralRule()); }
	 ruleNumericLiteral
{ after(grammarAccess.getNumericLiteralRule()); } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
		(rule__NumericLiteral__Alternatives)
		{ after(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getLiteralStringAssignment()); }
		(rule__StringExpression__LiteralStringAssignment)
		{ after(grammarAccess.getStringExpressionAccess().getLiteralStringAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePiLiteral
entryRulePiLiteral
:
{ before(grammarAccess.getPiLiteralRule()); }
	 rulePiLiteral
{ after(grammarAccess.getPiLiteralRule()); } 
	 EOF 
;

// Rule PiLiteral
rulePiLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPiLiteralAccess().getPiKeyword()); }
		Pi
		{ after(grammarAccess.getPiLiteralAccess().getPiKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEND_COMMAND
entryRuleEND_COMMAND
:
{ before(grammarAccess.getEND_COMMANDRule()); }
	 ruleEND_COMMAND
{ after(grammarAccess.getEND_COMMANDRule()); } 
	 EOF 
;

// Rule END_COMMAND
ruleEND_COMMAND 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEND_COMMANDAccess().getSemicolonKeyword()); }
		Semicolon
		{ after(grammarAccess.getEND_COMMANDAccess().getSemicolonKeyword()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__TypeNameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameRealKeyword_0_0()); }
		Real
		{ after(grammarAccess.getVarTypeAccess().getTypeNameRealKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameInteiroKeyword_0_1()); }
		Inteiro
		{ after(grammarAccess.getVarTypeAccess().getTypeNameInteiroKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameCaractereKeyword_0_2()); }
		Caractere
		{ after(grammarAccess.getVarTypeAccess().getTypeNameCaractereKeyword_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameCaracterKeyword_0_3()); }
		Caracter
		{ after(grammarAccess.getVarTypeAccess().getTypeNameCaracterKeyword_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSubPrograms__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockSubProgramsAccess().getBlockFunctionParserRuleCall_0()); }
		ruleBlockFunction
		{ after(grammarAccess.getBlockSubProgramsAccess().getBlockFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockSubProgramsAccess().getBlockProcedureParserRuleCall_1()); }
		ruleBlockProcedure
		{ after(grammarAccess.getBlockSubProgramsAccess().getBlockProcedureParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_0()); }
		(rule__AbstractCommand__Group_0__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_1()); }
		(rule__AbstractCommand__Group_1__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_2()); }
		(rule__AbstractCommand__Group_2__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getIfStatementParserRuleCall_3()); }
		ruleIfStatement
		{ after(grammarAccess.getAbstractCommandAccess().getIfStatementParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getSwitchCaseStatementParserRuleCall_4()); }
		ruleSwitchCaseStatement
		{ after(grammarAccess.getAbstractCommandAccess().getSwitchCaseStatementParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getForStatementParserRuleCall_5()); }
		ruleForStatement
		{ after(grammarAccess.getAbstractCommandAccess().getForStatementParserRuleCall_5()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getRepeatStatementParserRuleCall_6()); }
		ruleRepeatStatement
		{ after(grammarAccess.getAbstractCommandAccess().getRepeatStatementParserRuleCall_6()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getWhileStatementParserRuleCall_7()); }
		ruleWhileStatement
		{ after(grammarAccess.getAbstractCommandAccess().getWhileStatementParserRuleCall_7()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_8()); }
		(rule__AbstractCommand__Group_8__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_8()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_9()); }
		(rule__AbstractCommand__Group_9__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__WriteCommandAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteCommandAccess().getWriteCommandEscrevaKeyword_0_0_0()); }
		Escreva
		{ after(grammarAccess.getWriteCommandAccess().getWriteCommandEscrevaKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getWriteCommandAccess().getWriteCommandEscrevalKeyword_0_0_1()); }
		Escreval
		{ after(grammarAccess.getWriteCommandAccess().getWriteCommandEscrevalKeyword_0_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpAmpersandKeyword_1_0_0_1_0_0()); }
		Ampersand
		{ after(grammarAccess.getAndExpressionAccess().getOpAmpersandKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpEKeyword_1_0_0_1_0_1()); }
		E
		{ after(grammarAccess.getAndExpressionAccess().getOpEKeyword_1_0_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpEqualsSignKeyword_1_0_0_1_0_0()); }
		EqualsSign
		{ after(grammarAccess.getComparisonAccess().getOpEqualsSignKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_0_1_0_1()); }
		LessThanSignGreaterThanSign
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpLessThanSignKeyword_1_0_0_1_0_0()); }
		LessThanSign
		{ after(grammarAccess.getEquExpressionAccess().getOpLessThanSignKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1_0_1()); }
		GreaterThanSign
		{ after(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_1_0_2()); }
		LessThanSignEqualsSign
		{ after(grammarAccess.getEquExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_1_0_3()); }
		GreaterThanSignEqualsSign
		{ after(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getOpPlusSignKeyword_1_0_0_1_0_0()); }
		PlusSign
		{ after(grammarAccess.getAddExpressionAccess().getOpPlusSignKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getAddExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_1_0_0()); }
		Asterisk
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1_0_1()); }
		Solidus
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpMODKeyword_1_0_0_1_0_2()); }
		MOD
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpMODKeyword_1_0_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_1_0_3()); }
		PercentSign
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
		(rule__UnaryExpression__Group_0__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
		rulePrimaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpNOTKeyword_0_1_0_0()); }
		NOT
		{ after(grammarAccess.getUnaryExpressionAccess().getOpNOTKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_1_0_1()); }
		HyphenMinus
		{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getPreDefinedFunctionCallParserRuleCall_1()); }
		rulePreDefinedFunctionCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getPreDefinedFunctionCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2()); }
		ruleFunctionCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getDeclaredVarParserRuleCall_3()); }
		ruleDeclaredVar
		{ after(grammarAccess.getPrimaryExpressionAccess().getDeclaredVarParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
		(rule__PrimaryExpression__Group_4__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PredefineFunctions__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPredefineFunctionsAccess().getMaiuscKeyword_0()); }
		Maiusc
		{ after(grammarAccess.getPredefineFunctionsAccess().getMaiuscKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPredefineFunctionsAccess().getComprKeyword_1()); }
		Compr
		{ after(grammarAccess.getPredefineFunctionsAccess().getComprKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getPredefineFunctionsAccess().getRaizqKeyword_2()); }
		Raizq
		{ after(grammarAccess.getPredefineFunctionsAccess().getRaizqKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getPredefineFunctionsAccess().getCopiaKeyword_3()); }
		Copia
		{ after(grammarAccess.getPredefineFunctionsAccess().getCopiaKeyword_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getGroup_0()); }
		(rule__Literal__Group_0__0)
		{ after(grammarAccess.getLiteralAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_1()); }
		ruleNumericLiteral
		{ after(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringExpressionParserRuleCall_2()); }
		ruleStringExpression
		{ after(grammarAccess.getLiteralAccess().getStringExpressionParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getIntValueAssignment_0()); }
		(rule__NumericLiteral__IntValueAssignment_0)
		{ after(grammarAccess.getNumericLiteralAccess().getIntValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericLiteralAccess().getFloatValueAssignment_1()); }
		(rule__NumericLiteral__FloatValueAssignment_1)
		{ after(grammarAccess.getNumericLiteralAccess().getFloatValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getHeaderAssignment_0()); }
	(rule__Model__HeaderAssignment_0)
	{ after(grammarAccess.getModelAccess().getHeaderAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGlobalDeclarationsAssignment_1()); }
	(rule__Model__GlobalDeclarationsAssignment_1)?
	{ after(grammarAccess.getModelAccess().getGlobalDeclarationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSubprogramsAssignment_2()); }
	(rule__Model__SubprogramsAssignment_2)?
	{ after(grammarAccess.getModelAccess().getSubprogramsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getCommandsAssignment_3()); }
	(rule__Model__CommandsAssignment_3)
	{ after(grammarAccess.getModelAccess().getCommandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HeaderBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderBlock__Group__0__Impl
	rule__HeaderBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderBlockAccess().getAlgoritmoKeyword_0()); }
	Algoritmo
	{ after(grammarAccess.getHeaderBlockAccess().getAlgoritmoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderBlock__Group__1__Impl
	rule__HeaderBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderBlockAccess().getAlgorithmNameAssignment_1()); }
	(rule__HeaderBlock__AlgorithmNameAssignment_1)
	{ after(grammarAccess.getHeaderBlockAccess().getAlgorithmNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderBlockAccess().getEND_COMMANDParserRuleCall_2()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getHeaderBlockAccess().getEND_COMMANDParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationsBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group__0__Impl
	rule__DeclarationsBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationsBlockAccess().getVarKeyword_0()); }
	Var
	{ after(grammarAccess.getDeclarationsBlockAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getGroup_1()); }
		(rule__DeclarationsBlock__Group_1__0)
		{ after(grammarAccess.getDeclarationsBlockAccess().getGroup_1()); }
	)
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getGroup_1()); }
		(rule__DeclarationsBlock__Group_1__0)*
		{ after(grammarAccess.getDeclarationsBlockAccess().getGroup_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationsBlock__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group_1__0__Impl
	rule__DeclarationsBlock__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationsBlockAccess().getVarsAssignment_1_0()); }
	(rule__DeclarationsBlock__VarsAssignment_1_0)
	{ after(grammarAccess.getDeclarationsBlockAccess().getVarsAssignment_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDParserRuleCall_1_1()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVarDeclarationAssignment_0()); }
	(rule__Variable__VarDeclarationAssignment_0)
	{ after(grammarAccess.getVariableAccess().getVarDeclarationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getVariableAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getTypeAssignment_2()); }
	(rule__Variable__TypeAssignment_2)
	{ after(grammarAccess.getVariableAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVarsAssignment_0()); }
	(rule__VarDeclaration__VarsAssignment_0)
	{ after(grammarAccess.getVarDeclarationAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_1()); }
	(rule__VarDeclaration__Group_1__0)*
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_1__0__Impl
	rule__VarDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getVarDeclarationAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVarsAssignment_1_1()); }
	(rule__VarDeclaration__VarsAssignment_1_1)
	{ after(grammarAccess.getVarDeclarationAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredVarList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVarList__Group__0__Impl
	rule__DeclaredVarList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarListAccess().getVarsAssignment_0()); }
	(rule__DeclaredVarList__VarsAssignment_0)
	{ after(grammarAccess.getDeclaredVarListAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVarList__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarListAccess().getGroup_1()); }
	(rule__DeclaredVarList__Group_1__0)*
	{ after(grammarAccess.getDeclaredVarListAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredVarList__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVarList__Group_1__0__Impl
	rule__DeclaredVarList__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarListAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getDeclaredVarListAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVarList__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarListAccess().getVarsAssignment_1_1()); }
	(rule__DeclaredVarList__VarsAssignment_1_1)
	{ after(grammarAccess.getDeclaredVarListAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__0__Impl
	rule__BlockFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getFuncaoKeyword_0()); }
	Funcao
	{ after(grammarAccess.getBlockFunctionAccess().getFuncaoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__1__Impl
	rule__BlockFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getFunctionNameAssignment_1()); }
	(rule__BlockFunction__FunctionNameAssignment_1)
	{ after(grammarAccess.getBlockFunctionAccess().getFunctionNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__2__Impl
	rule__BlockFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getBlockFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__3__Impl
	rule__BlockFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getParamListAssignment_3()); }
	(rule__BlockFunction__ParamListAssignment_3)?
	{ after(grammarAccess.getBlockFunctionAccess().getParamListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__4__Impl
	rule__BlockFunction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getBlockFunctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__5__Impl
	rule__BlockFunction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getColonKeyword_5()); }
	Colon
	{ after(grammarAccess.getBlockFunctionAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__6__Impl
	rule__BlockFunction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getReturnTypeAssignment_6()); }
	(rule__BlockFunction__ReturnTypeAssignment_6)
	{ after(grammarAccess.getBlockFunctionAccess().getReturnTypeAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__7__Impl
	rule__BlockFunction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getDeclarationsAssignment_7()); }
	(rule__BlockFunction__DeclarationsAssignment_7)?
	{ after(grammarAccess.getBlockFunctionAccess().getDeclarationsAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__8__Impl
	rule__BlockFunction__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getInicioKeyword_8()); }
	Inicio
	{ after(grammarAccess.getBlockFunctionAccess().getInicioKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__9__Impl
	rule__BlockFunction__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_9()); }
		(rule__BlockFunction__CommandsAssignment_9)
		{ after(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_9()); }
	)
	(
		{ before(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_9()); }
		(rule__BlockFunction__CommandsAssignment_9)*
		{ after(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_9()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getFimfuncaoKeyword_10()); }
	Fimfuncao
	{ after(grammarAccess.getBlockFunctionAccess().getFimfuncaoKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockProcedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__0__Impl
	rule__BlockProcedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getProcedimentoKeyword_0()); }
	Procedimento
	{ after(grammarAccess.getBlockProcedureAccess().getProcedimentoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__1__Impl
	rule__BlockProcedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getProcedureNameAssignment_1()); }
	(rule__BlockProcedure__ProcedureNameAssignment_1)
	{ after(grammarAccess.getBlockProcedureAccess().getProcedureNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__2__Impl
	rule__BlockProcedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getLeftParenthesisKeyword_2()); }
	LeftParenthesis
	{ after(grammarAccess.getBlockProcedureAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__3__Impl
	rule__BlockProcedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getParamListAssignment_3()); }
	(rule__BlockProcedure__ParamListAssignment_3)?
	{ after(grammarAccess.getBlockProcedureAccess().getParamListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__4__Impl
	rule__BlockProcedure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getRightParenthesisKeyword_4()); }
	RightParenthesis
	{ after(grammarAccess.getBlockProcedureAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__5__Impl
	rule__BlockProcedure__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getDeclarationsAssignment_5()); }
	(rule__BlockProcedure__DeclarationsAssignment_5)?
	{ after(grammarAccess.getBlockProcedureAccess().getDeclarationsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__6__Impl
	rule__BlockProcedure__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getInicioKeyword_6()); }
	Inicio
	{ after(grammarAccess.getBlockProcedureAccess().getInicioKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__7__Impl
	rule__BlockProcedure__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_7()); }
		(rule__BlockProcedure__CommandsAssignment_7)
		{ after(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_7()); }
	)
	(
		{ before(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_7()); }
		(rule__BlockProcedure__CommandsAssignment_7)*
		{ after(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_7()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getFimprocedimentoKeyword_8()); }
	Fimprocedimento
	{ after(grammarAccess.getBlockProcedureAccess().getFimprocedimentoKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__0__Impl
	rule__BlockCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockCommandAccess().getInicioKeyword_0()); }
	Inicio
	{ after(grammarAccess.getBlockCommandAccess().getInicioKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__1__Impl
	rule__BlockCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockCommandAccess().getCommandsAssignment_1()); }
		(rule__BlockCommand__CommandsAssignment_1)
		{ after(grammarAccess.getBlockCommandAccess().getCommandsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getBlockCommandAccess().getCommandsAssignment_1()); }
		(rule__BlockCommand__CommandsAssignment_1)*
		{ after(grammarAccess.getBlockCommandAccess().getCommandsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockCommandAccess().getFimalgoritmoKeyword_2()); }
	Fimalgoritmo
	{ after(grammarAccess.getBlockCommandAccess().getFimalgoritmoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_0__0__Impl
	rule__AbstractCommand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getReadCommandParserRuleCall_0_0()); }
	ruleReadCommand
	{ after(grammarAccess.getAbstractCommandAccess().getReadCommandParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_0_1()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_1__0__Impl
	rule__AbstractCommand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getWriteCommandParserRuleCall_1_0()); }
	ruleWriteCommand
	{ after(grammarAccess.getAbstractCommandAccess().getWriteCommandParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_1_1()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_2__0__Impl
	rule__AbstractCommand__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getExpressionParserRuleCall_2_0()); }
	ruleExpression
	{ after(grammarAccess.getAbstractCommandAccess().getExpressionParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_2_1()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_8__0__Impl
	rule__AbstractCommand__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getBreakStatementParserRuleCall_8_0()); }
	ruleBreakStatement
	{ after(grammarAccess.getAbstractCommandAccess().getBreakStatementParserRuleCall_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_8_1()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_9__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_9__0__Impl
	rule__AbstractCommand__Group_9__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_9__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getReturnStatementParserRuleCall_9_0()); }
	ruleReturnStatement
	{ after(grammarAccess.getAbstractCommandAccess().getReturnStatementParserRuleCall_9_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_9__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_9__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_9__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_9_1()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_9_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BreakStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BreakStatement__Group__0__Impl
	rule__BreakStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
	()
	{ after(grammarAccess.getBreakStatementAccess().getBreakStatementAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BreakStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BreakStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBreakStatementAccess().getInterrompaKeyword_1()); }
	Interrompa
	{ after(grammarAccess.getBreakStatementAccess().getInterrompaKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReturnStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__0__Impl
	rule__ReturnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getReturnExpressionAction_0()); }
	()
	{ after(grammarAccess.getReturnStatementAccess().getReturnExpressionAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__1__Impl
	rule__ReturnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getRetorneKeyword_1()); }
	Retorne
	{ after(grammarAccess.getReturnStatementAccess().getRetorneKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReturnStatement__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReturnStatementAccess().getExprAssignment_2()); }
	(rule__ReturnStatement__ExprAssignment_2)
	{ after(grammarAccess.getReturnStatementAccess().getExprAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__0__Impl
	rule__IfStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getSeKeyword_0()); }
	Se
	{ after(grammarAccess.getIfStatementAccess().getSeKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__1__Impl
	rule__IfStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getExprAssignment_1()); }
	(rule__IfStatement__ExprAssignment_1)
	{ after(grammarAccess.getIfStatementAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__2__Impl
	rule__IfStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getEntaoKeyword_2()); }
	Entao
	{ after(grammarAccess.getIfStatementAccess().getEntaoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__3__Impl
	rule__IfStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getIfStatementAccess().getCommandsAssignment_3()); }
		(rule__IfStatement__CommandsAssignment_3)
		{ after(grammarAccess.getIfStatementAccess().getCommandsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getIfStatementAccess().getCommandsAssignment_3()); }
		(rule__IfStatement__CommandsAssignment_3)*
		{ after(grammarAccess.getIfStatementAccess().getCommandsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__4__Impl
	rule__IfStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getGroup_4()); }
	(rule__IfStatement__Group_4__0)?
	{ after(grammarAccess.getIfStatementAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getFimseKeyword_5()); }
	Fimse
	{ after(grammarAccess.getIfStatementAccess().getFimseKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IfStatement__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__0__Impl
	rule__IfStatement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfStatementAccess().getSenaoKeyword_4_0()); }
	Senao
	{ after(grammarAccess.getIfStatementAccess().getSenaoKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IfStatement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getIfStatementAccess().getElseCommandsAssignment_4_1()); }
		(rule__IfStatement__ElseCommandsAssignment_4_1)
		{ after(grammarAccess.getIfStatementAccess().getElseCommandsAssignment_4_1()); }
	)
	(
		{ before(grammarAccess.getIfStatementAccess().getElseCommandsAssignment_4_1()); }
		(rule__IfStatement__ElseCommandsAssignment_4_1)*
		{ after(grammarAccess.getIfStatementAccess().getElseCommandsAssignment_4_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SwitchCaseStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCaseStatement__Group__0__Impl
	rule__SwitchCaseStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseStatementAccess().getEscolhaKeyword_0()); }
	Escolha
	{ after(grammarAccess.getSwitchCaseStatementAccess().getEscolhaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCaseStatement__Group__1__Impl
	rule__SwitchCaseStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseStatementAccess().getVariableAssignment_1()); }
	(rule__SwitchCaseStatement__VariableAssignment_1)
	{ after(grammarAccess.getSwitchCaseStatementAccess().getVariableAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCaseStatement__Group__2__Impl
	rule__SwitchCaseStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getSwitchCaseStatementAccess().getCaseListAssignment_2()); }
		(rule__SwitchCaseStatement__CaseListAssignment_2)
		{ after(grammarAccess.getSwitchCaseStatementAccess().getCaseListAssignment_2()); }
	)
	(
		{ before(grammarAccess.getSwitchCaseStatementAccess().getCaseListAssignment_2()); }
		(rule__SwitchCaseStatement__CaseListAssignment_2)*
		{ after(grammarAccess.getSwitchCaseStatementAccess().getCaseListAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCaseStatement__Group__3__Impl
	rule__SwitchCaseStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseStatementAccess().getOtherCaseAssignment_3()); }
	(rule__SwitchCaseStatement__OtherCaseAssignment_3)?
	{ after(grammarAccess.getSwitchCaseStatementAccess().getOtherCaseAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SwitchCaseStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSwitchCaseStatementAccess().getFimescolhaKeyword_4()); }
	Fimescolha
	{ after(grammarAccess.getSwitchCaseStatementAccess().getFimescolhaKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__CaseList__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group__0__Impl
	rule__CaseList__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListAccess().getCasoKeyword_0()); }
	Caso
	{ after(grammarAccess.getCaseListAccess().getCasoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group__1__Impl
	rule__CaseList__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListAccess().getExprAssignment_1()); }
	(rule__CaseList__ExprAssignment_1)
	{ after(grammarAccess.getCaseListAccess().getExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group__2__Impl
	rule__CaseList__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCaseListAccess().getColonKeyword_2()); }
	Colon
	{ after(grammarAccess.getCaseListAccess().getColonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CaseList__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCaseListAccess().getCommandsAssignment_3()); }
		(rule__CaseList__CommandsAssignment_3)
		{ after(grammarAccess.getCaseListAccess().getCommandsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getCaseListAccess().getCommandsAssignment_3()); }
		(rule__CaseList__CommandsAssignment_3)*
		{ after(grammarAccess.getCaseListAccess().getCommandsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OtherCase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OtherCase__Group__0__Impl
	rule__OtherCase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherCase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOtherCaseAccess().getOutrocasoKeyword_0()); }
	Outrocaso
	{ after(grammarAccess.getOtherCaseAccess().getOutrocasoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherCase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OtherCase__Group__1__Impl
	rule__OtherCase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherCase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOtherCaseAccess().getColonKeyword_1()); }
	Colon
	{ after(grammarAccess.getOtherCaseAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherCase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OtherCase__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherCase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAssignment_2()); }
		(rule__OtherCase__OtherCaseCommandsAssignment_2)
		{ after(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAssignment_2()); }
		(rule__OtherCase__OtherCaseCommandsAssignment_2)*
		{ after(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__0__Impl
	rule__ForStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getParaKeyword_0()); }
	Para
	{ after(grammarAccess.getForStatementAccess().getParaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__1__Impl
	rule__ForStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getOperatorExprAssignment_1()); }
	(rule__ForStatement__OperatorExprAssignment_1)
	{ after(grammarAccess.getForStatementAccess().getOperatorExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__2__Impl
	rule__ForStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getDeKeyword_2()); }
	De
	{ after(grammarAccess.getForStatementAccess().getDeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__3__Impl
	rule__ForStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getStartExprAssignment_3()); }
	(rule__ForStatement__StartExprAssignment_3)
	{ after(grammarAccess.getForStatementAccess().getStartExprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__4__Impl
	rule__ForStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getAteKeyword_4()); }
	Ate
	{ after(grammarAccess.getForStatementAccess().getAteKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__5__Impl
	rule__ForStatement__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getEndExprAssignment_5()); }
	(rule__ForStatement__EndExprAssignment_5)
	{ after(grammarAccess.getForStatementAccess().getEndExprAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__6__Impl
	rule__ForStatement__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getGroup_6()); }
	(rule__ForStatement__Group_6__0)?
	{ after(grammarAccess.getForStatementAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__7__Impl
	rule__ForStatement__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getFacaKeyword_7()); }
	Faca
	{ after(grammarAccess.getForStatementAccess().getFacaKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__8__Impl
	rule__ForStatement__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getForStatementAccess().getCommandsAssignment_8()); }
		(rule__ForStatement__CommandsAssignment_8)
		{ after(grammarAccess.getForStatementAccess().getCommandsAssignment_8()); }
	)
	(
		{ before(grammarAccess.getForStatementAccess().getCommandsAssignment_8()); }
		(rule__ForStatement__CommandsAssignment_8)*
		{ after(grammarAccess.getForStatementAccess().getCommandsAssignment_8()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getFimparaKeyword_9()); }
	Fimpara
	{ after(grammarAccess.getForStatementAccess().getFimparaKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForStatement__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_6__0__Impl
	rule__ForStatement__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getPassoKeyword_6_0()); }
	Passo
	{ after(grammarAccess.getForStatementAccess().getPassoKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForStatement__Group_6__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForStatementAccess().getStepExpeAssignment_6_1()); }
	(rule__ForStatement__StepExpeAssignment_6_1)
	{ after(grammarAccess.getForStatementAccess().getStepExpeAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhileStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__0__Impl
	rule__WhileStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getEnquantoKeyword_0()); }
	Enquanto
	{ after(grammarAccess.getWhileStatementAccess().getEnquantoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__1__Impl
	rule__WhileStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getWhileExprAssignment_1()); }
	(rule__WhileStatement__WhileExprAssignment_1)
	{ after(grammarAccess.getWhileStatementAccess().getWhileExprAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__2__Impl
	rule__WhileStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getFacaKeyword_2()); }
	Faca
	{ after(grammarAccess.getWhileStatementAccess().getFacaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__3__Impl
	rule__WhileStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getWhileStatementAccess().getCommandsAssignment_3()); }
		(rule__WhileStatement__CommandsAssignment_3)
		{ after(grammarAccess.getWhileStatementAccess().getCommandsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getWhileStatementAccess().getCommandsAssignment_3()); }
		(rule__WhileStatement__CommandsAssignment_3)*
		{ after(grammarAccess.getWhileStatementAccess().getCommandsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhileStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileStatementAccess().getFimenquantoKeyword_4()); }
	Fimenquanto
	{ after(grammarAccess.getWhileStatementAccess().getFimenquantoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__RepeatStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__0__Impl
	rule__RepeatStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getRepitaKeyword_0()); }
	Repita
	{ after(grammarAccess.getRepeatStatementAccess().getRepitaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__1__Impl
	rule__RepeatStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRepeatStatementAccess().getCommandsAssignment_1()); }
		(rule__RepeatStatement__CommandsAssignment_1)
		{ after(grammarAccess.getRepeatStatementAccess().getCommandsAssignment_1()); }
	)
	(
		{ before(grammarAccess.getRepeatStatementAccess().getCommandsAssignment_1()); }
		(rule__RepeatStatement__CommandsAssignment_1)*
		{ after(grammarAccess.getRepeatStatementAccess().getCommandsAssignment_1()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__2__Impl
	rule__RepeatStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getAteKeyword_2()); }
	Ate
	{ after(grammarAccess.getRepeatStatementAccess().getAteKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__3__Impl
	rule__RepeatStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getUntilExprAssignment_3()); }
	(rule__RepeatStatement__UntilExprAssignment_3)
	{ after(grammarAccess.getRepeatStatementAccess().getUntilExprAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__RepeatStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatStatementAccess().getEND_COMMANDParserRuleCall_4()); }
	ruleEND_COMMAND
	{ after(grammarAccess.getRepeatStatementAccess().getEND_COMMANDParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramParam__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubprogramParam__Group__0__Impl
	rule__SubprogramParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubprogramParamAccess().getExpressionAssignment_0()); }
	(rule__SubprogramParam__ExpressionAssignment_0)
	{ after(grammarAccess.getSubprogramParamAccess().getExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubprogramParam__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubprogramParamAccess().getGroup_1()); }
	(rule__SubprogramParam__Group_1__0)*
	{ after(grammarAccess.getSubprogramParamAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SubprogramParam__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubprogramParam__Group_1__0__Impl
	rule__SubprogramParam__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubprogramParamAccess().getCommaKeyword_1_0()); }
	Comma
	{ after(grammarAccess.getSubprogramParamAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SubprogramParam__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSubprogramParamAccess().getExpressionAssignment_1_1()); }
	(rule__SubprogramParam__ExpressionAssignment_1_1)
	{ after(grammarAccess.getSubprogramParamAccess().getExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReadCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__0__Impl
	rule__ReadCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getLeiaKeyword_0()); }
	Leia
	{ after(grammarAccess.getReadCommandAccess().getLeiaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__1__Impl
	rule__ReadCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getReadCommandAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__2__Impl
	rule__ReadCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getParamListAssignment_2()); }
	(rule__ReadCommand__ParamListAssignment_2)
	{ after(grammarAccess.getReadCommandAccess().getParamListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getReadCommandAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WriteCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__0__Impl
	rule__WriteCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getWriteCommandAssignment_0()); }
	(rule__WriteCommand__WriteCommandAssignment_0)
	{ after(grammarAccess.getWriteCommandAccess().getWriteCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__1__Impl
	rule__WriteCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getWriteCommandAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__2__Impl
	rule__WriteCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getWriteParamAssignment_2()); }
	(rule__WriteCommand__WriteParamAssignment_2)
	{ after(grammarAccess.getWriteCommandAccess().getWriteParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getWriteCommandAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WriteParam__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteParam__Group__0__Impl
	rule__WriteParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteParamAccess().getParamsAssignment_0()); }
	(rule__WriteParam__ParamsAssignment_0)
	{ after(grammarAccess.getWriteParamAccess().getParamsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteParam__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteParamAccess().getPrecisionAssignment_1()); }
	(rule__WriteParam__PrecisionAssignment_1)?
	{ after(grammarAccess.getWriteParamAccess().getPrecisionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptDecimalPrecision__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group__0__Impl
	rule__OptDecimalPrecision__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_0()); }
	Colon
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group__1__Impl
	rule__OptDecimalPrecision__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionAssignment_1()); }
	(rule__OptDecimalPrecision__FirstPrecisionAssignment_1)
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getGroup_2()); }
	(rule__OptDecimalPrecision__Group_2__0)?
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptDecimalPrecision__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group_2__0__Impl
	rule__OptDecimalPrecision__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_2_0()); }
	Colon
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionAssignment_2_1()); }
	(rule__OptDecimalPrecision__SecondPrecisionAssignment_2_1)
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_0()); }
	ruleOrExpression
	{ after(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getGroup_1()); }
	(rule__Assignment__Group_1__0)*
	{ after(grammarAccess.getAssignmentAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1__0__Impl
	rule__Assignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getGroup_1_0()); }
	(rule__Assignment__Group_1_0__0)
	{ after(grammarAccess.getAssignmentAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getRightAssignment_1_1()); }
	(rule__Assignment__RightAssignment_1_1)
	{ after(grammarAccess.getAssignmentAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getGroup_1_0_0()); }
	(rule__Assignment__Group_1_0_0__0)
	{ after(grammarAccess.getAssignmentAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_0_0__0__Impl
	rule__Assignment__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAssignmentAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getOpAssignment_1_0_0_1()); }
	(rule__Assignment__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getAssignmentAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
	{ after(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
	(rule__OrExpression__Group_1_0__0)
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
	(rule__OrExpression__RightAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
	(rule__OrExpression__Group_1_0_0__0)
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0_0__0__Impl
	rule__OrExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__OrExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
	(rule__XorExpression__Group_1__0)*
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1_0()); }
	(rule__XorExpression__Group_1_0__0)
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_1()); }
	(rule__XorExpression__RightAssignment_1_1)
	{ after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1_0_0()); }
	(rule__XorExpression__Group_1_0_0__0)
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1_0_0__0__Impl
	rule__XorExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getXorExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__XorExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getXorExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
	(rule__AndExpression__Group_1_0__0)
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
	(rule__AndExpression__RightAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
	(rule__AndExpression__Group_1_0_0__0)
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0_0__0__Impl
	rule__AndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__AndExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getEquExpressionParserRuleCall_0()); }
	ruleEquExpression
	{ after(grammarAccess.getComparisonAccess().getEquExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1_0()); }
	(rule__Comparison__Group_1_0__0)
	{ after(grammarAccess.getComparisonAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
	(rule__Comparison__RightAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
	(rule__Comparison__Group_1_0_0__0)
	{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_0_0_1()); }
	(rule__Comparison__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__0__Impl
	rule__EquExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0()); }
	ruleAddExpression
	{ after(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1()); }
	(rule__EquExpression__Group_1__0)*
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__0__Impl
	rule__EquExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1_0()); }
	(rule__EquExpression__Group_1_0__0)
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getRightAssignment_1_1()); }
	(rule__EquExpression__RightAssignment_1_1)
	{ after(grammarAccess.getEquExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1_0_0()); }
	(rule__EquExpression__Group_1_0_0__0)
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1_0_0__0__Impl
	rule__EquExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getEquExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__EquExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getEquExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAddExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
	(rule__AddExpression__Group_1__0)*
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0()); }
	(rule__AddExpression__Group_1_0__0)
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
	(rule__AddExpression__RightAssignment_1_1)
	{ after(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
	(rule__AddExpression__Group_1_0_0__0)
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1_0_0__0__Impl
	rule__AddExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAddExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__AddExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getAddExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0()); }
	rulePowerExpression
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
	(rule__MultiplicativeExpression__Group_1_0__0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
	(rule__MultiplicativeExpression__RightAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
	(rule__MultiplicativeExpression__Group_1_0_0__0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1_0_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__MultiplicativeExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group__0__Impl
	rule__PowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
	{ after(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
	(rule__PowerExpression__Group_1__0)*
	{ after(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1__0__Impl
	rule__PowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getGroup_1_0()); }
	(rule__PowerExpression__Group_1_0__0)
	{ after(grammarAccess.getPowerExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getRightAssignment_1_1()); }
	(rule__PowerExpression__RightAssignment_1_1)
	{ after(grammarAccess.getPowerExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getGroup_1_0_0()); }
	(rule__PowerExpression__Group_1_0_0__0)
	{ after(grammarAccess.getPowerExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1_0_0__0__Impl
	rule__PowerExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getPowerExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__PowerExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getPowerExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__1__Impl
	rule__UnaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
	(rule__UnaryExpression__OpAssignment_0_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
	(rule__UnaryExpression__OperandAssignment_0_2)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_4__0__Impl
	rule__PrimaryExpression__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0()); }
	LeftParenthesis
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_4__1__Impl
	rule__PrimaryExpression__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_4_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2()); }
	RightParenthesis
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PreDefinedFunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreDefinedFunctionCall__Group__0__Impl
	rule__PreDefinedFunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreDefinedFunctionCallAccess().getPreDefFunctionNameAssignment_0()); }
	(rule__PreDefinedFunctionCall__PreDefFunctionNameAssignment_0)
	{ after(grammarAccess.getPreDefinedFunctionCallAccess().getPreDefFunctionNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreDefinedFunctionCall__Group__1__Impl
	rule__PreDefinedFunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreDefinedFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getPreDefinedFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreDefinedFunctionCall__Group__2__Impl
	rule__PreDefinedFunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreDefinedFunctionCallAccess().getParamAssignment_2()); }
	(rule__PreDefinedFunctionCall__ParamAssignment_2)
	{ after(grammarAccess.getPreDefinedFunctionCallAccess().getParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PreDefinedFunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPreDefinedFunctionCallAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getPreDefinedFunctionCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFbNameAssignment_0()); }
	(rule__FunctionCall__FbNameAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getFbNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	LeftParenthesis
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParamAssignment_2()); }
	(rule__FunctionCall__ParamAssignment_2)
	{ after(grammarAccess.getFunctionCallAccess().getParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
	RightParenthesis
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Literal__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_0__0__Impl
	rule__Literal__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getLiteralAction_0_0()); }
	()
	{ after(grammarAccess.getLiteralAccess().getLiteralAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Literal__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLiteralAccess().getPiLiteralParserRuleCall_0_1()); }
	rulePiLiteral
	{ after(grammarAccess.getLiteralAccess().getPiLiteralParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__HeaderAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getHeaderHeaderBlockParserRuleCall_0_0()); }
		ruleHeaderBlock
		{ after(grammarAccess.getModelAccess().getHeaderHeaderBlockParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__GlobalDeclarationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGlobalDeclarationsDeclarationsBlockParserRuleCall_1_0()); }
		ruleDeclarationsBlock
		{ after(grammarAccess.getModelAccess().getGlobalDeclarationsDeclarationsBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SubprogramsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSubprogramsSubprogramsParserRuleCall_2_0()); }
		ruleSubprograms
		{ after(grammarAccess.getModelAccess().getSubprogramsSubprogramsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCommandsBlockCommandParserRuleCall_3_0()); }
		ruleBlockCommand
		{ after(grammarAccess.getModelAccess().getCommandsBlockCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__AlgorithmNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderBlockAccess().getAlgorithmNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getHeaderBlockAccess().getAlgorithmNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__VarsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getVarsVariableParserRuleCall_1_0_0()); }
		ruleVariable
		{ after(grammarAccess.getDeclarationsBlockAccess().getVarsVariableParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__VarDeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getVarDeclarationVarDeclarationParserRuleCall_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getVariableAccess().getVarDeclarationVarDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_2_0()); }
		ruleVarType
		{ after(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_0_0()); }
		ruleVarName
		{ after(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_1_1_0()); }
		ruleVarName
		{ after(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredVarListAccess().getVarsVarNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getDeclaredVarListAccess().getVarsVarNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDeclaredVarListAccess().getVarsVarNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getDeclaredVarListAccess().getVarsVarNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVarList__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredVarListAccess().getVarsVarNameCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getDeclaredVarListAccess().getVarsVarNameIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDeclaredVarListAccess().getVarsVarNameIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getDeclaredVarListAccess().getVarsVarNameCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVarNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__TypeNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameAlternatives_0()); }
		(rule__VarType__TypeNameAlternatives_0)
		{ after(grammarAccess.getVarTypeAccess().getTypeNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprograms__BlockSubProgramsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubprogramsAccess().getBlockSubProgramsBlockSubProgramsParserRuleCall_0()); }
		ruleBlockSubPrograms
		{ after(grammarAccess.getSubprogramsAccess().getBlockSubProgramsBlockSubProgramsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__FunctionNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getFunctionNameFunctionNameParserRuleCall_1_0()); }
		ruleFunctionName
		{ after(grammarAccess.getBlockFunctionAccess().getFunctionNameFunctionNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__ParamListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getParamListVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getBlockFunctionAccess().getParamListVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__ReturnTypeAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getReturnTypeVarTypeParserRuleCall_6_0()); }
		ruleVarType
		{ after(grammarAccess.getBlockFunctionAccess().getReturnTypeVarTypeParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__DeclarationsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getDeclarationsDeclarationsBlockParserRuleCall_7_0()); }
		ruleDeclarationsBlock
		{ after(grammarAccess.getBlockFunctionAccess().getDeclarationsDeclarationsBlockParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__CommandsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getCommandsAbstractCommandParserRuleCall_9_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getBlockFunctionAccess().getCommandsAbstractCommandParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__ProcedureNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getProcedureNameProcedureNameParserRuleCall_1_0()); }
		ruleProcedureName
		{ after(grammarAccess.getBlockProcedureAccess().getProcedureNameProcedureNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__ParamListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getParamListVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getBlockProcedureAccess().getParamListVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__DeclarationsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getDeclarationsDeclarationsBlockParserRuleCall_5_0()); }
		ruleDeclarationsBlock
		{ after(grammarAccess.getBlockProcedureAccess().getDeclarationsDeclarationsBlockParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__CommandsAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getCommandsAbstractCommandParserRuleCall_7_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getBlockProcedureAccess().getCommandsAbstractCommandParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockCommandAccess().getCommandsAbstractCommandParserRuleCall_1_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getBlockCommandAccess().getCommandsAbstractCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReturnStatement__ExprAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReturnStatementAccess().getExprExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getReturnStatementAccess().getExprExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getIfStatementAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getCommandsAbstractCommandParserRuleCall_3_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getIfStatementAccess().getCommandsAbstractCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IfStatement__ElseCommandsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfStatementAccess().getElseCommandsAbstractCommandParserRuleCall_4_1_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getIfStatementAccess().getElseCommandsAbstractCommandParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__VariableAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchCaseStatementAccess().getVariableVarNameCrossReference_1_0()); }
		(
			{ before(grammarAccess.getSwitchCaseStatementAccess().getVariableVarNameIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getSwitchCaseStatementAccess().getVariableVarNameIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getSwitchCaseStatementAccess().getVariableVarNameCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__CaseListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchCaseStatementAccess().getCaseListCaseListParserRuleCall_2_0()); }
		ruleCaseList
		{ after(grammarAccess.getSwitchCaseStatementAccess().getCaseListCaseListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchCaseStatement__OtherCaseAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSwitchCaseStatementAccess().getOtherCaseOtherCaseParserRuleCall_3_0()); }
		ruleOtherCase
		{ after(grammarAccess.getSwitchCaseStatementAccess().getOtherCaseOtherCaseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__ExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseListAccess().getExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCaseListAccess().getExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CaseList__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCaseListAccess().getCommandsAbstractCommandParserRuleCall_3_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getCaseListAccess().getCommandsAbstractCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OtherCase__OtherCaseCommandsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAbstractCommandParserRuleCall_2_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAbstractCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__OperatorExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getOperatorExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getForStatementAccess().getOperatorExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__StartExprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getStartExprExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getForStatementAccess().getStartExprExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__EndExprAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getEndExprExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getForStatementAccess().getEndExprExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__StepExpeAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getStepExpeExpressionParserRuleCall_6_1_0()); }
		ruleExpression
		{ after(grammarAccess.getForStatementAccess().getStepExpeExpressionParserRuleCall_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForStatement__CommandsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForStatementAccess().getCommandsAbstractCommandParserRuleCall_8_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getForStatementAccess().getCommandsAbstractCommandParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__WhileExprAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getWhileExprExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhileStatementAccess().getWhileExprExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhileStatement__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhileStatementAccess().getCommandsAbstractCommandParserRuleCall_3_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getWhileStatementAccess().getCommandsAbstractCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__CommandsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getCommandsAbstractCommandParserRuleCall_1_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getRepeatStatementAccess().getCommandsAbstractCommandParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RepeatStatement__UntilExprAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatStatementAccess().getUntilExprExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getRepeatStatementAccess().getUntilExprExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubprogramParamAccess().getExpressionExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getSubprogramParamAccess().getExpressionExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SubprogramParam__ExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubprogramParamAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSubprogramParamAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__ParamListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadCommandAccess().getParamListDeclaredVarListParserRuleCall_2_0()); }
		ruleDeclaredVarList
		{ after(grammarAccess.getReadCommandAccess().getParamListDeclaredVarListParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__WriteCommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteCommandAccess().getWriteCommandAlternatives_0_0()); }
		(rule__WriteCommand__WriteCommandAlternatives_0_0)
		{ after(grammarAccess.getWriteCommandAccess().getWriteCommandAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__WriteParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteCommandAccess().getWriteParamWriteParamParserRuleCall_2_0()); }
		ruleWriteParam
		{ after(grammarAccess.getWriteCommandAccess().getWriteParamWriteParamParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__ParamsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteParamAccess().getParamsSubprogramParamParserRuleCall_0_0()); }
		ruleSubprogramParam
		{ after(grammarAccess.getWriteParamAccess().getParamsSubprogramParamParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__PrecisionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteParamAccess().getPrecisionOptDecimalPrecisionParserRuleCall_1_0()); }
		ruleOptDecimalPrecision
		{ after(grammarAccess.getWriteParamAccess().getPrecisionOptDecimalPrecisionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__FirstPrecisionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__SecondPrecisionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_0_0_1_0()); }
			LessThanSignHyphenMinus
			{ after(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_0()); }
		ruleAssignment
		{ after(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
			OU
			{ after(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_1_0()); }
		ruleXorExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
			XOU
			{ after(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
		ruleAndExpression
		{ after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__AndExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getAndExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
		ruleComparison
		{ after(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__Comparison__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightEquExpressionParserRuleCall_1_1_0()); }
		ruleEquExpression
		{ after(grammarAccess.getComparisonAccess().getRightEquExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__EquExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getEquExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
		ruleAddExpression
		{ after(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__AddExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getAddExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAddExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__MultiplicativeExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightPowerExpressionParserRuleCall_1_1_0()); }
		rulePowerExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightPowerExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
			CircumflexAccent
			{ after(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpAlternatives_0_1_0()); }
		(rule__UnaryExpression__OpAlternatives_0_1_0)
		{ after(grammarAccess.getUnaryExpressionAccess().getOpAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__PreDefFunctionNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreDefinedFunctionCallAccess().getPreDefFunctionNamePredefineFunctionsParserRuleCall_0_0()); }
		rulePredefineFunctions
		{ after(grammarAccess.getPreDefinedFunctionCallAccess().getPreDefFunctionNamePredefineFunctionsParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PreDefinedFunctionCall__ParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPreDefinedFunctionCallAccess().getParamSubprogramParamParserRuleCall_2_0()); }
		ruleSubprogramParam
		{ after(grammarAccess.getPreDefinedFunctionCallAccess().getParamSubprogramParamParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FbNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParamSubprogramParamParserRuleCall_2_0()); }
		ruleSubprogramParam
		{ after(grammarAccess.getFunctionCallAccess().getParamSubprogramParamParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__VarNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredVarAccess().getVarNameVarNameCrossReference_0()); }
		(
			{ before(grammarAccess.getDeclaredVarAccess().getVarNameVarNameIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDeclaredVarAccess().getVarNameVarNameIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getDeclaredVarAccess().getVarNameVarNameCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__IntValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getIntValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumericLiteralAccess().getIntValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__FloatValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getFloatValueFLOATTerminalRuleCall_1_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getNumericLiteralAccess().getFloatValueFLOATTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__LiteralStringAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getLiteralStringSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringExpressionAccess().getLiteralStringSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}
