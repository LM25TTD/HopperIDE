/*
 * generated by Xtext 2.9.0
 */
grammar InternalPortugol;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package org.hopper.language.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.hopper.language.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.hopper.language.services.PortugolGrammarAccess;

}
@parser::members {
	private PortugolGrammarAccess grammarAccess;

	public void setGrammarAccess(PortugolGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHeaderBlock
entryRuleHeaderBlock
:
{ before(grammarAccess.getHeaderBlockRule()); }
	 ruleHeaderBlock
{ after(grammarAccess.getHeaderBlockRule()); } 
	 EOF 
;

// Rule HeaderBlock
ruleHeaderBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHeaderBlockAccess().getGroup()); }
		(rule__HeaderBlock__Group__0)
		{ after(grammarAccess.getHeaderBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclarationsBlock
entryRuleDeclarationsBlock
:
{ before(grammarAccess.getDeclarationsBlockRule()); }
	 ruleDeclarationsBlock
{ after(grammarAccess.getDeclarationsBlockRule()); } 
	 EOF 
;

// Rule DeclarationsBlock
ruleDeclarationsBlock 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getGroup()); }
		(rule__DeclarationsBlock__Group__0)
		{ after(grammarAccess.getDeclarationsBlockAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariable
entryRuleVariable
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableAccess().getGroup()); }
		(rule__Variable__Group__0)
		{ after(grammarAccess.getVariableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration
:
{ before(grammarAccess.getVarDeclarationRule()); }
	 ruleVarDeclaration
{ after(grammarAccess.getVarDeclarationRule()); } 
	 EOF 
;

// Rule VarDeclaration
ruleVarDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getGroup()); }
		(rule__VarDeclaration__Group__0)
		{ after(grammarAccess.getVarDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaredVar
entryRuleDeclaredVar
:
{ before(grammarAccess.getDeclaredVarRule()); }
	 ruleDeclaredVar
{ after(grammarAccess.getDeclaredVarRule()); } 
	 EOF 
;

// Rule DeclaredVar
ruleDeclaredVar 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclaredVarAccess().getGroup()); }
		(rule__DeclaredVar__Group__0)
		{ after(grammarAccess.getDeclaredVarAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarName
entryRuleVarName
:
{ before(grammarAccess.getVarNameRule()); }
	 ruleVarName
{ after(grammarAccess.getVarNameRule()); } 
	 EOF 
;

// Rule VarName
ruleVarName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarNameAccess().getNameAssignment()); }
		(rule__VarName__NameAssignment)
		{ after(grammarAccess.getVarNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVarType
entryRuleVarType
:
{ before(grammarAccess.getVarTypeRule()); }
	 ruleVarType
{ after(grammarAccess.getVarTypeRule()); } 
	 EOF 
;

// Rule VarType
ruleVarType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameAssignment()); }
		(rule__VarType__TypeNameAssignment)
		{ after(grammarAccess.getVarTypeAccess().getTypeNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSubprograms
entryRuleSubprograms
:
{ before(grammarAccess.getSubprogramsRule()); }
	 ruleSubprograms
{ after(grammarAccess.getSubprogramsRule()); } 
	 EOF 
;

// Rule Subprograms
ruleSubprograms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
			(rule__Subprograms__BlockSubProgramsAssignment)
			{ after(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
		)
		(
			{ before(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
			(rule__Subprograms__BlockSubProgramsAssignment)*
			{ after(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockSubPrograms
entryRuleBlockSubPrograms
:
{ before(grammarAccess.getBlockSubProgramsRule()); }
	 ruleBlockSubPrograms
{ after(grammarAccess.getBlockSubProgramsRule()); } 
	 EOF 
;

// Rule BlockSubPrograms
ruleBlockSubPrograms 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockSubProgramsAccess().getAlternatives()); }
		(rule__BlockSubPrograms__Alternatives)
		{ after(grammarAccess.getBlockSubProgramsAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionName
entryRuleFunctionName
:
{ before(grammarAccess.getFunctionNameRule()); }
	 ruleFunctionName
{ after(grammarAccess.getFunctionNameRule()); } 
	 EOF 
;

// Rule FunctionName
ruleFunctionName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
		(rule__FunctionName__NameAssignment)
		{ after(grammarAccess.getFunctionNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProcedureName
entryRuleProcedureName
:
{ before(grammarAccess.getProcedureNameRule()); }
	 ruleProcedureName
{ after(grammarAccess.getProcedureNameRule()); } 
	 EOF 
;

// Rule ProcedureName
ruleProcedureName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProcedureNameAccess().getNameAssignment()); }
		(rule__ProcedureName__NameAssignment)
		{ after(grammarAccess.getProcedureNameAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockFunction
entryRuleBlockFunction
:
{ before(grammarAccess.getBlockFunctionRule()); }
	 ruleBlockFunction
{ after(grammarAccess.getBlockFunctionRule()); } 
	 EOF 
;

// Rule BlockFunction
ruleBlockFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getGroup()); }
		(rule__BlockFunction__Group__0)
		{ after(grammarAccess.getBlockFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockProcedure
entryRuleBlockProcedure
:
{ before(grammarAccess.getBlockProcedureRule()); }
	 ruleBlockProcedure
{ after(grammarAccess.getBlockProcedureRule()); } 
	 EOF 
;

// Rule BlockProcedure
ruleBlockProcedure 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getGroup()); }
		(rule__BlockProcedure__Group__0)
		{ after(grammarAccess.getBlockProcedureAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBlockCommand
entryRuleBlockCommand
:
{ before(grammarAccess.getBlockCommandRule()); }
	 ruleBlockCommand
{ after(grammarAccess.getBlockCommandRule()); } 
	 EOF 
;

// Rule BlockCommand
ruleBlockCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBlockCommandAccess().getGroup()); }
		(rule__BlockCommand__Group__0)
		{ after(grammarAccess.getBlockCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractCommand
entryRuleAbstractCommand
:
{ before(grammarAccess.getAbstractCommandRule()); }
	 ruleAbstractCommand
{ after(grammarAccess.getAbstractCommandRule()); } 
	 EOF 
;

// Rule AbstractCommand
ruleAbstractCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractCommandAccess().getAlternatives()); }
		(rule__AbstractCommand__Alternatives)
		{ after(grammarAccess.getAbstractCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReadCommand
entryRuleReadCommand
:
{ before(grammarAccess.getReadCommandRule()); }
	 ruleReadCommand
{ after(grammarAccess.getReadCommandRule()); } 
	 EOF 
;

// Rule ReadCommand
ruleReadCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReadCommandAccess().getGroup()); }
		(rule__ReadCommand__Group__0)
		{ after(grammarAccess.getReadCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWriteCommand
entryRuleWriteCommand
:
{ before(grammarAccess.getWriteCommandRule()); }
	 ruleWriteCommand
{ after(grammarAccess.getWriteCommandRule()); } 
	 EOF 
;

// Rule WriteCommand
ruleWriteCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWriteCommandAccess().getGroup()); }
		(rule__WriteCommand__Group__0)
		{ after(grammarAccess.getWriteCommandAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWriteParam
entryRuleWriteParam
:
{ before(grammarAccess.getWriteParamRule()); }
	 ruleWriteParam
{ after(grammarAccess.getWriteParamRule()); } 
	 EOF 
;

// Rule WriteParam
ruleWriteParam 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWriteParamAccess().getGroup()); }
		(rule__WriteParam__Group__0)
		{ after(grammarAccess.getWriteParamAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOptDecimalPrecision
entryRuleOptDecimalPrecision
:
{ before(grammarAccess.getOptDecimalPrecisionRule()); }
	 ruleOptDecimalPrecision
{ after(grammarAccess.getOptDecimalPrecisionRule()); } 
	 EOF 
;

// Rule OptDecimalPrecision
ruleOptDecimalPrecision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptDecimalPrecisionAccess().getGroup()); }
		(rule__OptDecimalPrecision__Group__0)
		{ after(grammarAccess.getOptDecimalPrecisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
		ruleAssignment
		{ after(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getAlternatives()); }
		(rule__Assignment__Alternatives)
		{ after(grammarAccess.getAssignmentAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrExpression
entryRuleOrExpression
:
{ before(grammarAccess.getOrExpressionRule()); }
	 ruleOrExpression
{ after(grammarAccess.getOrExpressionRule()); } 
	 EOF 
;

// Rule OrExpression
ruleOrExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrExpressionAccess().getGroup()); }
		(rule__OrExpression__Group__0)
		{ after(grammarAccess.getOrExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleXorExpression
entryRuleXorExpression
:
{ before(grammarAccess.getXorExpressionRule()); }
	 ruleXorExpression
{ after(grammarAccess.getXorExpressionRule()); } 
	 EOF 
;

// Rule XorExpression
ruleXorExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getXorExpressionAccess().getGroup()); }
		(rule__XorExpression__Group__0)
		{ after(grammarAccess.getXorExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEquExpression
entryRuleEquExpression
:
{ before(grammarAccess.getEquExpressionRule()); }
	 ruleEquExpression
{ after(grammarAccess.getEquExpressionRule()); } 
	 EOF 
;

// Rule EquExpression
ruleEquExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEquExpressionAccess().getGroup()); }
		(rule__EquExpression__Group__0)
		{ after(grammarAccess.getEquExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddExpression
entryRuleAddExpression
:
{ before(grammarAccess.getAddExpressionRule()); }
	 ruleAddExpression
{ after(grammarAccess.getAddExpressionRule()); } 
	 EOF 
;

// Rule AddExpression
ruleAddExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddExpressionAccess().getGroup()); }
		(rule__AddExpression__Group__0)
		{ after(grammarAccess.getAddExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression
:
{ before(grammarAccess.getMultiplicativeExpressionRule()); }
	 ruleMultiplicativeExpression
{ after(grammarAccess.getMultiplicativeExpressionRule()); } 
	 EOF 
;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
		(rule__MultiplicativeExpression__Group__0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePowerExpression
entryRulePowerExpression
:
{ before(grammarAccess.getPowerExpressionRule()); }
	 rulePowerExpression
{ after(grammarAccess.getPowerExpressionRule()); } 
	 EOF 
;

// Rule PowerExpression
rulePowerExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getGroup()); }
		(rule__PowerExpression__Group__0)
		{ after(grammarAccess.getPowerExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression
:
{ before(grammarAccess.getUnaryExpressionRule()); }
	 ruleUnaryExpression
{ after(grammarAccess.getUnaryExpressionRule()); } 
	 EOF 
;

// Rule UnaryExpression
ruleUnaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
		(rule__UnaryExpression__Alternatives)
		{ after(grammarAccess.getUnaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMemberCall
entryRuleMemberCall
:
{ before(grammarAccess.getMemberCallRule()); }
	 ruleMemberCall
{ after(grammarAccess.getMemberCallRule()); } 
	 EOF 
;

// Rule MemberCall
ruleMemberCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMemberCallAccess().getGroup()); }
		(rule__MemberCall__Group__0)
		{ after(grammarAccess.getMemberCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
		(rule__FunctionCall__Group__0)
		{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral
:
{ before(grammarAccess.getNumericLiteralRule()); }
	 ruleNumericLiteral
{ after(grammarAccess.getNumericLiteralRule()); } 
	 EOF 
;

// Rule NumericLiteral
ruleNumericLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
		(rule__NumericLiteral__Alternatives)
		{ after(grammarAccess.getNumericLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringExpression
entryRuleStringExpression
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringExpressionAccess().getLiteralStringAssignment()); }
		(rule__StringExpression__LiteralStringAssignment)
		{ after(grammarAccess.getStringExpressionAccess().getLiteralStringAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__TypeNameAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameRealKeyword_0_0()); }
		'real'
		{ after(grammarAccess.getVarTypeAccess().getTypeNameRealKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameInteiroKeyword_0_1()); }
		'inteiro'
		{ after(grammarAccess.getVarTypeAccess().getTypeNameInteiroKeyword_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameCaractereKeyword_0_2()); }
		'caractere'
		{ after(grammarAccess.getVarTypeAccess().getTypeNameCaractereKeyword_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockSubPrograms__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockSubProgramsAccess().getBlockFunctionParserRuleCall_0()); }
		ruleBlockFunction
		{ after(grammarAccess.getBlockSubProgramsAccess().getBlockFunctionParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getBlockSubProgramsAccess().getBlockProcedureParserRuleCall_1()); }
		ruleBlockProcedure
		{ after(grammarAccess.getBlockSubProgramsAccess().getBlockProcedureParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_0()); }
		(rule__AbstractCommand__Group_0__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_1()); }
		(rule__AbstractCommand__Group_1__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getAbstractCommandAccess().getGroup_2()); }
		(rule__AbstractCommand__Group_2__0)
		{ after(grammarAccess.getAbstractCommandAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup_0()); }
		(rule__Assignment__Group_0__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup_1()); }
		(rule__Assignment__Group_1__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpAmpersandKeyword_1_0_0_1_0_0()); }
		'&'
		{ after(grammarAccess.getAndExpressionAccess().getOpAmpersandKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpEKeyword_1_0_0_1_0_1()); }
		'E'
		{ after(grammarAccess.getAndExpressionAccess().getOpEKeyword_1_0_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpEqualsSignKeyword_1_0_0_1_0_0()); }
		'='
		{ after(grammarAccess.getComparisonAccess().getOpEqualsSignKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getComparisonAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_0_1_0_1()); }
		'<>'
		{ after(grammarAccess.getComparisonAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpLessThanSignKeyword_1_0_0_1_0_0()); }
		'<'
		{ after(grammarAccess.getEquExpressionAccess().getOpLessThanSignKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1_0_1()); }
		'>'
		{ after(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignKeyword_1_0_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_1_0_2()); }
		'<='
		{ after(grammarAccess.getEquExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_1_0_3()); }
		'>='
		{ after(grammarAccess.getEquExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_0_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getOpPlusSignKeyword_1_0_0_1_0_0()); }
		'+'
		{ after(grammarAccess.getAddExpressionAccess().getOpPlusSignKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAddExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1()); }
		'-'
		{ after(grammarAccess.getAddExpressionAccess().getOpHyphenMinusKeyword_1_0_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAlternatives_1_0_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAsteriskKeyword_1_0_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpSolidusKeyword_1_0_0_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpMODKeyword_1_0_0_1_0_2()); }
		'MOD'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpMODKeyword_1_0_0_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_1_0_3()); }
		'%'
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpPercentSignKeyword_1_0_0_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
		(rule__UnaryExpression__Group_0__0)
		{ after(grammarAccess.getUnaryExpressionAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getMemberCallParserRuleCall_1()); }
		ruleMemberCall
		{ after(grammarAccess.getUnaryExpressionAccess().getMemberCallParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAlternatives_0_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpNOTKeyword_0_1_0_0()); }
		'NOT'
		{ after(grammarAccess.getUnaryExpressionAccess().getOpNOTKeyword_0_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_1_0_1()); }
		'-'
		{ after(grammarAccess.getUnaryExpressionAccess().getOpHyphenMinusKeyword_0_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_1()); }
		ruleFunctionCall
		{ after(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
		(rule__PrimaryExpression__Group_2__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); }
		ruleNumericLiteral
		{ after(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getStringExpressionParserRuleCall_1()); }
		ruleStringExpression
		{ after(grammarAccess.getLiteralAccess().getStringExpressionParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getIntValueAssignment_0()); }
		(rule__NumericLiteral__IntValueAssignment_0)
		{ after(grammarAccess.getNumericLiteralAccess().getIntValueAssignment_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumericLiteralAccess().getFloatValueAssignment_1()); }
		(rule__NumericLiteral__FloatValueAssignment_1)
		{ after(grammarAccess.getNumericLiteralAccess().getFloatValueAssignment_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getHeaderAssignment_0()); }
	(rule__Model__HeaderAssignment_0)
	{ after(grammarAccess.getModelAccess().getHeaderAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getGlobalDeclarationsAssignment_1()); }
	(rule__Model__GlobalDeclarationsAssignment_1)
	{ after(grammarAccess.getModelAccess().getGlobalDeclarationsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getSubprogramsAssignment_2()); }
	(rule__Model__SubprogramsAssignment_2)?
	{ after(grammarAccess.getModelAccess().getSubprogramsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getCommandsAssignment_3()); }
	(rule__Model__CommandsAssignment_3)
	{ after(grammarAccess.getModelAccess().getCommandsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HeaderBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderBlock__Group__0__Impl
	rule__HeaderBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderBlockAccess().getAlgoritmoKeyword_0()); }
	'algoritmo'
	{ after(grammarAccess.getHeaderBlockAccess().getAlgoritmoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderBlock__Group__1__Impl
	rule__HeaderBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderBlockAccess().getNameAssignment_1()); }
	(rule__HeaderBlock__NameAssignment_1)
	{ after(grammarAccess.getHeaderBlockAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HeaderBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHeaderBlockAccess().getEND_COMMANDTerminalRuleCall_2()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getHeaderBlockAccess().getEND_COMMANDTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationsBlock__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group__0__Impl
	rule__DeclarationsBlock__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationsBlockAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getDeclarationsBlockAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group__1__Impl
	rule__DeclarationsBlock__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDTerminalRuleCall_1()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getGroup_2()); }
		(rule__DeclarationsBlock__Group_2__0)
		{ after(grammarAccess.getDeclarationsBlockAccess().getGroup_2()); }
	)
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getGroup_2()); }
		(rule__DeclarationsBlock__Group_2__0)*
		{ after(grammarAccess.getDeclarationsBlockAccess().getGroup_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclarationsBlock__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group_2__0__Impl
	rule__DeclarationsBlock__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationsBlockAccess().getVarsAssignment_2_0()); }
	(rule__DeclarationsBlock__VarsAssignment_2_0)
	{ after(grammarAccess.getDeclarationsBlockAccess().getVarsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclarationsBlock__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDTerminalRuleCall_2_1()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getVarDeclarationAssignment_0()); }
	(rule__Variable__VarDeclarationAssignment_0)
	{ after(grammarAccess.getVariableAccess().getVarDeclarationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__1__Impl
	rule__Variable__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getColonKeyword_1()); }
	':'
	{ after(grammarAccess.getVariableAccess().getColonKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Variable__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableAccess().getTypeAssignment_2()); }
	(rule__Variable__TypeAssignment_2)
	{ after(grammarAccess.getVariableAccess().getTypeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__0__Impl
	rule__VarDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVarsAssignment_0()); }
	(rule__VarDeclaration__VarsAssignment_0)
	{ after(grammarAccess.getVarDeclarationAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getGroup_1()); }
	(rule__VarDeclaration__Group_1__0)*
	{ after(grammarAccess.getVarDeclarationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VarDeclaration__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_1__0__Impl
	rule__VarDeclaration__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVarDeclarationAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VarDeclaration__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarDeclarationAccess().getVarsAssignment_1_1()); }
	(rule__VarDeclaration__VarsAssignment_1_1)
	{ after(grammarAccess.getVarDeclarationAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredVar__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVar__Group__0__Impl
	rule__DeclaredVar__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarAccess().getVarsAssignment_0()); }
	(rule__DeclaredVar__VarsAssignment_0)
	{ after(grammarAccess.getDeclaredVarAccess().getVarsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVar__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarAccess().getGroup_1()); }
	(rule__DeclaredVar__Group_1__0)*
	{ after(grammarAccess.getDeclaredVarAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DeclaredVar__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVar__Group_1__0__Impl
	rule__DeclaredVar__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getDeclaredVarAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DeclaredVar__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclaredVarAccess().getVarsAssignment_1_1()); }
	(rule__DeclaredVar__VarsAssignment_1_1)
	{ after(grammarAccess.getDeclaredVarAccess().getVarsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockFunction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__0__Impl
	rule__BlockFunction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getFuncaoKeyword_0()); }
	'funcao'
	{ after(grammarAccess.getBlockFunctionAccess().getFuncaoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__1__Impl
	rule__BlockFunction__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getFunctionNameAssignment_1()); }
	(rule__BlockFunction__FunctionNameAssignment_1)
	{ after(grammarAccess.getBlockFunctionAccess().getFunctionNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__2__Impl
	rule__BlockFunction__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getBlockFunctionAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__3__Impl
	rule__BlockFunction__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getParamListAssignment_3()); }
	(rule__BlockFunction__ParamListAssignment_3)
	{ after(grammarAccess.getBlockFunctionAccess().getParamListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__4__Impl
	rule__BlockFunction__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBlockFunctionAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__5__Impl
	rule__BlockFunction__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getColonKeyword_5()); }
	':'
	{ after(grammarAccess.getBlockFunctionAccess().getColonKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__6__Impl
	rule__BlockFunction__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getReturnTypeAssignment_6()); }
	(rule__BlockFunction__ReturnTypeAssignment_6)
	{ after(grammarAccess.getBlockFunctionAccess().getReturnTypeAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__7__Impl
	rule__BlockFunction__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_7()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__8__Impl
	rule__BlockFunction__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getDeclarationsAssignment_8()); }
	(rule__BlockFunction__DeclarationsAssignment_8)?
	{ after(grammarAccess.getBlockFunctionAccess().getDeclarationsAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__9__Impl
	rule__BlockFunction__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getInicioKeyword_9()); }
	'inicio'
	{ after(grammarAccess.getBlockFunctionAccess().getInicioKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__10__Impl
	rule__BlockFunction__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_10()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__11__Impl
	rule__BlockFunction__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_11()); }
		(rule__BlockFunction__CommandsAssignment_11)
		{ after(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_11()); }
	)
	(
		{ before(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_11()); }
		(rule__BlockFunction__CommandsAssignment_11)*
		{ after(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_11()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__12__Impl
	rule__BlockFunction__Group__13
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getFimfuncaoKeyword_12()); }
	'fimfuncao'
	{ after(grammarAccess.getBlockFunctionAccess().getFimfuncaoKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__13
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockFunction__Group__13__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__Group__13__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_13()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_13()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockProcedure__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__0__Impl
	rule__BlockProcedure__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getProcedimentoKeyword_0()); }
	'procedimento'
	{ after(grammarAccess.getBlockProcedureAccess().getProcedimentoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__1__Impl
	rule__BlockProcedure__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getProcedureAssignment_1()); }
	(rule__BlockProcedure__ProcedureAssignment_1)
	{ after(grammarAccess.getBlockProcedureAccess().getProcedureAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__2__Impl
	rule__BlockProcedure__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getBlockProcedureAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__3__Impl
	rule__BlockProcedure__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getParamListAssignment_3()); }
	(rule__BlockProcedure__ParamListAssignment_3)
	{ after(grammarAccess.getBlockProcedureAccess().getParamListAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__4__Impl
	rule__BlockProcedure__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getBlockProcedureAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__5__Impl
	rule__BlockProcedure__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_5()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__6__Impl
	rule__BlockProcedure__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getDeclarationsAssignment_6()); }
	(rule__BlockProcedure__DeclarationsAssignment_6)?
	{ after(grammarAccess.getBlockProcedureAccess().getDeclarationsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__7__Impl
	rule__BlockProcedure__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getInicioKeyword_7()); }
	'inicio'
	{ after(grammarAccess.getBlockProcedureAccess().getInicioKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__8__Impl
	rule__BlockProcedure__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_8()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__9__Impl
	rule__BlockProcedure__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_9()); }
		(rule__BlockProcedure__CommandsAssignment_9)
		{ after(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_9()); }
	)
	(
		{ before(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_9()); }
		(rule__BlockProcedure__CommandsAssignment_9)*
		{ after(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_9()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__10__Impl
	rule__BlockProcedure__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getFimprocedimentoKeyword_10()); }
	'fimprocedimento'
	{ after(grammarAccess.getBlockProcedureAccess().getFimprocedimentoKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockProcedure__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_11()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BlockCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__0__Impl
	rule__BlockCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockCommandAccess().getInicioKeyword_0()); }
	'inicio'
	{ after(grammarAccess.getBlockCommandAccess().getInicioKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__1__Impl
	rule__BlockCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockCommandAccess().getEND_COMMANDTerminalRuleCall_1()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockCommandAccess().getEND_COMMANDTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__2__Impl
	rule__BlockCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getBlockCommandAccess().getCommandsAssignment_2()); }
		(rule__BlockCommand__CommandsAssignment_2)
		{ after(grammarAccess.getBlockCommandAccess().getCommandsAssignment_2()); }
	)
	(
		{ before(grammarAccess.getBlockCommandAccess().getCommandsAssignment_2()); }
		(rule__BlockCommand__CommandsAssignment_2)*
		{ after(grammarAccess.getBlockCommandAccess().getCommandsAssignment_2()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__3__Impl
	rule__BlockCommand__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockCommandAccess().getFimalgoritmoKeyword_3()); }
	'fimalgoritmo'
	{ after(grammarAccess.getBlockCommandAccess().getFimalgoritmoKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BlockCommand__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBlockCommandAccess().getEND_COMMANDTerminalRuleCall_4()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getBlockCommandAccess().getEND_COMMANDTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_0__0__Impl
	rule__AbstractCommand__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getReadCommandParserRuleCall_0_0()); }
	ruleReadCommand
	{ after(grammarAccess.getAbstractCommandAccess().getReadCommandParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDTerminalRuleCall_0_1()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDTerminalRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_1__0__Impl
	rule__AbstractCommand__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getWriteCommandParserRuleCall_1_0()); }
	ruleWriteCommand
	{ after(grammarAccess.getAbstractCommandAccess().getWriteCommandParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDTerminalRuleCall_1_1()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AbstractCommand__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_2__0__Impl
	rule__AbstractCommand__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getExpressionParserRuleCall_2_0()); }
	ruleExpression
	{ after(grammarAccess.getAbstractCommandAccess().getExpressionParserRuleCall_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractCommand__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractCommand__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractCommandAccess().getEND_COMMANDTerminalRuleCall_2_1()); }
	RULE_END_COMMAND
	{ after(grammarAccess.getAbstractCommandAccess().getEND_COMMANDTerminalRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ReadCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__0__Impl
	rule__ReadCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getLeiaKeyword_0()); }
	'leia'
	{ after(grammarAccess.getReadCommandAccess().getLeiaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__1__Impl
	rule__ReadCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getReadCommandAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__2__Impl
	rule__ReadCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getParamListAssignment_2()); }
	(rule__ReadCommand__ParamListAssignment_2)
	{ after(grammarAccess.getReadCommandAccess().getParamListAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ReadCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReadCommandAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getReadCommandAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WriteCommand__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__0__Impl
	rule__WriteCommand__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getEscrevaKeyword_0()); }
	'escreva'
	{ after(grammarAccess.getWriteCommandAccess().getEscrevaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__1__Impl
	rule__WriteCommand__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getWriteCommandAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__2__Impl
	rule__WriteCommand__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getWriteParamAssignment_2()); }
	(rule__WriteCommand__WriteParamAssignment_2)
	{ after(grammarAccess.getWriteCommandAccess().getWriteParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteCommand__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteCommandAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getWriteCommandAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WriteParam__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteParam__Group__0__Impl
	rule__WriteParam__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteParamAccess().getExpressionAssignment_0()); }
	(rule__WriteParam__ExpressionAssignment_0)
	{ after(grammarAccess.getWriteParamAccess().getExpressionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteParam__Group__1__Impl
	rule__WriteParam__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteParamAccess().getGroup_1()); }
	(rule__WriteParam__Group_1__0)*
	{ after(grammarAccess.getWriteParamAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteParam__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteParamAccess().getPrecisionAssignment_2()); }
	(rule__WriteParam__PrecisionAssignment_2)?
	{ after(grammarAccess.getWriteParamAccess().getPrecisionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WriteParam__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteParam__Group_1__0__Impl
	rule__WriteParam__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteParamAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getWriteParamAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WriteParam__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWriteParamAccess().getExpressionAssignment_1_1()); }
	(rule__WriteParam__ExpressionAssignment_1_1)
	{ after(grammarAccess.getWriteParamAccess().getExpressionAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptDecimalPrecision__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group__0__Impl
	rule__OptDecimalPrecision__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_0()); }
	':'
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group__1__Impl
	rule__OptDecimalPrecision__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionAssignment_1()); }
	(rule__OptDecimalPrecision__FirstPrecisionAssignment_1)
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getGroup_2()); }
	(rule__OptDecimalPrecision__Group_2__0)?
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OptDecimalPrecision__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group_2__0__Impl
	rule__OptDecimalPrecision__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_2_0()); }
	':'
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OptDecimalPrecision__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionAssignment_2_1()); }
	(rule__OptDecimalPrecision__SecondPrecisionAssignment_2_1)
	{ after(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionAssignment_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_0__0__Impl
	rule__Assignment__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getAssignmentAction_0_0()); }
	()
	{ after(grammarAccess.getAssignmentAccess().getAssignmentAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_0__1__Impl
	rule__Assignment__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getTargetAssignment_0_1()); }
	(rule__Assignment__TargetAssignment_0_1)
	{ after(grammarAccess.getAssignmentAccess().getTargetAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_0__2__Impl
	rule__Assignment__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getLessThanSignHyphenMinusKeyword_0_2()); }
	'<-'
	{ after(grammarAccess.getAssignmentAccess().getLessThanSignHyphenMinusKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_0__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_0_3()); }
	(rule__Assignment__ValueAssignment_0_3)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1__0__Impl
	rule__Assignment__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_1_0()); }
	ruleOrExpression
	{ after(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getGroup_1_1()); }
	(rule__Assignment__Group_1_1__0)?
	{ after(grammarAccess.getAssignmentAccess().getGroup_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_1__0__Impl
	rule__Assignment__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getGroup_1_1_0()); }
	(rule__Assignment__Group_1_1_0__0)
	{ after(grammarAccess.getAssignmentAccess().getGroup_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getRightAssignment_1_1_1()); }
	(rule__Assignment__RightAssignment_1_1_1)
	{ after(grammarAccess.getAssignmentAccess().getRightAssignment_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getGroup_1_1_0_0()); }
	(rule__Assignment__Group_1_1_0_0__0)
	{ after(grammarAccess.getAssignmentAccess().getGroup_1_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group_1_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_1_0_0__0__Impl
	rule__Assignment__Group_1_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getBinaryOperationLeftAction_1_1_0_0_0()); }
	()
	{ after(grammarAccess.getAssignmentAccess().getBinaryOperationLeftAction_1_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group_1_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group_1_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getOpAssignment_1_1_0_0_1()); }
	(rule__Assignment__OpAssignment_1_1_0_0_1)
	{ after(grammarAccess.getAssignmentAccess().getOpAssignment_1_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__0__Impl
	rule__OrExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
	ruleXorExpression
	{ after(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1()); }
	(rule__OrExpression__Group_1__0)*
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__0__Impl
	rule__OrExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
	(rule__OrExpression__Group_1_0__0)
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
	(rule__OrExpression__RightAssignment_1_1)
	{ after(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
	(rule__OrExpression__Group_1_0_0__0)
	{ after(grammarAccess.getOrExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0_0__0__Impl
	rule__OrExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__OrExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__0__Impl
	rule__XorExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1()); }
	(rule__XorExpression__Group_1__0)*
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__0__Impl
	rule__XorExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1_0()); }
	(rule__XorExpression__Group_1_0__0)
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getRightAssignment_1_1()); }
	(rule__XorExpression__RightAssignment_1_1)
	{ after(grammarAccess.getXorExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getGroup_1_0_0()); }
	(rule__XorExpression__Group_1_0_0__0)
	{ after(grammarAccess.getXorExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__XorExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1_0_0__0__Impl
	rule__XorExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getXorExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__XorExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getXorExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__XorExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getXorExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
	(rule__AndExpression__Group_1_0__0)
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
	(rule__AndExpression__RightAssignment_1_1)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
	(rule__AndExpression__Group_1_0_0__0)
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0_0__0__Impl
	rule__AndExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__AndExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getEquExpressionParserRuleCall_0()); }
	ruleEquExpression
	{ after(grammarAccess.getComparisonAccess().getEquExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
	(rule__Comparison__Group_1__0)*
	{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1_0()); }
	(rule__Comparison__Group_1_0__0)
	{ after(grammarAccess.getComparisonAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
	(rule__Comparison__RightAssignment_1_1)
	{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
	(rule__Comparison__Group_1_0_0__0)
	{ after(grammarAccess.getComparisonAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__0__Impl
	rule__Comparison__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getComparisonAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_0_0_1()); }
	(rule__Comparison__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__0__Impl
	rule__EquExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0()); }
	ruleAddExpression
	{ after(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1()); }
	(rule__EquExpression__Group_1__0)*
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__0__Impl
	rule__EquExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1_0()); }
	(rule__EquExpression__Group_1_0__0)
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getRightAssignment_1_1()); }
	(rule__EquExpression__RightAssignment_1_1)
	{ after(grammarAccess.getEquExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getGroup_1_0_0()); }
	(rule__EquExpression__Group_1_0_0__0)
	{ after(grammarAccess.getEquExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EquExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1_0_0__0__Impl
	rule__EquExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getEquExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EquExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEquExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__EquExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getEquExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__0__Impl
	rule__AddExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
	ruleMultiplicativeExpression
	{ after(grammarAccess.getAddExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1()); }
	(rule__AddExpression__Group_1__0)*
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__0__Impl
	rule__AddExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0()); }
	(rule__AddExpression__Group_1_0__0)
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
	(rule__AddExpression__RightAssignment_1_1)
	{ after(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
	(rule__AddExpression__Group_1_0_0__0)
	{ after(grammarAccess.getAddExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1_0_0__0__Impl
	rule__AddExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getAddExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__AddExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getAddExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__0__Impl
	rule__MultiplicativeExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0()); }
	rulePowerExpression
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
	(rule__MultiplicativeExpression__Group_1__0)*
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__0__Impl
	rule__MultiplicativeExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
	(rule__MultiplicativeExpression__Group_1_0__0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
	(rule__MultiplicativeExpression__RightAssignment_1_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
	(rule__MultiplicativeExpression__Group_1_0_0__0)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplicativeExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1_0_0__0__Impl
	rule__MultiplicativeExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplicativeExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__MultiplicativeExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group__0__Impl
	rule__PowerExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
	ruleUnaryExpression
	{ after(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
	(rule__PowerExpression__Group_1__0)*
	{ after(grammarAccess.getPowerExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1__0__Impl
	rule__PowerExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getGroup_1_0()); }
	(rule__PowerExpression__Group_1_0__0)
	{ after(grammarAccess.getPowerExpressionAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getRightAssignment_1_1()); }
	(rule__PowerExpression__RightAssignment_1_1)
	{ after(grammarAccess.getPowerExpressionAccess().getRightAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getGroup_1_0_0()); }
	(rule__PowerExpression__Group_1_0_0__0)
	{ after(grammarAccess.getPowerExpressionAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PowerExpression__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1_0_0__0__Impl
	rule__PowerExpression__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getPowerExpressionAccess().getBinaryOperationLeftAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PowerExpression__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerExpressionAccess().getOpAssignment_1_0_0_1()); }
	(rule__PowerExpression__OpAssignment_1_0_0_1)
	{ after(grammarAccess.getPowerExpressionAccess().getOpAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__UnaryExpression__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__0__Impl
	rule__UnaryExpression__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0_0()); }
	()
	{ after(grammarAccess.getUnaryExpressionAccess().getUnaryExpressionAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__1__Impl
	rule__UnaryExpression__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
	(rule__UnaryExpression__OpAssignment_0_1)
	{ after(grammarAccess.getUnaryExpressionAccess().getOpAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__UnaryExpression__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
	(rule__UnaryExpression__OperandAssignment_0_2)
	{ after(grammarAccess.getUnaryExpressionAccess().getOperandAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group__0__Impl
	rule__MemberCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getMemberCallAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getGroup_1()); }
	(rule__MemberCall__Group_1__0)*
	{ after(grammarAccess.getMemberCallAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberCall__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group_1__0__Impl
	rule__MemberCall__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getGroup_1_0()); }
	(rule__MemberCall__Group_1_0__0)
	{ after(grammarAccess.getMemberCallAccess().getGroup_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getValueAssignment_1_1()); }
	(rule__MemberCall__ValueAssignment_1_1)
	{ after(grammarAccess.getMemberCallAccess().getValueAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberCall__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group_1_0__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getGroup_1_0_0()); }
	(rule__MemberCall__Group_1_0_0__0)
	{ after(grammarAccess.getMemberCallAccess().getGroup_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MemberCall__Group_1_0_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group_1_0_0__0__Impl
	rule__MemberCall__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1_0_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getAssignmentAssignableAction_1_0_0_0()); }
	()
	{ after(grammarAccess.getMemberCallAccess().getAssignmentAssignableAction_1_0_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1_0_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group_1_0_0__1__Impl
	rule__MemberCall__Group_1_0_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1_0_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getFeatureAssignment_1_0_0_1()); }
	(rule__MemberCall__FeatureAssignment_1_0_0_1)
	{ after(grammarAccess.getMemberCallAccess().getFeatureAssignment_1_0_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1_0_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MemberCall__Group_1_0_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__Group_1_0_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMemberCallAccess().getLessThanSignHyphenMinusKeyword_1_0_0_2()); }
	'<-'
	{ after(grammarAccess.getMemberCallAccess().getLessThanSignHyphenMinusKeyword_1_0_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__1__Impl
	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_2_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getFbNameAssignment_0()); }
	(rule__FunctionCall__FbNameAssignment_0)
	{ after(grammarAccess.getFunctionCallAccess().getFbNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getParamAssignment_2()); }
	(rule__FunctionCall__ParamAssignment_2)
	{ after(grammarAccess.getFunctionCallAccess().getParamAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__HeaderAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getHeaderHeaderBlockParserRuleCall_0_0()); }
		ruleHeaderBlock
		{ after(grammarAccess.getModelAccess().getHeaderHeaderBlockParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__GlobalDeclarationsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getGlobalDeclarationsDeclarationsBlockParserRuleCall_1_0()); }
		ruleDeclarationsBlock
		{ after(grammarAccess.getModelAccess().getGlobalDeclarationsDeclarationsBlockParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__SubprogramsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getSubprogramsSubprogramsParserRuleCall_2_0()); }
		ruleSubprograms
		{ after(grammarAccess.getModelAccess().getSubprogramsSubprogramsParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__CommandsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getCommandsBlockCommandParserRuleCall_3_0()); }
		ruleBlockCommand
		{ after(grammarAccess.getModelAccess().getCommandsBlockCommandParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HeaderBlock__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHeaderBlockAccess().getNameSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getHeaderBlockAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclarationsBlock__VarsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationsBlockAccess().getVarsVariableParserRuleCall_2_0_0()); }
		ruleVariable
		{ after(grammarAccess.getDeclarationsBlockAccess().getVarsVariableParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__VarDeclarationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getVarDeclarationVarDeclarationParserRuleCall_0_0()); }
		ruleVarDeclaration
		{ after(grammarAccess.getVariableAccess().getVarDeclarationVarDeclarationParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__TypeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_2_0()); }
		ruleVarType
		{ after(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_0_0()); }
		ruleVarName
		{ after(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarDeclaration__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_1_1_0()); }
		ruleVarName
		{ after(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__VarsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredVarAccess().getVarsVarNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getDeclaredVarAccess().getVarsVarNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDeclaredVarAccess().getVarsVarNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getDeclaredVarAccess().getVarsVarNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DeclaredVar__VarsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclaredVarAccess().getVarsVarNameCrossReference_1_1_0()); }
		(
			{ before(grammarAccess.getDeclaredVarAccess().getVarsVarNameIDTerminalRuleCall_1_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDeclaredVarAccess().getVarsVarNameIDTerminalRuleCall_1_1_0_1()); }
		)
		{ after(grammarAccess.getDeclaredVarAccess().getVarsVarNameCrossReference_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getVarNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VarType__TypeNameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVarTypeAccess().getTypeNameAlternatives_0()); }
		(rule__VarType__TypeNameAlternatives_0)
		{ after(grammarAccess.getVarTypeAccess().getTypeNameAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Subprograms__BlockSubProgramsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSubprogramsAccess().getBlockSubProgramsBlockSubProgramsParserRuleCall_0()); }
		ruleBlockSubPrograms
		{ after(grammarAccess.getSubprogramsAccess().getBlockSubProgramsBlockSubProgramsParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ProcedureName__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProcedureNameAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getProcedureNameAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__FunctionNameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getFunctionNameFunctionNameParserRuleCall_1_0()); }
		ruleFunctionName
		{ after(grammarAccess.getBlockFunctionAccess().getFunctionNameFunctionNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__ParamListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getParamListVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getBlockFunctionAccess().getParamListVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__ReturnTypeAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getReturnTypeVarTypeParserRuleCall_6_0()); }
		ruleVarType
		{ after(grammarAccess.getBlockFunctionAccess().getReturnTypeVarTypeParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__DeclarationsAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getDeclarationsDeclarationsBlockParserRuleCall_8_0()); }
		ruleDeclarationsBlock
		{ after(grammarAccess.getBlockFunctionAccess().getDeclarationsDeclarationsBlockParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockFunction__CommandsAssignment_11
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockFunctionAccess().getCommandsAbstractCommandParserRuleCall_11_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getBlockFunctionAccess().getCommandsAbstractCommandParserRuleCall_11_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__ProcedureAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getProcedureProcedureNameParserRuleCall_1_0()); }
		ruleProcedureName
		{ after(grammarAccess.getBlockProcedureAccess().getProcedureProcedureNameParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__ParamListAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getParamListVariableParserRuleCall_3_0()); }
		ruleVariable
		{ after(grammarAccess.getBlockProcedureAccess().getParamListVariableParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__DeclarationsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getDeclarationsDeclarationsBlockParserRuleCall_6_0()); }
		ruleDeclarationsBlock
		{ after(grammarAccess.getBlockProcedureAccess().getDeclarationsDeclarationsBlockParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockProcedure__CommandsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockProcedureAccess().getCommandsAbstractCommandParserRuleCall_9_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getBlockProcedureAccess().getCommandsAbstractCommandParserRuleCall_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BlockCommand__CommandsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBlockCommandAccess().getCommandsAbstractCommandParserRuleCall_2_0()); }
		ruleAbstractCommand
		{ after(grammarAccess.getBlockCommandAccess().getCommandsAbstractCommandParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ReadCommand__ParamListAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReadCommandAccess().getParamListDeclaredVarParserRuleCall_2_0()); }
		ruleDeclaredVar
		{ after(grammarAccess.getReadCommandAccess().getParamListDeclaredVarParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteCommand__WriteParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteCommandAccess().getWriteParamWriteParamParserRuleCall_2_0()); }
		ruleWriteParam
		{ after(grammarAccess.getWriteCommandAccess().getWriteParamWriteParamParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__ExpressionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteParamAccess().getExpressionExpressionParserRuleCall_0_0()); }
		ruleExpression
		{ after(grammarAccess.getWriteParamAccess().getExpressionExpressionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__ExpressionAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteParamAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWriteParamAccess().getExpressionExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WriteParam__PrecisionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWriteParamAccess().getPrecisionOptDecimalPrecisionParserRuleCall_2_0()); }
		ruleOptDecimalPrecision
		{ after(grammarAccess.getWriteParamAccess().getPrecisionOptDecimalPrecisionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__FirstPrecisionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OptDecimalPrecision__SecondPrecisionAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionINTTerminalRuleCall_2_1_0()); }
		RULE_INT
		{ after(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionINTTerminalRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__TargetAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getTargetVarNameCrossReference_0_1_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getTargetVarNameIDTerminalRuleCall_0_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getTargetVarNameIDTerminalRuleCall_0_1_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getTargetVarNameCrossReference_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueAssignmentParserRuleCall_0_3_0()); }
		ruleAssignment
		{ after(grammarAccess.getAssignmentAccess().getValueAssignmentParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__OpAssignment_1_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_1_0_0_1_0()); }
			'<-'
			{ after(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getOpLessThanSignHyphenMinusKeyword_1_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__RightAssignment_1_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_1_0()); }
		ruleAssignment
		{ after(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
			'OU'
			{ after(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getOrExpressionAccess().getOpOUKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_1_0()); }
		ruleXorExpression
		{ after(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
			'XOU'
			{ after(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getXorExpressionAccess().getOpXOUKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__XorExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
		ruleAndExpression
		{ after(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__AndExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getAndExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
		ruleComparison
		{ after(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__Comparison__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getRightEquExpressionParserRuleCall_1_1_0()); }
		ruleEquExpression
		{ after(grammarAccess.getComparisonAccess().getRightEquExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__EquExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getEquExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EquExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
		ruleAddExpression
		{ after(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__AddExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getAddExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
		ruleMultiplicativeExpression
		{ after(grammarAccess.getAddExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
		(rule__MultiplicativeExpression__OpAlternatives_1_0_0_1_0)
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getOpAlternatives_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplicativeExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicativeExpressionAccess().getRightPowerExpressionParserRuleCall_1_1_0()); }
		rulePowerExpression
		{ after(grammarAccess.getMultiplicativeExpressionAccess().getRightPowerExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__OpAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
			'^'
			{ after(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
		)
		{ after(grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PowerExpression__RightAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OpAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOpAlternatives_0_1_0()); }
		(rule__UnaryExpression__OpAlternatives_0_1_0)
		{ after(grammarAccess.getUnaryExpressionAccess().getOpAlternatives_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__UnaryExpression__OperandAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
		ruleUnaryExpression
		{ after(grammarAccess.getUnaryExpressionAccess().getOperandUnaryExpressionParserRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__FeatureAssignment_1_0_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberCallAccess().getFeatureVarNameCrossReference_1_0_0_1_0()); }
		(
			{ before(grammarAccess.getMemberCallAccess().getFeatureVarNameIDTerminalRuleCall_1_0_0_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMemberCallAccess().getFeatureVarNameIDTerminalRuleCall_1_0_0_1_0_1()); }
		)
		{ after(grammarAccess.getMemberCallAccess().getFeatureVarNameCrossReference_1_0_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MemberCall__ValueAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMemberCallAccess().getValueAssignmentParserRuleCall_1_1_0()); }
		ruleAssignment
		{ after(grammarAccess.getMemberCallAccess().getValueAssignmentParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FbNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameCrossReference_0_0()); }
		(
			{ before(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getFunctionCallAccess().getFbNameFunctionNameCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ParamAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFunctionCallAccess().getParamWriteParamParserRuleCall_2_0()); }
		ruleWriteParam
		{ after(grammarAccess.getFunctionCallAccess().getParamWriteParamParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__IntValueAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getIntValueINTTerminalRuleCall_0_0()); }
		RULE_INT
		{ after(grammarAccess.getNumericLiteralAccess().getIntValueINTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumericLiteral__FloatValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumericLiteralAccess().getFloatValueFLOATTerminalRuleCall_1_0()); }
		RULE_FLOAT
		{ after(grammarAccess.getNumericLiteralAccess().getFloatValueFLOATTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__LiteralStringAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringExpressionAccess().getLiteralStringSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringExpressionAccess().getLiteralStringSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_FLOAT : RULE_INT '.' RULE_INT;

RULE_END_COMMAND : (' '|'\t')* ('\r'|'\n')+ (' '|'\t')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
