/*
 * generated by Xtext 2.9.0
 */
package org.hopper.language.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.hopper.language.ide.contentassist.antlr.internal.InternalPortugolParser;
import org.hopper.language.services.PortugolGrammarAccess;

public class PortugolParser extends AbstractContentAssistParser {

	@Inject
	private PortugolGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalPortugolParser createParser() {
		InternalPortugolParser result = new InternalPortugolParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getVarTypeAccess().getTypeNameAlternatives_0(), "rule__VarType__TypeNameAlternatives_0");
					put(grammarAccess.getBlockSubProgramsAccess().getAlternatives(), "rule__BlockSubPrograms__Alternatives");
					put(grammarAccess.getAbstractCommandAccess().getAlternatives(), "rule__AbstractCommand__Alternatives");
					put(grammarAccess.getWriteCommandAccess().getWriteCommandAlternatives_0_0(), "rule__WriteCommand__WriteCommandAlternatives_0_0");
					put(grammarAccess.getComparisonOperatorAccess().getOpAlternatives_0(), "rule__ComparisonOperator__OpAlternatives_0");
					put(grammarAccess.getEqualityOperatorAccess().getOpAlternatives_0(), "rule__EqualityOperator__OpAlternatives_0");
					put(grammarAccess.getAddOperatorAccess().getOpAlternatives_0(), "rule__AddOperator__OpAlternatives_0");
					put(grammarAccess.getMultiplicativeOperatorAccess().getOpAlternatives_0(), "rule__MultiplicativeOperator__OpAlternatives_0");
					put(grammarAccess.getNotOperatorAccess().getOpAlternatives_0(), "rule__NotOperator__OpAlternatives_0");
					put(grammarAccess.getUnaryOperationAccess().getAlternatives(), "rule__UnaryOperation__Alternatives");
					put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
					put(grammarAccess.getPredefineFunctionsAccess().getAlternatives(), "rule__PredefineFunctions__Alternatives");
					put(grammarAccess.getLiteralAccess().getAlternatives(), "rule__Literal__Alternatives");
					put(grammarAccess.getBooleanLiteralAccess().getValueAlternatives_0(), "rule__BooleanLiteral__ValueAlternatives_0");
					put(grammarAccess.getNumericLiteralAccess().getAlternatives(), "rule__NumericLiteral__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getHeaderBlockAccess().getGroup(), "rule__HeaderBlock__Group__0");
					put(grammarAccess.getDeclarationsBlockAccess().getGroup(), "rule__DeclarationsBlock__Group__0");
					put(grammarAccess.getDeclarationsBlockAccess().getGroup_1(), "rule__DeclarationsBlock__Group_1__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVarDeclarationAccess().getGroup(), "rule__VarDeclaration__Group__0");
					put(grammarAccess.getVarDeclarationAccess().getGroup_1(), "rule__VarDeclaration__Group_1__0");
					put(grammarAccess.getDeclaredVarListAccess().getGroup(), "rule__DeclaredVarList__Group__0");
					put(grammarAccess.getDeclaredVarListAccess().getGroup_1(), "rule__DeclaredVarList__Group_1__0");
					put(grammarAccess.getBlockFunctionAccess().getGroup(), "rule__BlockFunction__Group__0");
					put(grammarAccess.getBlockProcedureAccess().getGroup(), "rule__BlockProcedure__Group__0");
					put(grammarAccess.getSubprogramParamDeclarationAccess().getGroup(), "rule__SubprogramParamDeclaration__Group__0");
					put(grammarAccess.getSubprogramParamDeclarationAccess().getGroup_1(), "rule__SubprogramParamDeclaration__Group_1__0");
					put(grammarAccess.getBlockCommandAccess().getGroup(), "rule__BlockCommand__Group__0");
					put(grammarAccess.getAbstractCommandAccess().getGroup_0(), "rule__AbstractCommand__Group_0__0");
					put(grammarAccess.getAbstractCommandAccess().getGroup_1(), "rule__AbstractCommand__Group_1__0");
					put(grammarAccess.getAbstractCommandAccess().getGroup_2(), "rule__AbstractCommand__Group_2__0");
					put(grammarAccess.getAbstractCommandAccess().getGroup_8(), "rule__AbstractCommand__Group_8__0");
					put(grammarAccess.getAbstractCommandAccess().getGroup_9(), "rule__AbstractCommand__Group_9__0");
					put(grammarAccess.getBreakStatementAccess().getGroup(), "rule__BreakStatement__Group__0");
					put(grammarAccess.getReturnStatementAccess().getGroup(), "rule__ReturnStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup(), "rule__IfStatement__Group__0");
					put(grammarAccess.getIfStatementAccess().getGroup_4(), "rule__IfStatement__Group_4__0");
					put(grammarAccess.getSwitchCaseStatementAccess().getGroup(), "rule__SwitchCaseStatement__Group__0");
					put(grammarAccess.getCaseListAccess().getGroup(), "rule__CaseList__Group__0");
					put(grammarAccess.getOtherCaseAccess().getGroup(), "rule__OtherCase__Group__0");
					put(grammarAccess.getForStatementAccess().getGroup(), "rule__ForStatement__Group__0");
					put(grammarAccess.getForStatementAccess().getGroup_6(), "rule__ForStatement__Group_6__0");
					put(grammarAccess.getWhileStatementAccess().getGroup(), "rule__WhileStatement__Group__0");
					put(grammarAccess.getRepeatStatementAccess().getGroup(), "rule__RepeatStatement__Group__0");
					put(grammarAccess.getSubprogramParamAccess().getGroup(), "rule__SubprogramParam__Group__0");
					put(grammarAccess.getSubprogramParamAccess().getGroup_1(), "rule__SubprogramParam__Group_1__0");
					put(grammarAccess.getReadCommandAccess().getGroup(), "rule__ReadCommand__Group__0");
					put(grammarAccess.getWriteCommandAccess().getGroup(), "rule__WriteCommand__Group__0");
					put(grammarAccess.getWriteParamAccess().getGroup(), "rule__WriteParam__Group__0");
					put(grammarAccess.getOptDecimalPrecisionAccess().getGroup(), "rule__OptDecimalPrecision__Group__0");
					put(grammarAccess.getOptDecimalPrecisionAccess().getGroup_2(), "rule__OptDecimalPrecision__Group_2__0");
					put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
					put(grammarAccess.getAssignmentAccess().getGroup_1(), "rule__Assignment__Group_1__0");
					put(grammarAccess.getAssignmentAccess().getGroup_1_0(), "rule__Assignment__Group_1_0__0");
					put(grammarAccess.getAssignmentAccess().getGroup_1_0_0(), "rule__Assignment__Group_1_0_0__0");
					put(grammarAccess.getOrExpressionAccess().getGroup(), "rule__OrExpression__Group__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1(), "rule__OrExpression__Group_1__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1_0(), "rule__OrExpression__Group_1_0__0");
					put(grammarAccess.getOrExpressionAccess().getGroup_1_0_0(), "rule__OrExpression__Group_1_0_0__0");
					put(grammarAccess.getXorExpressionAccess().getGroup(), "rule__XorExpression__Group__0");
					put(grammarAccess.getXorExpressionAccess().getGroup_1(), "rule__XorExpression__Group_1__0");
					put(grammarAccess.getXorExpressionAccess().getGroup_1_0(), "rule__XorExpression__Group_1_0__0");
					put(grammarAccess.getXorExpressionAccess().getGroup_1_0_0(), "rule__XorExpression__Group_1_0_0__0");
					put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1_0(), "rule__AndExpression__Group_1_0__0");
					put(grammarAccess.getAndExpressionAccess().getGroup_1_0_0(), "rule__AndExpression__Group_1_0_0__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0(), "rule__Comparison__Group_1_0__0");
					put(grammarAccess.getComparisonAccess().getGroup_1_0_0(), "rule__Comparison__Group_1_0_0__0");
					put(grammarAccess.getEquExpressionAccess().getGroup(), "rule__EquExpression__Group__0");
					put(grammarAccess.getEquExpressionAccess().getGroup_1(), "rule__EquExpression__Group_1__0");
					put(grammarAccess.getEquExpressionAccess().getGroup_1_0(), "rule__EquExpression__Group_1_0__0");
					put(grammarAccess.getEquExpressionAccess().getGroup_1_0_0(), "rule__EquExpression__Group_1_0_0__0");
					put(grammarAccess.getAddExpressionAccess().getGroup(), "rule__AddExpression__Group__0");
					put(grammarAccess.getAddExpressionAccess().getGroup_1(), "rule__AddExpression__Group_1__0");
					put(grammarAccess.getAddExpressionAccess().getGroup_1_0(), "rule__AddExpression__Group_1_0__0");
					put(grammarAccess.getAddExpressionAccess().getGroup_1_0_0(), "rule__AddExpression__Group_1_0_0__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup(), "rule__MultiplicativeExpression__Group__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1(), "rule__MultiplicativeExpression__Group_1__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0(), "rule__MultiplicativeExpression__Group_1_0__0");
					put(grammarAccess.getMultiplicativeExpressionAccess().getGroup_1_0_0(), "rule__MultiplicativeExpression__Group_1_0_0__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup(), "rule__PowerExpression__Group__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup_1(), "rule__PowerExpression__Group_1__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup_1_0(), "rule__PowerExpression__Group_1_0__0");
					put(grammarAccess.getPowerExpressionAccess().getGroup_1_0_0(), "rule__PowerExpression__Group_1_0_0__0");
					put(grammarAccess.getUnaryOperationAccess().getGroup_0(), "rule__UnaryOperation__Group_0__0");
					put(grammarAccess.getPrimaryExpressionAccess().getGroup_4(), "rule__PrimaryExpression__Group_4__0");
					put(grammarAccess.getPreDefinedFunctionCallAccess().getGroup(), "rule__PreDefinedFunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getProcedureCallAccess().getGroup(), "rule__ProcedureCall__Group__0");
					put(grammarAccess.getModelAccess().getHeaderAssignment_0(), "rule__Model__HeaderAssignment_0");
					put(grammarAccess.getModelAccess().getGlobalDeclarationsAssignment_1(), "rule__Model__GlobalDeclarationsAssignment_1");
					put(grammarAccess.getModelAccess().getSubprogramsAssignment_2(), "rule__Model__SubprogramsAssignment_2");
					put(grammarAccess.getModelAccess().getCommandsAssignment_3(), "rule__Model__CommandsAssignment_3");
					put(grammarAccess.getHeaderBlockAccess().getAlgorithmNameAssignment_1(), "rule__HeaderBlock__AlgorithmNameAssignment_1");
					put(grammarAccess.getDeclarationsBlockAccess().getVarsAssignment_1_0(), "rule__DeclarationsBlock__VarsAssignment_1_0");
					put(grammarAccess.getVariableAccess().getVarDeclarationAssignment_0(), "rule__Variable__VarDeclarationAssignment_0");
					put(grammarAccess.getVariableAccess().getTypeAssignment_2(), "rule__Variable__TypeAssignment_2");
					put(grammarAccess.getVarDeclarationAccess().getVarsAssignment_0(), "rule__VarDeclaration__VarsAssignment_0");
					put(grammarAccess.getVarDeclarationAccess().getVarsAssignment_1_1(), "rule__VarDeclaration__VarsAssignment_1_1");
					put(grammarAccess.getDeclaredVarListAccess().getVarsAssignment_0(), "rule__DeclaredVarList__VarsAssignment_0");
					put(grammarAccess.getDeclaredVarListAccess().getVarsAssignment_1_1(), "rule__DeclaredVarList__VarsAssignment_1_1");
					put(grammarAccess.getVarNameAccess().getNameAssignment(), "rule__VarName__NameAssignment");
					put(grammarAccess.getVarTypeAccess().getTypeNameAssignment(), "rule__VarType__TypeNameAssignment");
					put(grammarAccess.getSubprogramsAccess().getBlockSubProgramsAssignment(), "rule__Subprograms__BlockSubProgramsAssignment");
					put(grammarAccess.getProcedureNameAccess().getNameAssignment(), "rule__ProcedureName__NameAssignment");
					put(grammarAccess.getFunctionNameAccess().getNameAssignment(), "rule__FunctionName__NameAssignment");
					put(grammarAccess.getBlockFunctionAccess().getFunctionNameAssignment_1(), "rule__BlockFunction__FunctionNameAssignment_1");
					put(grammarAccess.getBlockFunctionAccess().getParamsAssignment_3(), "rule__BlockFunction__ParamsAssignment_3");
					put(grammarAccess.getBlockFunctionAccess().getReturnTypeAssignment_6(), "rule__BlockFunction__ReturnTypeAssignment_6");
					put(grammarAccess.getBlockFunctionAccess().getDeclarationsAssignment_7(), "rule__BlockFunction__DeclarationsAssignment_7");
					put(grammarAccess.getBlockFunctionAccess().getCommandsAssignment_9(), "rule__BlockFunction__CommandsAssignment_9");
					put(grammarAccess.getBlockProcedureAccess().getProcedureNameAssignment_1(), "rule__BlockProcedure__ProcedureNameAssignment_1");
					put(grammarAccess.getBlockProcedureAccess().getParamsAssignment_3(), "rule__BlockProcedure__ParamsAssignment_3");
					put(grammarAccess.getBlockProcedureAccess().getDeclarationsAssignment_5(), "rule__BlockProcedure__DeclarationsAssignment_5");
					put(grammarAccess.getBlockProcedureAccess().getCommandsAssignment_7(), "rule__BlockProcedure__CommandsAssignment_7");
					put(grammarAccess.getSubprogramParamDeclarationAccess().getParamListAssignment_0(), "rule__SubprogramParamDeclaration__ParamListAssignment_0");
					put(grammarAccess.getSubprogramParamDeclarationAccess().getParamListAssignment_1_1(), "rule__SubprogramParamDeclaration__ParamListAssignment_1_1");
					put(grammarAccess.getBlockCommandAccess().getCommandsAssignment_1(), "rule__BlockCommand__CommandsAssignment_1");
					put(grammarAccess.getReturnStatementAccess().getExprAssignment_2(), "rule__ReturnStatement__ExprAssignment_2");
					put(grammarAccess.getIfStatementAccess().getExprAssignment_1(), "rule__IfStatement__ExprAssignment_1");
					put(grammarAccess.getIfStatementAccess().getCommandsAssignment_3(), "rule__IfStatement__CommandsAssignment_3");
					put(grammarAccess.getIfStatementAccess().getElseCommandsAssignment_4_1(), "rule__IfStatement__ElseCommandsAssignment_4_1");
					put(grammarAccess.getSwitchCaseStatementAccess().getVariableAssignment_1(), "rule__SwitchCaseStatement__VariableAssignment_1");
					put(grammarAccess.getSwitchCaseStatementAccess().getCaseListAssignment_2(), "rule__SwitchCaseStatement__CaseListAssignment_2");
					put(grammarAccess.getSwitchCaseStatementAccess().getOtherCaseAssignment_3(), "rule__SwitchCaseStatement__OtherCaseAssignment_3");
					put(grammarAccess.getCaseListAccess().getExprAssignment_1(), "rule__CaseList__ExprAssignment_1");
					put(grammarAccess.getCaseListAccess().getCommandsAssignment_3(), "rule__CaseList__CommandsAssignment_3");
					put(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAssignment_2(), "rule__OtherCase__OtherCaseCommandsAssignment_2");
					put(grammarAccess.getForStatementAccess().getOperatorExprAssignment_1(), "rule__ForStatement__OperatorExprAssignment_1");
					put(grammarAccess.getForStatementAccess().getStartExprAssignment_3(), "rule__ForStatement__StartExprAssignment_3");
					put(grammarAccess.getForStatementAccess().getEndExprAssignment_5(), "rule__ForStatement__EndExprAssignment_5");
					put(grammarAccess.getForStatementAccess().getStepExpeAssignment_6_1(), "rule__ForStatement__StepExpeAssignment_6_1");
					put(grammarAccess.getForStatementAccess().getCommandsAssignment_8(), "rule__ForStatement__CommandsAssignment_8");
					put(grammarAccess.getWhileStatementAccess().getWhileExprAssignment_1(), "rule__WhileStatement__WhileExprAssignment_1");
					put(grammarAccess.getWhileStatementAccess().getCommandsAssignment_3(), "rule__WhileStatement__CommandsAssignment_3");
					put(grammarAccess.getRepeatStatementAccess().getCommandsAssignment_1(), "rule__RepeatStatement__CommandsAssignment_1");
					put(grammarAccess.getRepeatStatementAccess().getUntilExprAssignment_3(), "rule__RepeatStatement__UntilExprAssignment_3");
					put(grammarAccess.getSubprogramParamAccess().getExpressionAssignment_0(), "rule__SubprogramParam__ExpressionAssignment_0");
					put(grammarAccess.getSubprogramParamAccess().getExpressionAssignment_1_1(), "rule__SubprogramParam__ExpressionAssignment_1_1");
					put(grammarAccess.getReadCommandAccess().getParamListAssignment_2(), "rule__ReadCommand__ParamListAssignment_2");
					put(grammarAccess.getWriteCommandAccess().getWriteCommandAssignment_0(), "rule__WriteCommand__WriteCommandAssignment_0");
					put(grammarAccess.getWriteCommandAccess().getWriteParamAssignment_2(), "rule__WriteCommand__WriteParamAssignment_2");
					put(grammarAccess.getWriteParamAccess().getParamsAssignment_0(), "rule__WriteParam__ParamsAssignment_0");
					put(grammarAccess.getWriteParamAccess().getPrecisionAssignment_1(), "rule__WriteParam__PrecisionAssignment_1");
					put(grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionAssignment_1(), "rule__OptDecimalPrecision__FirstPrecisionAssignment_1");
					put(grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionAssignment_2_1(), "rule__OptDecimalPrecision__SecondPrecisionAssignment_2_1");
					put(grammarAccess.getAssignmentAccess().getOpAssignment_1_0_0_1(), "rule__Assignment__OpAssignment_1_0_0_1");
					put(grammarAccess.getAssignmentAccess().getRightAssignment_1_1(), "rule__Assignment__RightAssignment_1_1");
					put(grammarAccess.getOrExpressionAccess().getOpAssignment_1_0_0_1(), "rule__OrExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getOrExpressionAccess().getRightAssignment_1_1(), "rule__OrExpression__RightAssignment_1_1");
					put(grammarAccess.getXorExpressionAccess().getOpAssignment_1_0_0_1(), "rule__XorExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getXorExpressionAccess().getRightAssignment_1_1(), "rule__XorExpression__RightAssignment_1_1");
					put(grammarAccess.getAndExpressionAccess().getOpAssignment_1_0_0_1(), "rule__AndExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_1(), "rule__AndExpression__RightAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_0_0_1(), "rule__Comparison__OpAssignment_1_0_0_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_1(), "rule__Comparison__RightAssignment_1_1");
					put(grammarAccess.getEquExpressionAccess().getOpAssignment_1_0_0_1(), "rule__EquExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getEquExpressionAccess().getRightAssignment_1_1(), "rule__EquExpression__RightAssignment_1_1");
					put(grammarAccess.getAddExpressionAccess().getOpAssignment_1_0_0_1(), "rule__AddExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getAddExpressionAccess().getRightAssignment_1_1(), "rule__AddExpression__RightAssignment_1_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getOpAssignment_1_0_0_1(), "rule__MultiplicativeExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getMultiplicativeExpressionAccess().getRightAssignment_1_1(), "rule__MultiplicativeExpression__RightAssignment_1_1");
					put(grammarAccess.getPowerExpressionAccess().getOpAssignment_1_0_0_1(), "rule__PowerExpression__OpAssignment_1_0_0_1");
					put(grammarAccess.getPowerExpressionAccess().getRightAssignment_1_1(), "rule__PowerExpression__RightAssignment_1_1");
					put(grammarAccess.getAssignmentOperatorAccess().getOpAssignment(), "rule__AssignmentOperator__OpAssignment");
					put(grammarAccess.getOrOperatorAccess().getOpAssignment(), "rule__OrOperator__OpAssignment");
					put(grammarAccess.getXorOperatorAccess().getOpAssignment(), "rule__XorOperator__OpAssignment");
					put(grammarAccess.getAndOperatorAccess().getOpAssignment(), "rule__AndOperator__OpAssignment");
					put(grammarAccess.getComparisonOperatorAccess().getOpAssignment(), "rule__ComparisonOperator__OpAssignment");
					put(grammarAccess.getEqualityOperatorAccess().getOpAssignment(), "rule__EqualityOperator__OpAssignment");
					put(grammarAccess.getAddOperatorAccess().getOpAssignment(), "rule__AddOperator__OpAssignment");
					put(grammarAccess.getMultiplicativeOperatorAccess().getOpAssignment(), "rule__MultiplicativeOperator__OpAssignment");
					put(grammarAccess.getPowerOperatorAccess().getOpAssignment(), "rule__PowerOperator__OpAssignment");
					put(grammarAccess.getNotOperatorAccess().getOpAssignment(), "rule__NotOperator__OpAssignment");
					put(grammarAccess.getUnaryOperationAccess().getOpAssignment_0_1(), "rule__UnaryOperation__OpAssignment_0_1");
					put(grammarAccess.getUnaryOperationAccess().getOperandAssignment_0_2(), "rule__UnaryOperation__OperandAssignment_0_2");
					put(grammarAccess.getPreDefinedFunctionCallAccess().getPreDefFunctionNameAssignment_0(), "rule__PreDefinedFunctionCall__PreDefFunctionNameAssignment_0");
					put(grammarAccess.getPreDefinedFunctionCallAccess().getParamAssignment_2(), "rule__PreDefinedFunctionCall__ParamAssignment_2");
					put(grammarAccess.getFunctionCallAccess().getFbNameAssignment_1(), "rule__FunctionCall__FbNameAssignment_1");
					put(grammarAccess.getFunctionCallAccess().getParamAssignment_3(), "rule__FunctionCall__ParamAssignment_3");
					put(grammarAccess.getProcedureCallAccess().getFbNameAssignment_1(), "rule__ProcedureCall__FbNameAssignment_1");
					put(grammarAccess.getProcedureCallAccess().getParamAssignment_3(), "rule__ProcedureCall__ParamAssignment_3");
					put(grammarAccess.getDeclaredVarAccess().getVarNameAssignment(), "rule__DeclaredVar__VarNameAssignment");
					put(grammarAccess.getBooleanLiteralAccess().getValueAssignment(), "rule__BooleanLiteral__ValueAssignment");
					put(grammarAccess.getFloatLiteralAccess().getValueAssignment(), "rule__FloatLiteral__ValueAssignment");
					put(grammarAccess.getIntLiteralAccess().getValueAssignment(), "rule__IntLiteral__ValueAssignment");
					put(grammarAccess.getStringLiteralAccess().getValueAssignment(), "rule__StringLiteral__ValueAssignment");
					put(grammarAccess.getPiLiteralAccess().getValueAssignment(), "rule__PiLiteral__ValueAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalPortugolParser typedParser = (InternalPortugolParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PortugolGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PortugolGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
