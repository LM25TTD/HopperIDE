grammar org.hopper.language.Portugol with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate portugol "http://www.hopper.org/language/Portugol"

Model:
	header=HeaderBlock
	(globalDeclarations=DeclarationsBlock)?
	(subprograms=Subprograms)?
	commands=BlockCommand;

HeaderBlock:
	'algoritmo' algorithmName=STRING END_COMMAND;

DeclarationsBlock:
	'var'
	(vars+=Variable END_COMMAND)+;

Variable:
	varDeclaration=VarDeclaration ':' type=VarType;

VarDeclaration:
	(vars+=VarName) (',' vars+=VarName)*;

DeclaredVarList:
	(vars+=[VarName]) (',' vars+=[VarName])*;

VarName:
	name=ID;

VarType:
	typeName=('real' | 'inteiro' | 'caractere' | 'caracter' | 'logico');

Subprograms:
	(blockSubPrograms+=BlockSubPrograms)+;

BlockSubPrograms:
	BlockFunction | BlockProcedure;

ProcedureName:
	name=ID;

FunctionName:
	name=ID;

BlockFunction:
	'funcao' functionName=FunctionName '(' (params=SubprogramParamDeclaration)? ')' ':' returnType=VarType
	(declarations=DeclarationsBlock)?
	'inicio'
	(commands+=AbstractCommand)+
	'fimfuncao';

BlockProcedure:
	'procedimento' procedureName=ProcedureName '(' (params=SubprogramParamDeclaration)? ')'
	(declarations=DeclarationsBlock)?
	'inicio'
	(commands+=AbstractCommand)+
	'fimprocedimento';

SubprogramParamDeclaration:
	((paramList+=Variable) (';' paramList+=Variable)*);

BlockCommand:
	'inicio'
	(commands+=AbstractCommand)+
	'fimalgoritmo';

AbstractCommand:
	ReadCommand END_COMMAND
	| WriteCommand END_COMMAND
	| Expression END_COMMAND
	| IfStatement
	| SwitchCaseStatement
	| ForStatement
	| RepeatStatement
	| WhileStatement
	| BreakStatement END_COMMAND
	| ReturnStatement END_COMMAND;

BreakStatement:
	{BreakStatement} 'interrompa';

ReturnStatement:
	{ReturnStatement} 'retorne' expr=Expression;

IfStatement:
	'se' expr=Expression 'entao'
	(commands+=AbstractCommand)+
	('senao' (elseCommands+=AbstractCommand)+)?
	'fimse';

SwitchCaseStatement:
	'escolha' variable=[VarName]
	(caseList+=CaseList)+
	(otherCase=OtherCase)?
	'fimescolha';

CaseList:
	'caso' expr=Expression ':'
	(commands+=AbstractCommand)+;

OtherCase:
	'outrocaso' ':'
	(otherCaseCommands+=AbstractCommand)+;

ForStatement:
	'para' operatorExpr=DeclaredVar 'de' startExpr=Expression 'ate' endExpr=Expression ('passo' stepExpe=Expression)?
	'faca'
	(commands+=AbstractCommand)+
	'fimpara';

WhileStatement:
	'enquanto' whileExpr=Expression 'faca'
	(commands+=AbstractCommand)+
	'fimenquanto';

RepeatStatement:
	'repita'
	(commands+=AbstractCommand)+
	'ate' (untilExpr=Expression) END_COMMAND;

SubprogramParam:
	expression+=Expression (',' expression+=Expression)*;

ReadCommand:
	'leia' '(' paramList=DeclaredVarList ')';

WriteCommand:
	writeCommand=('escreva' | 'escreval') '(' writeParam=WriteParam ')';

WriteParam:
	params=SubprogramParam (precision=OptDecimalPrecision)?;

OptDecimalPrecision:
	':' firstPrecision=INT (':' secondPrecision=INT)?;

Expression returns Expression:
	Assignment;

Assignment returns Expression:
	OrExpression (=> ({BinaryOperation.left=current} op=AssignmentOperator) right=Assignment)*;

OrExpression returns Expression:
	XorExpression (=> ({BinaryOperation.left=current} op=OrOperator) right=XorExpression)*;

XorExpression returns Expression:
	AndExpression (=> ({BinaryOperation.left=current} op=XorOperator) right=AndExpression)*;

AndExpression returns Expression:
	Comparison (=> ({BinaryOperation.left=current} op=AndOperator) right=Comparison)*;

Comparison returns Expression:
	EquExpression (=> ({BinaryOperation.left=current} op=ComparisonOperator) right=EquExpression)*;

EquExpression returns Expression:
	AddExpression (=> ({BinaryOperation.left=current} op=EqualityOperator) right=AddExpression)*;

AddExpression returns Expression:
	MultiplicativeExpression (=> ({BinaryOperation.left=current} op=AddOperator)  right=MultiplicativeExpression)*;

MultiplicativeExpression returns Expression:
	PowerExpression (=> ({BinaryOperation.left=current} op=MultiplicativeOperator) right=PowerExpression)*;

PowerExpression returns Expression:
	UnaryOperation (=> ({BinaryOperation.left=current} op=PowerOperator) right=UnaryOperation)*;

AssignmentOperator returns Operator:
	op='<-'
;

OrOperator returns Operator:
	op='OU'
;

XorOperator returns Operator:
	op='XOU'
;

AndOperator returns Operator:
	op=('E')
;

ComparisonOperator returns Operator:
	op=('=' | '<>')
;

EqualityOperator returns Operator:
	op=('<' | '>' | '<=' | '>=')
;

AddOperator returns Operator:
	op=('+' | '-')
;

MultiplicativeOperator returns Operator:
	op=('*' | '/' | 'MOD' | '%')
;

PowerOperator returns Operator:
	op=('^')
;

NotOperator returns Operator:
	op=('NAO'|'-')
;

UnaryOperation returns Expression:
	{UnaryOperation} op=NotOperator operand=UnaryOperation /* right associativity */
	| PrimaryExpression;

PrimaryExpression returns Expression:
	Literal
	| PreDefinedFunctionCall
	| FunctionCall
	| DeclaredVar
	| '(' Expression ')';

PreDefinedFunctionCall returns Expression:
	preDefFunctionName=PredefineFunctions '(' param=SubprogramParam ')';

FunctionCall returns Expression:
	{FunctionCall} fbName=[FunctionName] '(' param=SubprogramParam ')';

PredefineFunctions:
	'maiusc' | 'compr' | 'raizq' | 'copia';

ProcedureCall returns Expression:
	{ProcedureCall} fbName=[ProcedureName] '(' param=SubprogramParam ')';

Literal returns Expression:	
	  NumericLiteral
	| StringLiteral
	| BooleanLiteral;

DeclaredVar:
	varName=[VarName];

BooleanLiteral:
	value = ('verdadeiro' | 'falso')
;

NumericLiteral:
	IntLiteral | FloatLiteral | PiLiteral;

FloatLiteral:
	value=FLOAT
;

IntLiteral:
	value=INT
;

StringLiteral:
	value=STRING
;

PiLiteral:
	value='pi'
;

terminal FLOAT returns ecore::EFloat:
	INT+ '.' INT+;

END_COMMAND:
	';';