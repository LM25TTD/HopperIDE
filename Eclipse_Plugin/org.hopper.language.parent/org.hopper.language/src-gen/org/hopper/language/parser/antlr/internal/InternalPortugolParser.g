/*
 * generated by Xtext 2.9.0
 */
parser grammar InternalPortugolParser;

options {
	tokenVocab=InternalPortugolLexer;
	superClass=AbstractInternalAntlrParser;
}

@header {
package org.hopper.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.hopper.language.services.PortugolGrammarAccess;

}

@members {

 	private PortugolGrammarAccess grammarAccess;

    public InternalPortugolParser(TokenStream input, PortugolGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected PortugolGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getHeaderHeaderBlockParserRuleCall_0_0());
				}
				lv_header_0_0=ruleHeaderBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"header",
						lv_header_0_0,
						"org.hopper.language.Portugol.HeaderBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getGlobalDeclarationsDeclarationsBlockParserRuleCall_1_0());
				}
				lv_globalDeclarations_1_0=ruleDeclarationsBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"globalDeclarations",
						lv_globalDeclarations_1_0,
						"org.hopper.language.Portugol.DeclarationsBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSubprogramsSubprogramsParserRuleCall_2_0());
				}
				lv_subprograms_2_0=ruleSubprograms
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"subprograms",
						lv_subprograms_2_0,
						"org.hopper.language.Portugol.Subprograms");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getCommandsBlockCommandParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleBlockCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"commands",
						lv_commands_3_0,
						"org.hopper.language.Portugol.BlockCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHeaderBlock
entryRuleHeaderBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderBlockRule()); }
	iv_ruleHeaderBlock=ruleHeaderBlock
	{ $current=$iv_ruleHeaderBlock.current; }
	EOF;

// Rule HeaderBlock
ruleHeaderBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Algoritmo
		{
			newLeafNode(otherlv_0, grammarAccess.getHeaderBlockAccess().getAlgoritmoKeyword_0());
		}
		(
			(
				lv_algorithmName_1_0=RULE_STRING
				{
					newLeafNode(lv_algorithmName_1_0, grammarAccess.getHeaderBlockAccess().getAlgorithmNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHeaderBlockRule());
					}
					setWithLastConsumed(
						$current,
						"algorithmName",
						lv_algorithmName_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getHeaderBlockAccess().getEND_COMMANDParserRuleCall_2());
		}
		ruleEND_COMMAND
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDeclarationsBlock
entryRuleDeclarationsBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationsBlockRule()); }
	iv_ruleDeclarationsBlock=ruleDeclarationsBlock
	{ $current=$iv_ruleDeclarationsBlock.current; }
	EOF;

// Rule DeclarationsBlock
ruleDeclarationsBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Var
		{
			newLeafNode(otherlv_0, grammarAccess.getDeclarationsBlockAccess().getVarKeyword_0());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationsBlockAccess().getVarsVariableParserRuleCall_1_0_0());
					}
					lv_vars_1_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationsBlockRule());
						}
						add(
							$current,
							"vars",
							lv_vars_1_0,
							"org.hopper.language.Portugol.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDParserRuleCall_1_1());
			}
			ruleEND_COMMAND
			{
				afterParserOrEnumRuleCall();
			}
		)+
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getVarDeclarationVarDeclarationParserRuleCall_0_0());
				}
				lv_varDeclaration_0_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"varDeclaration",
						lv_varDeclaration_0_0,
						"org.hopper.language.Portugol.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.hopper.language.Portugol.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleVarName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					add(
						$current,
						"vars",
						lv_vars_0_0,
						"org.hopper.language.Portugol.VarName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getVarDeclarationAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_1_1_0());
					}
					lv_vars_2_0=ruleVarName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"org.hopper.language.Portugol.VarName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDeclaredVarList
entryRuleDeclaredVarList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaredVarListRule()); }
	iv_ruleDeclaredVarList=ruleDeclaredVarList
	{ $current=$iv_ruleDeclaredVarList.current; }
	EOF;

// Rule DeclaredVarList
ruleDeclaredVarList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeclaredVarListRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getDeclaredVarListAccess().getVarsVarNameCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getDeclaredVarListAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeclaredVarListRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getDeclaredVarListAccess().getVarsVarNameCrossReference_1_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleVarName
entryRuleVarName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarNameRule()); }
	iv_ruleVarName=ruleVarName
	{ $current=$iv_ruleVarName.current; }
	EOF;

// Rule VarName
ruleVarName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVarNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleVarType
entryRuleVarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	iv_ruleVarType=ruleVarType
	{ $current=$iv_ruleVarType.current; }
	EOF;

// Rule VarType
ruleVarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typeName_0_1=Real
				{
					newLeafNode(lv_typeName_0_1, grammarAccess.getVarTypeAccess().getTypeNameRealKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_1, null);
				}
				    |
				lv_typeName_0_2=Inteiro
				{
					newLeafNode(lv_typeName_0_2, grammarAccess.getVarTypeAccess().getTypeNameInteiroKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_2, null);
				}
				    |
				lv_typeName_0_3=Caractere
				{
					newLeafNode(lv_typeName_0_3, grammarAccess.getVarTypeAccess().getTypeNameCaractereKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_3, null);
				}
				    |
				lv_typeName_0_4=Caracter
				{
					newLeafNode(lv_typeName_0_4, grammarAccess.getVarTypeAccess().getTypeNameCaracterKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_4, null);
				}
				    |
				lv_typeName_0_5=Logico
				{
					newLeafNode(lv_typeName_0_5, grammarAccess.getVarTypeAccess().getTypeNameLogicoKeyword_0_4());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_5, null);
				}
			)
		)
	)
;

// Entry rule entryRuleSubprograms
entryRuleSubprograms returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprogramsRule()); }
	iv_ruleSubprograms=ruleSubprograms
	{ $current=$iv_ruleSubprograms.current; }
	EOF;

// Rule Subprograms
ruleSubprograms returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSubprogramsAccess().getBlockSubProgramsBlockSubProgramsParserRuleCall_0());
			}
			lv_blockSubPrograms_0_0=ruleBlockSubPrograms
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSubprogramsRule());
				}
				add(
					$current,
					"blockSubPrograms",
					lv_blockSubPrograms_0_0,
					"org.hopper.language.Portugol.BlockSubPrograms");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleBlockSubPrograms
entryRuleBlockSubPrograms returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockSubProgramsRule()); }
	iv_ruleBlockSubPrograms=ruleBlockSubPrograms
	{ $current=$iv_ruleBlockSubPrograms.current; }
	EOF;

// Rule BlockSubPrograms
ruleBlockSubPrograms returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlockSubProgramsAccess().getBlockFunctionParserRuleCall_0());
		}
		this_BlockFunction_0=ruleBlockFunction
		{
			$current = $this_BlockFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockSubProgramsAccess().getBlockProcedureParserRuleCall_1());
		}
		this_BlockProcedure_1=ruleBlockProcedure
		{
			$current = $this_BlockProcedure_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleProcedureName
entryRuleProcedureName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureNameRule()); }
	iv_ruleProcedureName=ruleProcedureName
	{ $current=$iv_ruleProcedureName.current; }
	EOF;

// Rule ProcedureName
ruleProcedureName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getProcedureNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getProcedureNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current; }
	EOF;

// Rule FunctionName
ruleFunctionName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctionNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleBlockFunction
entryRuleBlockFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockFunctionRule()); }
	iv_ruleBlockFunction=ruleBlockFunction
	{ $current=$iv_ruleBlockFunction.current; }
	EOF;

// Rule BlockFunction
ruleBlockFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Funcao
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockFunctionAccess().getFuncaoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getFunctionNameFunctionNameParserRuleCall_1_0());
				}
				lv_functionName_1_0=ruleFunctionName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"functionName",
						lv_functionName_1_0,
						"org.hopper.language.Portugol.FunctionName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getParamsSubprogramParamDeclarationParserRuleCall_3_0());
				}
				lv_params_3_0=ruleSubprogramParamDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"params",
						lv_params_3_0,
						"org.hopper.language.Portugol.SubprogramParamDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockFunctionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5=Colon
		{
			newLeafNode(otherlv_5, grammarAccess.getBlockFunctionAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getReturnTypeVarTypeParserRuleCall_6_0());
				}
				lv_returnType_6_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_6_0,
						"org.hopper.language.Portugol.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getDeclarationsDeclarationsBlockParserRuleCall_7_0());
				}
				lv_declarations_7_0=ruleDeclarationsBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"declarations",
						lv_declarations_7_0,
						"org.hopper.language.Portugol.DeclarationsBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_8=Inicio
		{
			newLeafNode(otherlv_8, grammarAccess.getBlockFunctionAccess().getInicioKeyword_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getCommandsAbstractCommandParserRuleCall_9_0());
				}
				lv_commands_9_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					add(
						$current,
						"commands",
						lv_commands_9_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10=Fimfuncao
		{
			newLeafNode(otherlv_10, grammarAccess.getBlockFunctionAccess().getFimfuncaoKeyword_10());
		}
	)
;

// Entry rule entryRuleBlockProcedure
entryRuleBlockProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockProcedureRule()); }
	iv_ruleBlockProcedure=ruleBlockProcedure
	{ $current=$iv_ruleBlockProcedure.current; }
	EOF;

// Rule BlockProcedure
ruleBlockProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Procedimento
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockProcedureAccess().getProcedimentoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getProcedureNameProcedureNameParserRuleCall_1_0());
				}
				lv_procedureName_1_0=ruleProcedureName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					set(
						$current,
						"procedureName",
						lv_procedureName_1_0,
						"org.hopper.language.Portugol.ProcedureName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockProcedureAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getParamsSubprogramParamDeclarationParserRuleCall_3_0());
				}
				lv_params_3_0=ruleSubprogramParamDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					set(
						$current,
						"params",
						lv_params_3_0,
						"org.hopper.language.Portugol.SubprogramParamDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockProcedureAccess().getRightParenthesisKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getDeclarationsDeclarationsBlockParserRuleCall_5_0());
				}
				lv_declarations_5_0=ruleDeclarationsBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					set(
						$current,
						"declarations",
						lv_declarations_5_0,
						"org.hopper.language.Portugol.DeclarationsBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_6=Inicio
		{
			newLeafNode(otherlv_6, grammarAccess.getBlockProcedureAccess().getInicioKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getCommandsAbstractCommandParserRuleCall_7_0());
				}
				lv_commands_7_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					add(
						$current,
						"commands",
						lv_commands_7_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_8=Fimprocedimento
		{
			newLeafNode(otherlv_8, grammarAccess.getBlockProcedureAccess().getFimprocedimentoKeyword_8());
		}
	)
;

// Entry rule entryRuleSubprogramParamDeclaration
entryRuleSubprogramParamDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprogramParamDeclarationRule()); }
	iv_ruleSubprogramParamDeclaration=ruleSubprogramParamDeclaration
	{ $current=$iv_ruleSubprogramParamDeclaration.current; }
	EOF;

// Rule SubprogramParamDeclaration
ruleSubprogramParamDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubprogramParamDeclarationAccess().getParamListVariableParserRuleCall_0_0());
				}
				lv_paramList_0_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubprogramParamDeclarationRule());
					}
					add(
						$current,
						"paramList",
						lv_paramList_0_0,
						"org.hopper.language.Portugol.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Semicolon
			{
				newLeafNode(otherlv_1, grammarAccess.getSubprogramParamDeclarationAccess().getSemicolonKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubprogramParamDeclarationAccess().getParamListVariableParserRuleCall_1_1_0());
					}
					lv_paramList_2_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubprogramParamDeclarationRule());
						}
						add(
							$current,
							"paramList",
							lv_paramList_2_0,
							"org.hopper.language.Portugol.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleBlockCommand
entryRuleBlockCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockCommandRule()); }
	iv_ruleBlockCommand=ruleBlockCommand
	{ $current=$iv_ruleBlockCommand.current; }
	EOF;

// Rule BlockCommand
ruleBlockCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Inicio
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockCommandAccess().getInicioKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockCommandAccess().getCommandsAbstractCommandParserRuleCall_1_0());
				}
				lv_commands_1_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockCommandRule());
					}
					add(
						$current,
						"commands",
						lv_commands_1_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2=Fimalgoritmo
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockCommandAccess().getFimalgoritmoKeyword_2());
		}
	)
;

// Entry rule entryRuleAbstractCommand
entryRuleAbstractCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractCommandRule()); }
	iv_ruleAbstractCommand=ruleAbstractCommand
	{ $current=$iv_ruleAbstractCommand.current; }
	EOF;

// Rule AbstractCommand
ruleAbstractCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getReadCommandParserRuleCall_0_0());
			}
			this_ReadCommand_0=ruleReadCommand
			{
				$current = $this_ReadCommand_0.current;
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_0_1());
			}
			ruleEND_COMMAND
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getWriteCommandParserRuleCall_1_0());
			}
			this_WriteCommand_2=ruleWriteCommand
			{
				$current = $this_WriteCommand_2.current;
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_1_1());
			}
			ruleEND_COMMAND
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getExpressionParserRuleCall_2_0());
			}
			this_Expression_4=ruleExpression
			{
				$current = $this_Expression_4.current;
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_2_1());
			}
			ruleEND_COMMAND
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCommandAccess().getIfStatementParserRuleCall_3());
		}
		this_IfStatement_6=ruleIfStatement
		{
			$current = $this_IfStatement_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCommandAccess().getSwitchCaseStatementParserRuleCall_4());
		}
		this_SwitchCaseStatement_7=ruleSwitchCaseStatement
		{
			$current = $this_SwitchCaseStatement_7.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCommandAccess().getForStatementParserRuleCall_5());
		}
		this_ForStatement_8=ruleForStatement
		{
			$current = $this_ForStatement_8.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCommandAccess().getRepeatStatementParserRuleCall_6());
		}
		this_RepeatStatement_9=ruleRepeatStatement
		{
			$current = $this_RepeatStatement_9.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCommandAccess().getWhileStatementParserRuleCall_7());
		}
		this_WhileStatement_10=ruleWhileStatement
		{
			$current = $this_WhileStatement_10.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getBreakStatementParserRuleCall_8_0());
			}
			this_BreakStatement_11=ruleBreakStatement
			{
				$current = $this_BreakStatement_11.current;
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_8_1());
			}
			ruleEND_COMMAND
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		(
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getReturnStatementParserRuleCall_9_0());
			}
			this_ReturnStatement_13=ruleReturnStatement
			{
				$current = $this_ReturnStatement_13.current;
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getAbstractCommandAccess().getEND_COMMANDParserRuleCall_9_1());
			}
			ruleEND_COMMAND
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleBreakStatement
entryRuleBreakStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBreakStatementRule()); }
	iv_ruleBreakStatement=ruleBreakStatement
	{ $current=$iv_ruleBreakStatement.current; }
	EOF;

// Rule BreakStatement
ruleBreakStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBreakStatementAccess().getBreakStatementAction_0(),
					$current);
			}
		)
		otherlv_1=Interrompa
		{
			newLeafNode(otherlv_1, grammarAccess.getBreakStatementAccess().getInterrompaKeyword_1());
		}
	)
;

// Entry rule entryRuleReturnStatement
entryRuleReturnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReturnStatementRule()); }
	iv_ruleReturnStatement=ruleReturnStatement
	{ $current=$iv_ruleReturnStatement.current; }
	EOF;

// Rule ReturnStatement
ruleReturnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getReturnStatementAccess().getReturnStatementAction_0(),
					$current);
			}
		)
		otherlv_1=Retorne
		{
			newLeafNode(otherlv_1, grammarAccess.getReturnStatementAccess().getRetorneKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReturnStatementAccess().getExprExpressionParserRuleCall_2_0());
				}
				lv_expr_2_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReturnStatementRule());
					}
					set(
						$current,
						"expr",
						lv_expr_2_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	iv_ruleIfStatement=ruleIfStatement
	{ $current=$iv_ruleIfStatement.current; }
	EOF;

// Rule IfStatement
ruleIfStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Se
		{
			newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getSeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Entao
		{
			newLeafNode(otherlv_2, grammarAccess.getIfStatementAccess().getEntaoKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfStatementAccess().getCommandsAbstractCommandParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfStatementRule());
					}
					add(
						$current,
						"commands",
						lv_commands_3_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			otherlv_4=Senao
			{
				newLeafNode(otherlv_4, grammarAccess.getIfStatementAccess().getSenaoKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfStatementAccess().getElseCommandsAbstractCommandParserRuleCall_4_1_0());
					}
					lv_elseCommands_5_0=ruleAbstractCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfStatementRule());
						}
						add(
							$current,
							"elseCommands",
							lv_elseCommands_5_0,
							"org.hopper.language.Portugol.AbstractCommand");
						afterParserOrEnumRuleCall();
					}
				)
			)+
		)?
		otherlv_6=Fimse
		{
			newLeafNode(otherlv_6, grammarAccess.getIfStatementAccess().getFimseKeyword_5());
		}
	)
;

// Entry rule entryRuleSwitchCaseStatement
entryRuleSwitchCaseStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSwitchCaseStatementRule()); }
	iv_ruleSwitchCaseStatement=ruleSwitchCaseStatement
	{ $current=$iv_ruleSwitchCaseStatement.current; }
	EOF;

// Rule SwitchCaseStatement
ruleSwitchCaseStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Escolha
		{
			newLeafNode(otherlv_0, grammarAccess.getSwitchCaseStatementAccess().getEscolhaKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSwitchCaseStatementRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getSwitchCaseStatementAccess().getVariableVarNameCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchCaseStatementAccess().getCaseListCaseListParserRuleCall_2_0());
				}
				lv_caseList_2_0=ruleCaseList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchCaseStatementRule());
					}
					add(
						$current,
						"caseList",
						lv_caseList_2_0,
						"org.hopper.language.Portugol.CaseList");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getSwitchCaseStatementAccess().getOtherCaseOtherCaseParserRuleCall_3_0());
				}
				lv_otherCase_3_0=ruleOtherCase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSwitchCaseStatementRule());
					}
					set(
						$current,
						"otherCase",
						lv_otherCase_3_0,
						"org.hopper.language.Portugol.OtherCase");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=Fimescolha
		{
			newLeafNode(otherlv_4, grammarAccess.getSwitchCaseStatementAccess().getFimescolhaKeyword_4());
		}
	)
;

// Entry rule entryRuleCaseList
entryRuleCaseList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCaseListRule()); }
	iv_ruleCaseList=ruleCaseList
	{ $current=$iv_ruleCaseList.current; }
	EOF;

// Rule CaseList
ruleCaseList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Caso
		{
			newLeafNode(otherlv_0, grammarAccess.getCaseListAccess().getCasoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseListAccess().getExprExpressionParserRuleCall_1_0());
				}
				lv_expr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseListRule());
					}
					set(
						$current,
						"expr",
						lv_expr_1_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Colon
		{
			newLeafNode(otherlv_2, grammarAccess.getCaseListAccess().getColonKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCaseListAccess().getCommandsAbstractCommandParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCaseListRule());
					}
					add(
						$current,
						"commands",
						lv_commands_3_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleOtherCase
entryRuleOtherCase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOtherCaseRule()); }
	iv_ruleOtherCase=ruleOtherCase
	{ $current=$iv_ruleOtherCase.current; }
	EOF;

// Rule OtherCase
ruleOtherCase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Outrocaso
		{
			newLeafNode(otherlv_0, grammarAccess.getOtherCaseAccess().getOutrocasoKeyword_0());
		}
		otherlv_1=Colon
		{
			newLeafNode(otherlv_1, grammarAccess.getOtherCaseAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOtherCaseAccess().getOtherCaseCommandsAbstractCommandParserRuleCall_2_0());
				}
				lv_otherCaseCommands_2_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOtherCaseRule());
					}
					add(
						$current,
						"otherCaseCommands",
						lv_otherCaseCommands_2_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleForStatement
entryRuleForStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForStatementRule()); }
	iv_ruleForStatement=ruleForStatement
	{ $current=$iv_ruleForStatement.current; }
	EOF;

// Rule ForStatement
ruleForStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Para
		{
			newLeafNode(otherlv_0, grammarAccess.getForStatementAccess().getParaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getOperatorExprExpressionParserRuleCall_1_0());
				}
				lv_operatorExpr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"operatorExpr",
						lv_operatorExpr_1_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=De
		{
			newLeafNode(otherlv_2, grammarAccess.getForStatementAccess().getDeKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getStartExprExpressionParserRuleCall_3_0());
				}
				lv_startExpr_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"startExpr",
						lv_startExpr_3_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=Ate
		{
			newLeafNode(otherlv_4, grammarAccess.getForStatementAccess().getAteKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getEndExprExpressionParserRuleCall_5_0());
				}
				lv_endExpr_5_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					set(
						$current,
						"endExpr",
						lv_endExpr_5_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_6=Passo
			{
				newLeafNode(otherlv_6, grammarAccess.getForStatementAccess().getPassoKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getForStatementAccess().getStepExpeExpressionParserRuleCall_6_1_0());
					}
					lv_stepExpe_7_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getForStatementRule());
						}
						set(
							$current,
							"stepExpe",
							lv_stepExpe_7_0,
							"org.hopper.language.Portugol.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_8=Faca
		{
			newLeafNode(otherlv_8, grammarAccess.getForStatementAccess().getFacaKeyword_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForStatementAccess().getCommandsAbstractCommandParserRuleCall_8_0());
				}
				lv_commands_9_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForStatementRule());
					}
					add(
						$current,
						"commands",
						lv_commands_9_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10=Fimpara
		{
			newLeafNode(otherlv_10, grammarAccess.getForStatementAccess().getFimparaKeyword_9());
		}
	)
;

// Entry rule entryRuleWhileStatement
entryRuleWhileStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileStatementRule()); }
	iv_ruleWhileStatement=ruleWhileStatement
	{ $current=$iv_ruleWhileStatement.current; }
	EOF;

// Rule WhileStatement
ruleWhileStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Enquanto
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileStatementAccess().getEnquantoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getWhileExprExpressionParserRuleCall_1_0());
				}
				lv_whileExpr_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					set(
						$current,
						"whileExpr",
						lv_whileExpr_1_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=Faca
		{
			newLeafNode(otherlv_2, grammarAccess.getWhileStatementAccess().getFacaKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileStatementAccess().getCommandsAbstractCommandParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileStatementRule());
					}
					add(
						$current,
						"commands",
						lv_commands_3_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_4=Fimenquanto
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileStatementAccess().getFimenquantoKeyword_4());
		}
	)
;

// Entry rule entryRuleRepeatStatement
entryRuleRepeatStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatStatementRule()); }
	iv_ruleRepeatStatement=ruleRepeatStatement
	{ $current=$iv_ruleRepeatStatement.current; }
	EOF;

// Rule RepeatStatement
ruleRepeatStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Repita
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatStatementAccess().getRepitaKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getCommandsAbstractCommandParserRuleCall_1_0());
				}
				lv_commands_1_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					add(
						$current,
						"commands",
						lv_commands_1_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_2=Ate
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatStatementAccess().getAteKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatStatementAccess().getUntilExprExpressionParserRuleCall_3_0());
				}
				lv_untilExpr_3_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatStatementRule());
					}
					set(
						$current,
						"untilExpr",
						lv_untilExpr_3_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getRepeatStatementAccess().getEND_COMMANDParserRuleCall_4());
		}
		ruleEND_COMMAND
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSubprogramParam
entryRuleSubprogramParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprogramParamRule()); }
	iv_ruleSubprogramParam=ruleSubprogramParam
	{ $current=$iv_ruleSubprogramParam.current; }
	EOF;

// Rule SubprogramParam
ruleSubprogramParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSubprogramParamAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSubprogramParamRule());
					}
					add(
						$current,
						"expression",
						lv_expression_0_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=Comma
			{
				newLeafNode(otherlv_1, grammarAccess.getSubprogramParamAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getSubprogramParamAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSubprogramParamRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.hopper.language.Portugol.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleReadCommand
entryRuleReadCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadCommandRule()); }
	iv_ruleReadCommand=ruleReadCommand
	{ $current=$iv_ruleReadCommand.current; }
	EOF;

// Rule ReadCommand
ruleReadCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Leia
		{
			newLeafNode(otherlv_0, grammarAccess.getReadCommandAccess().getLeiaKeyword_0());
		}
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getReadCommandAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReadCommandAccess().getParamListDeclaredVarListParserRuleCall_2_0());
				}
				lv_paramList_2_0=ruleDeclaredVarList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReadCommandRule());
					}
					set(
						$current,
						"paramList",
						lv_paramList_2_0,
						"org.hopper.language.Portugol.DeclaredVarList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=RightParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getReadCommandAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleWriteCommand
entryRuleWriteCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWriteCommandRule()); }
	iv_ruleWriteCommand=ruleWriteCommand
	{ $current=$iv_ruleWriteCommand.current; }
	EOF;

// Rule WriteCommand
ruleWriteCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_writeCommand_0_1=Escreva
					{
						newLeafNode(lv_writeCommand_0_1, grammarAccess.getWriteCommandAccess().getWriteCommandEscrevaKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWriteCommandRule());
						}
						setWithLastConsumed($current, "writeCommand", lv_writeCommand_0_1, null);
					}
					    |
					lv_writeCommand_0_2=Escreval
					{
						newLeafNode(lv_writeCommand_0_2, grammarAccess.getWriteCommandAccess().getWriteCommandEscrevalKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getWriteCommandRule());
						}
						setWithLastConsumed($current, "writeCommand", lv_writeCommand_0_2, null);
					}
				)
			)
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getWriteCommandAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWriteCommandAccess().getWriteParamWriteParamParserRuleCall_2_0());
				}
				lv_writeParam_2_0=ruleWriteParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWriteCommandRule());
					}
					set(
						$current,
						"writeParam",
						lv_writeParam_2_0,
						"org.hopper.language.Portugol.WriteParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=RightParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getWriteCommandAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleWriteParam
entryRuleWriteParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWriteParamRule()); }
	iv_ruleWriteParam=ruleWriteParam
	{ $current=$iv_ruleWriteParam.current; }
	EOF;

// Rule WriteParam
ruleWriteParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWriteParamAccess().getParamsSubprogramParamParserRuleCall_0_0());
				}
				lv_params_0_0=ruleSubprogramParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWriteParamRule());
					}
					set(
						$current,
						"params",
						lv_params_0_0,
						"org.hopper.language.Portugol.SubprogramParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getWriteParamAccess().getPrecisionOptDecimalPrecisionParserRuleCall_1_0());
				}
				lv_precision_1_0=ruleOptDecimalPrecision
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWriteParamRule());
					}
					set(
						$current,
						"precision",
						lv_precision_1_0,
						"org.hopper.language.Portugol.OptDecimalPrecision");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleOptDecimalPrecision
entryRuleOptDecimalPrecision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptDecimalPrecisionRule()); }
	iv_ruleOptDecimalPrecision=ruleOptDecimalPrecision
	{ $current=$iv_ruleOptDecimalPrecision.current; }
	EOF;

// Rule OptDecimalPrecision
ruleOptDecimalPrecision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=Colon
		{
			newLeafNode(otherlv_0, grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_0());
		}
		(
			(
				lv_firstPrecision_1_0=RULE_INT
				{
					newLeafNode(lv_firstPrecision_1_0, grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOptDecimalPrecisionRule());
					}
					setWithLastConsumed(
						$current,
						"firstPrecision",
						lv_firstPrecision_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2=Colon
			{
				newLeafNode(otherlv_2, grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_2_0());
			}
			(
				(
					lv_secondPrecision_3_0=RULE_INT
					{
						newLeafNode(lv_secondPrecision_3_0, grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOptDecimalPrecisionRule());
						}
						setWithLastConsumed(
							$current,
							"secondPrecision",
							lv_secondPrecision_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getExpressionAccess().getAssignmentParserRuleCall());
	}
	this_Assignment_0=ruleAssignment
	{
		$current = $this_Assignment_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleAssignment
entryRuleAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentRule()); }
	iv_ruleAssignment=ruleAssignment
	{ $current=$iv_ruleAssignment.current; }
	EOF;

// Rule Assignment
ruleAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAssignmentAccess().getOrExpressionParserRuleCall_0());
		}
		this_OrExpression_0=ruleOrExpression
		{
			$current = $this_OrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleAssignmentOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAssignmentAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getAssignmentAccess().getOpAssignmentOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleAssignmentOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAssignmentRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.AssignmentOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAssignmentAccess().getRightAssignmentParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAssignmentRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.Assignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOrExpression
entryRuleOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrExpressionRule()); }
	iv_ruleOrExpression=ruleOrExpression
	{ $current=$iv_ruleOrExpression.current; }
	EOF;

// Rule OrExpression
ruleOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOrExpressionAccess().getXorExpressionParserRuleCall_0());
		}
		this_XorExpression_0=ruleXorExpression
		{
			$current = $this_XorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleOrOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getOrExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getOrExpressionAccess().getOpOrOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleOrOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.OrOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOrExpressionAccess().getRightXorExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOrExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.XorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	iv_ruleXorExpression=ruleXorExpression
	{ $current=$iv_ruleXorExpression.current; }
	EOF;

// Rule XorExpression
ruleXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleXorOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getXorExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getXorExpressionAccess().getOpXorOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleXorOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.XorOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleAndOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAndExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getAndExpressionAccess().getOpAndOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleAndOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.AndOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getEquExpressionParserRuleCall_0());
		}
		this_EquExpression_0=ruleEquExpression
		{
			$current = $this_EquExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleComparisonOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getComparisonAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getComparisonAccess().getOpComparisonOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleComparisonOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getComparisonRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.ComparisonOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightEquExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleEquExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.EquExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquExpression
entryRuleEquExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquExpressionRule()); }
	iv_ruleEquExpression=ruleEquExpression
	{ $current=$iv_ruleEquExpression.current; }
	EOF;

// Rule EquExpression
ruleEquExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0());
		}
		this_AddExpression_0=ruleAddExpression
		{
			$current = $this_AddExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleEqualityOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getEquExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getEquExpressionAccess().getOpEqualityOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleEqualityOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.EqualityOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAddExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.AddExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	iv_ruleAddExpression=ruleAddExpression
	{ $current=$iv_ruleAddExpression.current; }
	EOF;

// Rule AddExpression
ruleAddExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddExpressionAccess().getMultiplicativeExpressionParserRuleCall_0());
		}
		this_MultiplicativeExpression_0=ruleMultiplicativeExpression
		{
			$current = $this_MultiplicativeExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleAddOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAddExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getAddExpressionAccess().getOpAddOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleAddOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.AddOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExpressionAccess().getRightMultiplicativeExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleMultiplicativeExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.MultiplicativeExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplicativeExpression
entryRuleMultiplicativeExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeExpressionRule()); }
	iv_ruleMultiplicativeExpression=ruleMultiplicativeExpression
	{ $current=$iv_ruleMultiplicativeExpression.current; }
	EOF;

// Rule MultiplicativeExpression
ruleMultiplicativeExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getPowerExpressionParserRuleCall_0());
		}
		this_PowerExpression_0=rulePowerExpression
		{
			$current = $this_PowerExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							ruleMultiplicativeOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getMultiplicativeExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getOpMultiplicativeOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=ruleMultiplicativeOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.MultiplicativeOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicativeExpressionAccess().getRightPowerExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=rulePowerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicativeExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.PowerExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePowerExpression
entryRulePowerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerExpressionRule()); }
	iv_rulePowerExpression=rulePowerExpression
	{ $current=$iv_rulePowerExpression.current; }
	EOF;

// Rule PowerExpression
rulePowerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPowerExpressionAccess().getUnaryOperationParserRuleCall_0());
		}
		this_UnaryOperation_0=ruleUnaryOperation
		{
			$current = $this_UnaryOperation_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				((
					(
					)
					(
						(
							rulePowerOperator
						)
					)
				)
				)=>
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getPowerExpressionAccess().getBinaryOperationLeftAction_1_0_0_0(),
								$current);
						}
					)
					(
						(
							{
								newCompositeNode(grammarAccess.getPowerExpressionAccess().getOpPowerOperatorParserRuleCall_1_0_0_1_0());
							}
							lv_op_2_0=rulePowerOperator
							{
								if ($current==null) {
									$current = createModelElementForParent(grammarAccess.getPowerExpressionRule());
								}
								set(
									$current,
									"op",
									lv_op_2_0,
									"org.hopper.language.Portugol.PowerOperator");
								afterParserOrEnumRuleCall();
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPowerExpressionAccess().getRightUnaryOperationParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleUnaryOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPowerExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.UnaryOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAssignmentOperator
entryRuleAssignmentOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAssignmentOperatorRule()); }
	iv_ruleAssignmentOperator=ruleAssignmentOperator
	{ $current=$iv_ruleAssignmentOperator.current; }
	EOF;

// Rule AssignmentOperator
ruleAssignmentOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_op_0_0=LessThanSignHyphenMinus
			{
				newLeafNode(lv_op_0_0, grammarAccess.getAssignmentOperatorAccess().getOpLessThanSignHyphenMinusKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAssignmentOperatorRule());
				}
				setWithLastConsumed($current, "op", lv_op_0_0, "<-");
			}
		)
	)
;

// Entry rule entryRuleOrOperator
entryRuleOrOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOrOperatorRule()); }
	iv_ruleOrOperator=ruleOrOperator
	{ $current=$iv_ruleOrOperator.current; }
	EOF;

// Rule OrOperator
ruleOrOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_op_0_0=OU
			{
				newLeafNode(lv_op_0_0, grammarAccess.getOrOperatorAccess().getOpOUKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getOrOperatorRule());
				}
				setWithLastConsumed($current, "op", lv_op_0_0, "OU");
			}
		)
	)
;

// Entry rule entryRuleXorOperator
entryRuleXorOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorOperatorRule()); }
	iv_ruleXorOperator=ruleXorOperator
	{ $current=$iv_ruleXorOperator.current; }
	EOF;

// Rule XorOperator
ruleXorOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_op_0_0=XOU
			{
				newLeafNode(lv_op_0_0, grammarAccess.getXorOperatorAccess().getOpXOUKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getXorOperatorRule());
				}
				setWithLastConsumed($current, "op", lv_op_0_0, "XOU");
			}
		)
	)
;

// Entry rule entryRuleAndOperator
entryRuleAndOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndOperatorRule()); }
	iv_ruleAndOperator=ruleAndOperator
	{ $current=$iv_ruleAndOperator.current; }
	EOF;

// Rule AndOperator
ruleAndOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_op_0_0=E
			{
				newLeafNode(lv_op_0_0, grammarAccess.getAndOperatorAccess().getOpEKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAndOperatorRule());
				}
				setWithLastConsumed($current, "op", lv_op_0_0, "E");
			}
		)
	)
;

// Entry rule entryRuleComparisonOperator
entryRuleComparisonOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonOperatorRule()); }
	iv_ruleComparisonOperator=ruleComparisonOperator
	{ $current=$iv_ruleComparisonOperator.current; }
	EOF;

// Rule ComparisonOperator
ruleComparisonOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1=EqualsSign
				{
					newLeafNode(lv_op_0_1, grammarAccess.getComparisonOperatorAccess().getOpEqualsSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2=LessThanSignGreaterThanSign
				{
					newLeafNode(lv_op_0_2, grammarAccess.getComparisonOperatorAccess().getOpLessThanSignGreaterThanSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleEqualityOperator
entryRuleEqualityOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualityOperatorRule()); }
	iv_ruleEqualityOperator=ruleEqualityOperator
	{ $current=$iv_ruleEqualityOperator.current; }
	EOF;

// Rule EqualityOperator
ruleEqualityOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1=LessThanSign
				{
					newLeafNode(lv_op_0_1, grammarAccess.getEqualityOperatorAccess().getOpLessThanSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEqualityOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2=GreaterThanSign
				{
					newLeafNode(lv_op_0_2, grammarAccess.getEqualityOperatorAccess().getOpGreaterThanSignKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEqualityOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
				    |
				lv_op_0_3=LessThanSignEqualsSign
				{
					newLeafNode(lv_op_0_3, grammarAccess.getEqualityOperatorAccess().getOpLessThanSignEqualsSignKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEqualityOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_3, null);
				}
				    |
				lv_op_0_4=GreaterThanSignEqualsSign
				{
					newLeafNode(lv_op_0_4, grammarAccess.getEqualityOperatorAccess().getOpGreaterThanSignEqualsSignKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getEqualityOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_4, null);
				}
			)
		)
	)
;

// Entry rule entryRuleAddOperator
entryRuleAddOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddOperatorRule()); }
	iv_ruleAddOperator=ruleAddOperator
	{ $current=$iv_ruleAddOperator.current; }
	EOF;

// Rule AddOperator
ruleAddOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1=PlusSign
				{
					newLeafNode(lv_op_0_1, grammarAccess.getAddOperatorAccess().getOpPlusSignKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2=HyphenMinus
				{
					newLeafNode(lv_op_0_2, grammarAccess.getAddOperatorAccess().getOpHyphenMinusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAddOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleMultiplicativeOperator
entryRuleMultiplicativeOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicativeOperatorRule()); }
	iv_ruleMultiplicativeOperator=ruleMultiplicativeOperator
	{ $current=$iv_ruleMultiplicativeOperator.current; }
	EOF;

// Rule MultiplicativeOperator
ruleMultiplicativeOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1=Asterisk
				{
					newLeafNode(lv_op_0_1, grammarAccess.getMultiplicativeOperatorAccess().getOpAsteriskKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicativeOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2=Solidus
				{
					newLeafNode(lv_op_0_2, grammarAccess.getMultiplicativeOperatorAccess().getOpSolidusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicativeOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
				    |
				lv_op_0_3=MOD
				{
					newLeafNode(lv_op_0_3, grammarAccess.getMultiplicativeOperatorAccess().getOpMODKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicativeOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_3, null);
				}
				    |
				lv_op_0_4=PercentSign
				{
					newLeafNode(lv_op_0_4, grammarAccess.getMultiplicativeOperatorAccess().getOpPercentSignKeyword_0_3());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMultiplicativeOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_4, null);
				}
			)
		)
	)
;

// Entry rule entryRulePowerOperator
entryRulePowerOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerOperatorRule()); }
	iv_rulePowerOperator=rulePowerOperator
	{ $current=$iv_rulePowerOperator.current; }
	EOF;

// Rule PowerOperator
rulePowerOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_op_0_0=CircumflexAccent
			{
				newLeafNode(lv_op_0_0, grammarAccess.getPowerOperatorAccess().getOpCircumflexAccentKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPowerOperatorRule());
				}
				setWithLastConsumed($current, "op", lv_op_0_0, "^");
			}
		)
	)
;

// Entry rule entryRuleNotOperator
entryRuleNotOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNotOperatorRule()); }
	iv_ruleNotOperator=ruleNotOperator
	{ $current=$iv_ruleNotOperator.current; }
	EOF;

// Rule NotOperator
ruleNotOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_op_0_1=NAO
				{
					newLeafNode(lv_op_0_1, grammarAccess.getNotOperatorAccess().getOpNAOKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_1, null);
				}
				    |
				lv_op_0_2=HyphenMinus
				{
					newLeafNode(lv_op_0_2, grammarAccess.getNotOperatorAccess().getOpHyphenMinusKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNotOperatorRule());
					}
					setWithLastConsumed($current, "op", lv_op_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleUnaryOperation
entryRuleUnaryOperation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryOperationRule()); }
	iv_ruleUnaryOperation=ruleUnaryOperation
	{ $current=$iv_ruleUnaryOperation.current; }
	EOF;

// Rule UnaryOperation
ruleUnaryOperation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryOperationAccess().getUnaryOperationAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryOperationAccess().getOpNotOperatorParserRuleCall_0_1_0());
					}
					lv_op_1_0=ruleNotOperator
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
						}
						set(
							$current,
							"op",
							lv_op_1_0,
							"org.hopper.language.Portugol.NotOperator");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryOperationAccess().getOperandUnaryOperationParserRuleCall_0_2_0());
					}
					lv_operand_2_0=ruleUnaryOperation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryOperationRule());
						}
						set(
							$current,
							"operand",
							lv_operand_2_0,
							"org.hopper.language.Portugol.UnaryOperation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnaryOperationAccess().getPrimaryExpressionParserRuleCall_1());
		}
		this_PrimaryExpression_3=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_0());
		}
		this_Literal_0=ruleLiteral
		{
			$current = $this_Literal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getPreDefinedFunctionCallParserRuleCall_1());
		}
		this_PreDefinedFunctionCall_1=rulePreDefinedFunctionCall
		{
			$current = $this_PreDefinedFunctionCall_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_2());
		}
		this_FunctionCall_2=ruleFunctionCall
		{
			$current = $this_FunctionCall_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getDeclaredVarParserRuleCall_3());
		}
		this_DeclaredVar_3=ruleDeclaredVar
		{
			$current = $this_DeclaredVar_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_4=LeftParenthesis
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_4_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_4_1());
			}
			this_Expression_5=ruleExpression
			{
				$current = $this_Expression_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6=RightParenthesis
			{
				newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_4_2());
			}
		)
	)
;

// Entry rule entryRulePreDefinedFunctionCall
entryRulePreDefinedFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPreDefinedFunctionCallRule()); }
	iv_rulePreDefinedFunctionCall=rulePreDefinedFunctionCall
	{ $current=$iv_rulePreDefinedFunctionCall.current; }
	EOF;

// Rule PreDefinedFunctionCall
rulePreDefinedFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getPreDefinedFunctionCallAccess().getPreDefFunctionNamePredefineFunctionsParserRuleCall_0_0());
				}
				lv_preDefFunctionName_0_0=rulePredefineFunctions
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreDefinedFunctionCallRule());
					}
					set(
						$current,
						"preDefFunctionName",
						lv_preDefFunctionName_0_0,
						"org.hopper.language.Portugol.PredefineFunctions");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=LeftParenthesis
		{
			newLeafNode(otherlv_1, grammarAccess.getPreDefinedFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPreDefinedFunctionCallAccess().getParamSubprogramParamParserRuleCall_2_0());
				}
				lv_param_2_0=ruleSubprogramParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPreDefinedFunctionCallRule());
					}
					set(
						$current,
						"param",
						lv_param_2_0,
						"org.hopper.language.Portugol.SubprogramParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=RightParenthesis
		{
			newLeafNode(otherlv_3, grammarAccess.getPreDefinedFunctionCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFunctionCallAccess().getFunctionCallAction_0(),
					$current);
			}
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getFbNameFunctionNameCrossReference_1_0());
				}
			)
		)
		otherlv_2=LeftParenthesis
		{
			newLeafNode(otherlv_2, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getParamSubprogramParamParserRuleCall_3_0());
				}
				lv_param_3_0=ruleSubprogramParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
					}
					set(
						$current,
						"param",
						lv_param_3_0,
						"org.hopper.language.Portugol.SubprogramParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=RightParenthesis
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRulePredefineFunctions
entryRulePredefineFunctions returns [String current=null]:
	{ newCompositeNode(grammarAccess.getPredefineFunctionsRule()); }
	iv_rulePredefineFunctions=rulePredefineFunctions
	{ $current=$iv_rulePredefineFunctions.current.getText(); }
	EOF;

// Rule PredefineFunctions
rulePredefineFunctions returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw=Maiusc
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPredefineFunctionsAccess().getMaiuscKeyword_0());
		}
		    |
		kw=Compr
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPredefineFunctionsAccess().getComprKeyword_1());
		}
		    |
		kw=Raizq
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPredefineFunctionsAccess().getRaizqKeyword_2());
		}
		    |
		kw=Copia
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getPredefineFunctionsAccess().getCopiaKeyword_3());
		}
	)
;

// Entry rule entryRuleLiteral
entryRuleLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLiteralRule()); }
	iv_ruleLiteral=ruleLiteral
	{ $current=$iv_ruleLiteral.current; }
	EOF;

// Rule Literal
ruleLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0());
		}
		this_NumericLiteral_0=ruleNumericLiteral
		{
			$current = $this_NumericLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_1());
		}
		this_StringLiteral_1=ruleStringLiteral
		{
			$current = $this_StringLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_2());
		}
		this_BooleanLiteral_2=ruleBooleanLiteral
		{
			$current = $this_BooleanLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDeclaredVar
entryRuleDeclaredVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaredVarRule()); }
	iv_ruleDeclaredVar=ruleDeclaredVar
	{ $current=$iv_ruleDeclaredVar.current; }
	EOF;

// Rule DeclaredVar
ruleDeclaredVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDeclaredVarRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getDeclaredVarAccess().getVarNameVarNameCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	iv_ruleBooleanLiteral=ruleBooleanLiteral
	{ $current=$iv_ruleBooleanLiteral.current; }
	EOF;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1=Verdadeiro
				{
					newLeafNode(lv_value_0_1, grammarAccess.getBooleanLiteralAccess().getValueVerdadeiroKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2=Falso
				{
					newLeafNode(lv_value_0_2, grammarAccess.getBooleanLiteralAccess().getValueFalsoKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanLiteralRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	iv_ruleNumericLiteral=ruleNumericLiteral
	{ $current=$iv_ruleNumericLiteral.current; }
	EOF;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current = $this_IntLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericLiteralAccess().getFloatLiteralParserRuleCall_1());
		}
		this_FloatLiteral_1=ruleFloatLiteral
		{
			$current = $this_FloatLiteral_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getNumericLiteralAccess().getPiLiteralParserRuleCall_2());
		}
		this_PiLiteral_2=rulePiLiteral
		{
			$current = $this_PiLiteral_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFloatLiteral
entryRuleFloatLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFloatLiteralRule()); }
	iv_ruleFloatLiteral=ruleFloatLiteral
	{ $current=$iv_ruleFloatLiteral.current; }
	EOF;

// Rule FloatLiteral
ruleFloatLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_FLOAT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getFloatLiteralAccess().getValueFLOATTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFloatLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.hopper.language.Portugol.FLOAT");
			}
		)
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getIntLiteralAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStringLiteral
entryRuleStringLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringLiteralRule()); }
	iv_ruleStringLiteral=ruleStringLiteral
	{ $current=$iv_ruleStringLiteral.current; }
	EOF;

// Rule StringLiteral
ruleStringLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringLiteralAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRulePiLiteral
entryRulePiLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPiLiteralRule()); }
	iv_rulePiLiteral=rulePiLiteral
	{ $current=$iv_rulePiLiteral.current; }
	EOF;

// Rule PiLiteral
rulePiLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=Pi
			{
				newLeafNode(lv_value_0_0, grammarAccess.getPiLiteralAccess().getValuePiKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getPiLiteralRule());
				}
				setWithLastConsumed($current, "value", lv_value_0_0, "pi");
			}
		)
	)
;

// Entry rule entryRuleEND_COMMAND
entryRuleEND_COMMAND returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEND_COMMANDRule()); }
	iv_ruleEND_COMMAND=ruleEND_COMMAND
	{ $current=$iv_ruleEND_COMMAND.current.getText(); }
	EOF;

// Rule END_COMMAND
ruleEND_COMMAND returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=Semicolon
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getEND_COMMANDAccess().getSemicolonKeyword());
	}
;
