/*
 * generated by Xtext 2.9.0
 */
grammar InternalPortugol;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.hopper.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.hopper.language.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.hopper.language.services.PortugolGrammarAccess;

}

@parser::members {

 	private PortugolGrammarAccess grammarAccess;

    public InternalPortugolParser(TokenStream input, PortugolGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected PortugolGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getHeaderHeaderBlockParserRuleCall_0_0());
				}
				lv_header_0_0=ruleHeaderBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"header",
						lv_header_0_0,
						"org.hopper.language.Portugol.HeaderBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getGlobalDeclarationsDeclarationsBlockParserRuleCall_1_0());
				}
				lv_globalDeclarations_1_0=ruleDeclarationsBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"globalDeclarations",
						lv_globalDeclarations_1_0,
						"org.hopper.language.Portugol.DeclarationsBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getSubprogramsSubprogramsParserRuleCall_2_0());
				}
				lv_subprograms_2_0=ruleSubprograms
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"subprograms",
						lv_subprograms_2_0,
						"org.hopper.language.Portugol.Subprograms");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getCommandsBlockCommandParserRuleCall_3_0());
				}
				lv_commands_3_0=ruleBlockCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"commands",
						lv_commands_3_0,
						"org.hopper.language.Portugol.BlockCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHeaderBlock
entryRuleHeaderBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderBlockRule()); }
	iv_ruleHeaderBlock=ruleHeaderBlock
	{ $current=$iv_ruleHeaderBlock.current; }
	EOF;

// Rule HeaderBlock
ruleHeaderBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='algoritmo'
		{
			newLeafNode(otherlv_0, grammarAccess.getHeaderBlockAccess().getAlgoritmoKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getHeaderBlockAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHeaderBlockRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		this_END_COMMAND_2=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_2, grammarAccess.getHeaderBlockAccess().getEND_COMMANDTerminalRuleCall_2());
		}
	)
;

// Entry rule entryRuleDeclarationsBlock
entryRuleDeclarationsBlock returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclarationsBlockRule()); }
	iv_ruleDeclarationsBlock=ruleDeclarationsBlock
	{ $current=$iv_ruleDeclarationsBlock.current; }
	EOF;

// Rule DeclarationsBlock
ruleDeclarationsBlock returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getDeclarationsBlockAccess().getVarKeyword_0());
		}
		this_END_COMMAND_1=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_1, grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDTerminalRuleCall_1());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDeclarationsBlockAccess().getVarsVariableParserRuleCall_2_0_0());
					}
					lv_vars_2_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDeclarationsBlockRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"org.hopper.language.Portugol.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			this_END_COMMAND_3=RULE_END_COMMAND
			{
				newLeafNode(this_END_COMMAND_3, grammarAccess.getDeclarationsBlockAccess().getEND_COMMANDTerminalRuleCall_2_1());
			}
		)+
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getVarDeclarationVarDeclarationParserRuleCall_0_0());
				}
				lv_varDeclaration_0_0=ruleVarDeclaration
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"varDeclaration",
						lv_varDeclaration_0_0,
						"org.hopper.language.Portugol.VarDeclaration");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1=':'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getColonKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getTypeVarTypeParserRuleCall_2_0());
				}
				lv_type_2_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_2_0,
						"org.hopper.language.Portugol.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVarDeclaration
entryRuleVarDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarDeclarationRule()); }
	iv_ruleVarDeclaration=ruleVarDeclaration
	{ $current=$iv_ruleVarDeclaration.current; }
	EOF;

// Rule VarDeclaration
ruleVarDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_0_0());
				}
				lv_vars_0_0=ruleVarName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
					}
					add(
						$current,
						"vars",
						lv_vars_0_0,
						"org.hopper.language.Portugol.VarName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVarDeclarationAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVarDeclarationAccess().getVarsVarNameParserRuleCall_1_1_0());
					}
					lv_vars_2_0=ruleVarName
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVarDeclarationRule());
						}
						add(
							$current,
							"vars",
							lv_vars_2_0,
							"org.hopper.language.Portugol.VarName");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleDeclaredVar
entryRuleDeclaredVar returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDeclaredVarRule()); }
	iv_ruleDeclaredVar=ruleDeclaredVar
	{ $current=$iv_ruleDeclaredVar.current; }
	EOF;

// Rule DeclaredVar
ruleDeclaredVar returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDeclaredVarRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getDeclaredVarAccess().getVarsVarNameCrossReference_0_0());
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getDeclaredVarAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDeclaredVarRule());
						}
					}
					otherlv_2=RULE_ID
					{
						newLeafNode(otherlv_2, grammarAccess.getDeclaredVarAccess().getVarsVarNameCrossReference_1_1_0());
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleVarName
entryRuleVarName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarNameRule()); }
	iv_ruleVarName=ruleVarName
	{ $current=$iv_ruleVarName.current; }
	EOF;

// Rule VarName
ruleVarName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getVarNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getVarNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleVarType
entryRuleVarType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarTypeRule()); }
	iv_ruleVarType=ruleVarType
	{ $current=$iv_ruleVarType.current; }
	EOF;

// Rule VarType
ruleVarType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_typeName_0_1='real'
				{
					newLeafNode(lv_typeName_0_1, grammarAccess.getVarTypeAccess().getTypeNameRealKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_1, null);
				}
				    |
				lv_typeName_0_2='inteiro'
				{
					newLeafNode(lv_typeName_0_2, grammarAccess.getVarTypeAccess().getTypeNameInteiroKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_2, null);
				}
				    |
				lv_typeName_0_3='caractere'
				{
					newLeafNode(lv_typeName_0_3, grammarAccess.getVarTypeAccess().getTypeNameCaractereKeyword_0_2());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarTypeRule());
					}
					setWithLastConsumed($current, "typeName", lv_typeName_0_3, null);
				}
			)
		)
	)
;

// Entry rule entryRuleSubprograms
entryRuleSubprograms returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubprogramsRule()); }
	iv_ruleSubprograms=ruleSubprograms
	{ $current=$iv_ruleSubprograms.current; }
	EOF;

// Rule Subprograms
ruleSubprograms returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getSubprogramsAccess().getBlockSubProgramsBlockSubProgramsParserRuleCall_0());
			}
			lv_blockSubPrograms_0_0=ruleBlockSubPrograms
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getSubprogramsRule());
				}
				add(
					$current,
					"blockSubPrograms",
					lv_blockSubPrograms_0_0,
					"org.hopper.language.Portugol.BlockSubPrograms");
				afterParserOrEnumRuleCall();
			}
		)
	)+
;

// Entry rule entryRuleBlockSubPrograms
entryRuleBlockSubPrograms returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockSubProgramsRule()); }
	iv_ruleBlockSubPrograms=ruleBlockSubPrograms
	{ $current=$iv_ruleBlockSubPrograms.current; }
	EOF;

// Rule BlockSubPrograms
ruleBlockSubPrograms returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBlockSubProgramsAccess().getBlockFunctionParserRuleCall_0());
		}
		this_BlockFunction_0=ruleBlockFunction
		{
			$current = $this_BlockFunction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBlockSubProgramsAccess().getBlockProcedureParserRuleCall_1());
		}
		this_BlockProcedure_1=ruleBlockProcedure
		{
			$current = $this_BlockProcedure_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionName
entryRuleFunctionName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionNameRule()); }
	iv_ruleFunctionName=ruleFunctionName
	{ $current=$iv_ruleFunctionName.current; }
	EOF;

// Rule FunctionName
ruleFunctionName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getFunctionNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getFunctionNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleProcedureName
entryRuleProcedureName returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProcedureNameRule()); }
	iv_ruleProcedureName=ruleProcedureName
	{ $current=$iv_ruleProcedureName.current; }
	EOF;

// Rule ProcedureName
ruleProcedureName returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getProcedureNameAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getProcedureNameRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleBlockFunction
entryRuleBlockFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockFunctionRule()); }
	iv_ruleBlockFunction=ruleBlockFunction
	{ $current=$iv_ruleBlockFunction.current; }
	EOF;

// Rule BlockFunction
ruleBlockFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='funcao'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockFunctionAccess().getFuncaoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getFunctionNameFunctionNameParserRuleCall_1_0());
				}
				lv_functionName_1_0=ruleFunctionName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"functionName",
						lv_functionName_1_0,
						"org.hopper.language.Portugol.FunctionName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockFunctionAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getParamListVariableParserRuleCall_3_0());
				}
				lv_paramList_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"paramList",
						lv_paramList_3_0,
						"org.hopper.language.Portugol.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockFunctionAccess().getRightParenthesisKeyword_4());
		}
		otherlv_5=':'
		{
			newLeafNode(otherlv_5, grammarAccess.getBlockFunctionAccess().getColonKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getReturnTypeVarTypeParserRuleCall_6_0());
				}
				lv_returnType_6_0=ruleVarType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"returnType",
						lv_returnType_6_0,
						"org.hopper.language.Portugol.VarType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		this_END_COMMAND_7=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_7, grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_7());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getDeclarationsDeclarationsBlockParserRuleCall_8_0());
				}
				lv_declarations_8_0=ruleDeclarationsBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					set(
						$current,
						"declarations",
						lv_declarations_8_0,
						"org.hopper.language.Portugol.DeclarationsBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_9='inicio'
		{
			newLeafNode(otherlv_9, grammarAccess.getBlockFunctionAccess().getInicioKeyword_9());
		}
		this_END_COMMAND_10=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_10, grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockFunctionAccess().getCommandsAbstractCommandParserRuleCall_11_0());
				}
				lv_commands_11_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockFunctionRule());
					}
					add(
						$current,
						"commands",
						lv_commands_11_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_12='fimfuncao'
		{
			newLeafNode(otherlv_12, grammarAccess.getBlockFunctionAccess().getFimfuncaoKeyword_12());
		}
		this_END_COMMAND_13=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_13, grammarAccess.getBlockFunctionAccess().getEND_COMMANDTerminalRuleCall_13());
		}
	)
;

// Entry rule entryRuleBlockProcedure
entryRuleBlockProcedure returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockProcedureRule()); }
	iv_ruleBlockProcedure=ruleBlockProcedure
	{ $current=$iv_ruleBlockProcedure.current; }
	EOF;

// Rule BlockProcedure
ruleBlockProcedure returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='procedimento'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockProcedureAccess().getProcedimentoKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getProcedureProcedureNameParserRuleCall_1_0());
				}
				lv_procedure_1_0=ruleProcedureName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					set(
						$current,
						"procedure",
						lv_procedure_1_0,
						"org.hopper.language.Portugol.ProcedureName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getBlockProcedureAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getParamListVariableParserRuleCall_3_0());
				}
				lv_paramList_3_0=ruleVariable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					set(
						$current,
						"paramList",
						lv_paramList_3_0,
						"org.hopper.language.Portugol.Variable");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getBlockProcedureAccess().getRightParenthesisKeyword_4());
		}
		this_END_COMMAND_5=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_5, grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getDeclarationsDeclarationsBlockParserRuleCall_6_0());
				}
				lv_declarations_6_0=ruleDeclarationsBlock
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					set(
						$current,
						"declarations",
						lv_declarations_6_0,
						"org.hopper.language.Portugol.DeclarationsBlock");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_7='inicio'
		{
			newLeafNode(otherlv_7, grammarAccess.getBlockProcedureAccess().getInicioKeyword_7());
		}
		this_END_COMMAND_8=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_8, grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_8());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockProcedureAccess().getCommandsAbstractCommandParserRuleCall_9_0());
				}
				lv_commands_9_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockProcedureRule());
					}
					add(
						$current,
						"commands",
						lv_commands_9_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_10='fimprocedimento'
		{
			newLeafNode(otherlv_10, grammarAccess.getBlockProcedureAccess().getFimprocedimentoKeyword_10());
		}
		this_END_COMMAND_11=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_11, grammarAccess.getBlockProcedureAccess().getEND_COMMANDTerminalRuleCall_11());
		}
	)
;

// Entry rule entryRuleBlockCommand
entryRuleBlockCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBlockCommandRule()); }
	iv_ruleBlockCommand=ruleBlockCommand
	{ $current=$iv_ruleBlockCommand.current; }
	EOF;

// Rule BlockCommand
ruleBlockCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='inicio'
		{
			newLeafNode(otherlv_0, grammarAccess.getBlockCommandAccess().getInicioKeyword_0());
		}
		this_END_COMMAND_1=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_1, grammarAccess.getBlockCommandAccess().getEND_COMMANDTerminalRuleCall_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBlockCommandAccess().getCommandsAbstractCommandParserRuleCall_2_0());
				}
				lv_commands_2_0=ruleAbstractCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBlockCommandRule());
					}
					add(
						$current,
						"commands",
						lv_commands_2_0,
						"org.hopper.language.Portugol.AbstractCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		otherlv_3='fimalgoritmo'
		{
			newLeafNode(otherlv_3, grammarAccess.getBlockCommandAccess().getFimalgoritmoKeyword_3());
		}
		this_END_COMMAND_4=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_4, grammarAccess.getBlockCommandAccess().getEND_COMMANDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleAbstractCommand
entryRuleAbstractCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbstractCommandRule()); }
	iv_ruleAbstractCommand=ruleAbstractCommand
	{ $current=$iv_ruleAbstractCommand.current; }
	EOF;

// Rule AbstractCommand
ruleAbstractCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAbstractCommandAccess().getReadCommandParserRuleCall_0());
		}
		this_ReadCommand_0=ruleReadCommand
		{
			$current = $this_ReadCommand_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getAbstractCommandAccess().getWriteCommandParserRuleCall_1());
		}
		this_WriteCommand_1=ruleWriteCommand
		{
			$current = $this_WriteCommand_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleReadCommand
entryRuleReadCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getReadCommandRule()); }
	iv_ruleReadCommand=ruleReadCommand
	{ $current=$iv_ruleReadCommand.current; }
	EOF;

// Rule ReadCommand
ruleReadCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='leia'
		{
			newLeafNode(otherlv_0, grammarAccess.getReadCommandAccess().getLeiaKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getReadCommandAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getReadCommandAccess().getParamListDeclaredVarParserRuleCall_2_0());
				}
				lv_paramList_2_0=ruleDeclaredVar
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getReadCommandRule());
					}
					set(
						$current,
						"paramList",
						lv_paramList_2_0,
						"org.hopper.language.Portugol.DeclaredVar");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getReadCommandAccess().getRightParenthesisKeyword_3());
		}
		this_END_COMMAND_4=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_4, grammarAccess.getReadCommandAccess().getEND_COMMANDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleWriteCommand
entryRuleWriteCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWriteCommandRule()); }
	iv_ruleWriteCommand=ruleWriteCommand
	{ $current=$iv_ruleWriteCommand.current; }
	EOF;

// Rule WriteCommand
ruleWriteCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='escreva'
		{
			newLeafNode(otherlv_0, grammarAccess.getWriteCommandAccess().getEscrevaKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getWriteCommandAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWriteCommandAccess().getWriteParamWriteParamParserRuleCall_2_0());
				}
				lv_writeParam_2_0=ruleWriteParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWriteCommandRule());
					}
					set(
						$current,
						"writeParam",
						lv_writeParam_2_0,
						"org.hopper.language.Portugol.WriteParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getWriteCommandAccess().getRightParenthesisKeyword_3());
		}
		this_END_COMMAND_4=RULE_END_COMMAND
		{
			newLeafNode(this_END_COMMAND_4, grammarAccess.getWriteCommandAccess().getEND_COMMANDTerminalRuleCall_4());
		}
	)
;

// Entry rule entryRuleWriteParam
entryRuleWriteParam returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWriteParamRule()); }
	iv_ruleWriteParam=ruleWriteParam
	{ $current=$iv_ruleWriteParam.current; }
	EOF;

// Rule WriteParam
ruleWriteParam returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getWriteParamAccess().getExpressionExpressionParserRuleCall_0_0());
				}
				lv_expression_0_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWriteParamRule());
					}
					add(
						$current,
						"expression",
						lv_expression_0_0,
						"org.hopper.language.Portugol.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getWriteParamAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getWriteParamAccess().getExpressionExpressionParserRuleCall_1_1_0());
					}
					lv_expression_2_0=ruleExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getWriteParamRule());
						}
						add(
							$current,
							"expression",
							lv_expression_2_0,
							"org.hopper.language.Portugol.Expression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getWriteParamAccess().getPrecisionOptDecimalPrecisionParserRuleCall_2_0());
				}
				lv_precision_3_0=ruleOptDecimalPrecision
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWriteParamRule());
					}
					set(
						$current,
						"precision",
						lv_precision_3_0,
						"org.hopper.language.Portugol.OptDecimalPrecision");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getXorExpressionParserRuleCall_0());
		}
		this_XorExpression_0=ruleXorExpression
		{
			$current = $this_XorExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getExpressionAccess().getExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						lv_op_2_0='OR'
						{
							newLeafNode(lv_op_2_0, grammarAccess.getExpressionAccess().getOpORKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_0, "OR");
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightXorExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleXorExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.XorExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleXorExpression
entryRuleXorExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getXorExpressionRule()); }
	iv_ruleXorExpression=ruleXorExpression
	{ $current=$iv_ruleXorExpression.current; }
	EOF;

// Rule XorExpression
ruleXorExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getXorExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getXorExpressionAccess().getXorExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						lv_op_2_0='XOR'
						{
							newLeafNode(lv_op_2_0, grammarAccess.getXorExpressionAccess().getOpXORKeyword_1_0_1_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getXorExpressionRule());
							}
							setWithLastConsumed($current, "op", lv_op_2_0, "XOR");
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getXorExpressionAccess().getRightAndExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getXorExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='&'
							{
								newLeafNode(lv_op_2_1, grammarAccess.getAndExpressionAccess().getOpAmpersandKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAndExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='AND'
							{
								newLeafNode(lv_op_2_2, grammarAccess.getAndExpressionAccess().getOpANDKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getAndExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getComparisonAccess().getEquExpressionParserRuleCall_0());
		}
		this_EquExpression_0=ruleEquExpression
		{
			$current = $this_EquExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getComparisonAccess().getCompExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='='
							{
								newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpEqualsSignKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='<>'
							{
								newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignGreaterThanSignKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getComparisonRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getComparisonAccess().getRightEquExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleEquExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparisonRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.EquExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleEquExpression
entryRuleEquExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEquExpressionRule()); }
	iv_ruleEquExpression=ruleEquExpression
	{ $current=$iv_ruleEquExpression.current; }
	EOF;

// Rule EquExpression
ruleEquExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getEquExpressionAccess().getAddExpressionParserRuleCall_0());
		}
		this_AddExpression_0=ruleAddExpression
		{
			$current = $this_AddExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						$current = forceCreateModelElementAndSet(
							grammarAccess.getEquExpressionAccess().getEquExpressionLeftAction_1_0_0(),
							$current);
					}
				)
				(
					(
						(
							lv_op_2_1='<'
							{
								newLeafNode(lv_op_2_1, grammarAccess.getEquExpressionAccess().getOpLessThanSignKeyword_1_0_1_0_0());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEquExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_1, null);
							}
							    |
							lv_op_2_2='>'
							{
								newLeafNode(lv_op_2_2, grammarAccess.getEquExpressionAccess().getOpGreaterThanSignKeyword_1_0_1_0_1());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEquExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_2, null);
							}
							    |
							lv_op_2_3='<='
							{
								newLeafNode(lv_op_2_3, grammarAccess.getEquExpressionAccess().getOpLessThanSignEqualsSignKeyword_1_0_1_0_2());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEquExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_3, null);
							}
							    |
							lv_op_2_4='>='
							{
								newLeafNode(lv_op_2_4, grammarAccess.getEquExpressionAccess().getOpGreaterThanSignEqualsSignKeyword_1_0_1_0_3());
							}
							{
								if ($current==null) {
									$current = createModelElement(grammarAccess.getEquExpressionRule());
								}
								setWithLastConsumed($current, "op", lv_op_2_4, null);
							}
						)
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getEquExpressionAccess().getRightAddExpressionParserRuleCall_1_1_0());
					}
					lv_right_3_0=ruleAddExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEquExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.AddExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAddExpression
entryRuleAddExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddExpressionRule()); }
	iv_ruleAddExpression=ruleAddExpression
	{ $current=$iv_ruleAddExpression.current; }
	EOF;

// Rule AddExpression
ruleAddExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAddExpressionAccess().getTermParserRuleCall_0());
		}
		this_Term_0=ruleTerm
		{
			$current = $this_Term_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAddExpressionAccess().getAddExpressionLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='+'
					{
						newLeafNode(otherlv_2, grammarAccess.getAddExpressionAccess().getPlusSignKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getAddExpressionAccess().getSubExpressionLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='-'
					{
						newLeafNode(otherlv_4, grammarAccess.getAddExpressionAccess().getHyphenMinusKeyword_1_0_1_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAddExpressionAccess().getRightTermParserRuleCall_1_1_0());
					}
					lv_right_5_0=ruleTerm
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAddExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_5_0,
							"org.hopper.language.Portugol.Term");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	iv_ruleTerm=ruleTerm
	{ $current=$iv_ruleTerm.current; }
	EOF;

// Rule Term
ruleTerm returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getTermAccess().getPowerExpressionParserRuleCall_0());
		}
		this_PowerExpression_0=rulePowerExpression
		{
			$current = $this_PowerExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getTermAccess().getMultiplyLeftAction_1_0_0_0(),
								$current);
						}
					)
					otherlv_2='*'
					{
						newLeafNode(otherlv_2, grammarAccess.getTermAccess().getAsteriskKeyword_1_0_0_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getTermAccess().getDivisionLeftAction_1_0_1_0(),
								$current);
						}
					)
					otherlv_4='/'
					{
						newLeafNode(otherlv_4, grammarAccess.getTermAccess().getSolidusKeyword_1_0_1_1());
					}
				)
				    |
				(
					(
						{
							$current = forceCreateModelElementAndSet(
								grammarAccess.getTermAccess().getModLeftAction_1_0_2_0(),
								$current);
						}
					)
					otherlv_6='MOD'
					{
						newLeafNode(otherlv_6, grammarAccess.getTermAccess().getMODKeyword_1_0_2_1());
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getTermAccess().getRightPowerExpressionParserRuleCall_1_1_0());
					}
					lv_right_7_0=rulePowerExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTermRule());
						}
						set(
							$current,
							"right",
							lv_right_7_0,
							"org.hopper.language.Portugol.PowerExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePowerExpression
entryRulePowerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPowerExpressionRule()); }
	iv_rulePowerExpression=rulePowerExpression
	{ $current=$iv_rulePowerExpression.current; }
	EOF;

// Rule PowerExpression
rulePowerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPowerExpressionAccess().getUnaryExpressionParserRuleCall_0());
		}
		this_UnaryExpression_0=ruleUnaryExpression
		{
			$current = $this_UnaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getPowerExpressionAccess().getPowerExpressionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					lv_op_2_0='^'
					{
						newLeafNode(lv_op_2_0, grammarAccess.getPowerExpressionAccess().getOpCircumflexAccentKeyword_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPowerExpressionRule());
						}
						setWithLastConsumed($current, "op", lv_op_2_0, "^");
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPowerExpressionAccess().getRightUnaryExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleUnaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPowerExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.hopper.language.Portugol.UnaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleUnaryExpression
entryRuleUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getUnaryExpressionRule()); }
	iv_ruleUnaryExpression=ruleUnaryExpression
	{ $current=$iv_ruleUnaryExpression.current; }
	EOF;

// Rule UnaryExpression
ruleUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryExpressionAccess().getBooleanNegationAction_0_0(),
						$current);
				}
			)
			(
				('NOT')=>
				otherlv_1='NOT'
				{
					newLeafNode(otherlv_1, grammarAccess.getUnaryExpressionAccess().getNOTKeyword_0_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_0_2_0());
					}
					lv_expression_2_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_2_0,
							"org.hopper.language.Portugol.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getUnaryExpressionAccess().getArithmeticSignedAction_1_0(),
						$current);
				}
			)
			(
				('-')=>
				otherlv_4='-'
				{
					newLeafNode(otherlv_4, grammarAccess.getUnaryExpressionAccess().getHyphenMinusKeyword_1_1());
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getUnaryExpressionAccess().getExpressionPrimaryExpressionParserRuleCall_1_2_0());
					}
					lv_expression_5_0=rulePrimaryExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getUnaryExpressionRule());
						}
						set(
							$current,
							"expression",
							lv_expression_5_0,
							"org.hopper.language.Portugol.PrimaryExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		{
			newCompositeNode(grammarAccess.getUnaryExpressionAccess().getPrimaryExpressionParserRuleCall_2());
		}
		this_PrimaryExpression_6=rulePrimaryExpression
		{
			$current = $this_PrimaryExpression_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryExpressionRule()); }
	iv_rulePrimaryExpression=rulePrimaryExpression
	{ $current=$iv_rulePrimaryExpression.current; }
	EOF;

// Rule PrimaryExpression
rulePrimaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getExpressionConstantAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getValueConstantParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleConstant
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPrimaryExpressionRule());
						}
						set(
							$current,
							"value",
							lv_value_1_0,
							"org.hopper.language.Portugol.Constant");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getPrimaryExpressionAccess().getExpressionVariableAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryExpressionRule());
						}
					}
					otherlv_3=RULE_ID
					{
						newLeafNode(otherlv_3, grammarAccess.getPrimaryExpressionAccess().getValueVarNameCrossReference_1_1_0());
					}
				)
			)
		)
		    |
		(
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getExpressionParserRuleCall_2_1());
			}
			this_Expression_5=ruleExpression
			{
				$current = $this_Expression_5.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryExpressionAccess().getFunctionCallParserRuleCall_3());
		}
		this_FunctionCall_7=ruleFunctionCall
		{
			$current = $this_FunctionCall_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleFunctionCall
entryRuleFunctionCall returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionCallRule()); }
	iv_ruleFunctionCall=ruleFunctionCall
	{ $current=$iv_ruleFunctionCall.current; }
	EOF;

// Rule FunctionCall
ruleFunctionCall returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionCallRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getFunctionCallAccess().getFbNameFunctionNameCrossReference_0_0());
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionCallAccess().getParamWriteParamParserRuleCall_2_0());
				}
				lv_param_2_0=ruleWriteParam
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionCallRule());
					}
					set(
						$current,
						"param",
						lv_param_2_0,
						"org.hopper.language.Portugol.WriteParam");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleOptDecimalPrecision
entryRuleOptDecimalPrecision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptDecimalPrecisionRule()); }
	iv_ruleOptDecimalPrecision=ruleOptDecimalPrecision
	{ $current=$iv_ruleOptDecimalPrecision.current; }
	EOF;

// Rule OptDecimalPrecision
ruleOptDecimalPrecision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0=':'
		{
			newLeafNode(otherlv_0, grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_0());
		}
		(
			(
				lv_firstPrecision_1_0=RULE_INT
				{
					newLeafNode(lv_firstPrecision_1_0, grammarAccess.getOptDecimalPrecisionAccess().getFirstPrecisionINTTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOptDecimalPrecisionRule());
					}
					setWithLastConsumed(
						$current,
						"firstPrecision",
						lv_firstPrecision_1_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_2=':'
			{
				newLeafNode(otherlv_2, grammarAccess.getOptDecimalPrecisionAccess().getColonKeyword_2_0());
			}
			(
				(
					lv_secondPrecision_3_0=RULE_INT
					{
						newLeafNode(lv_secondPrecision_3_0, grammarAccess.getOptDecimalPrecisionAccess().getSecondPrecisionINTTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOptDecimalPrecisionRule());
						}
						setWithLastConsumed(
							$current,
							"secondPrecision",
							lv_secondPrecision_3_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantAccess().getNumericLiteralParserRuleCall_0());
		}
		this_NumericLiteral_0=ruleNumericLiteral
		{
			$current = $this_NumericLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getStringExpressionParserRuleCall_1());
		}
		this_StringExpression_1=ruleStringExpression
		{
			$current = $this_StringExpression_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleNumericLiteral
entryRuleNumericLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumericLiteralRule()); }
	iv_ruleNumericLiteral=ruleNumericLiteral
	{ $current=$iv_ruleNumericLiteral.current; }
	EOF;

// Rule NumericLiteral
ruleNumericLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_intValue_0_0=RULE_INT
				{
					newLeafNode(lv_intValue_0_0, grammarAccess.getNumericLiteralAccess().getIntValueINTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumericLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"intValue",
						true,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		    |
		(
			(
				lv_floatValue_1_0=RULE_FLOAT
				{
					newLeafNode(lv_floatValue_1_0, grammarAccess.getNumericLiteralAccess().getFloatValueFLOATTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNumericLiteralRule());
					}
					setWithLastConsumed(
						$current,
						"floatValue",
						true,
						"org.hopper.language.Portugol.FLOAT");
				}
			)
		)
	)
;

// Entry rule entryRuleStringExpression
entryRuleStringExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringExpressionRule()); }
	iv_ruleStringExpression=ruleStringExpression
	{ $current=$iv_ruleStringExpression.current; }
	EOF;

// Rule StringExpression
ruleStringExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_literalString_0_0=RULE_STRING
			{
				newLeafNode(lv_literalString_0_0, grammarAccess.getStringExpressionAccess().getLiteralStringSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringExpressionRule());
				}
				setWithLastConsumed(
					$current,
					"literalString",
					lv_literalString_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

RULE_FLOAT : RULE_INT '.' RULE_INT;

RULE_END_COMMAND : (' '|'\t')* ('\r'|'\n')+ (' '|'\t')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
