/**
 * generated by Xtext 2.9.0
 */
package org.hopper.language.portugol.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.hopper.language.portugol.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class PortugolFactoryImpl extends EFactoryImpl implements PortugolFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static PortugolFactory init()
  {
    try
    {
      PortugolFactory thePortugolFactory = (PortugolFactory)EPackage.Registry.INSTANCE.getEFactory(PortugolPackage.eNS_URI);
      if (thePortugolFactory != null)
      {
        return thePortugolFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new PortugolFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PortugolFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case PortugolPackage.MODEL: return createModel();
      case PortugolPackage.HEADER_BLOCK: return createHeaderBlock();
      case PortugolPackage.DECLARATIONS_BLOCK: return createDeclarationsBlock();
      case PortugolPackage.VARIABLE: return createVariable();
      case PortugolPackage.VAR_DECLARATION: return createVarDeclaration();
      case PortugolPackage.DECLARED_VAR_LIST: return createDeclaredVarList();
      case PortugolPackage.VAR_NAME: return createVarName();
      case PortugolPackage.VAR_TYPE: return createVarType();
      case PortugolPackage.SUBPROGRAMS: return createSubprograms();
      case PortugolPackage.BLOCK_SUB_PROGRAMS: return createBlockSubPrograms();
      case PortugolPackage.PROCEDURE_NAME: return createProcedureName();
      case PortugolPackage.FUNCTION_NAME: return createFunctionName();
      case PortugolPackage.BLOCK_FUNCTION: return createBlockFunction();
      case PortugolPackage.BLOCK_PROCEDURE: return createBlockProcedure();
      case PortugolPackage.BLOCK_COMMAND: return createBlockCommand();
      case PortugolPackage.ABSTRACT_COMMAND: return createAbstractCommand();
      case PortugolPackage.IF_STATEMENT: return createIfStatement();
      case PortugolPackage.SWITCH_CASE_STATEMENT: return createSwitchCaseStatement();
      case PortugolPackage.CASE_LIST: return createCaseList();
      case PortugolPackage.OTHER_CASE: return createOtherCase();
      case PortugolPackage.SUBPROGRAM_PARAM: return createSubprogramParam();
      case PortugolPackage.READ_COMMAND: return createReadCommand();
      case PortugolPackage.WRITE_COMMAND: return createWriteCommand();
      case PortugolPackage.WRITE_PARAM: return createWriteParam();
      case PortugolPackage.OPT_DECIMAL_PRECISION: return createOptDecimalPrecision();
      case PortugolPackage.EXPRESSION: return createExpression();
      case PortugolPackage.DECLARED_VAR: return createDeclaredVar();
      case PortugolPackage.NUMERIC_LITERAL: return createNumericLiteral();
      case PortugolPackage.STRING_EXPRESSION: return createStringExpression();
      case PortugolPackage.BINARY_OPERATION: return createBinaryOperation();
      case PortugolPackage.UNARY_EXPRESSION: return createUnaryExpression();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HeaderBlock createHeaderBlock()
  {
    HeaderBlockImpl headerBlock = new HeaderBlockImpl();
    return headerBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclarationsBlock createDeclarationsBlock()
  {
    DeclarationsBlockImpl declarationsBlock = new DeclarationsBlockImpl();
    return declarationsBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable createVariable()
  {
    VariableImpl variable = new VariableImpl();
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarDeclaration createVarDeclaration()
  {
    VarDeclarationImpl varDeclaration = new VarDeclarationImpl();
    return varDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclaredVarList createDeclaredVarList()
  {
    DeclaredVarListImpl declaredVarList = new DeclaredVarListImpl();
    return declaredVarList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarName createVarName()
  {
    VarNameImpl varName = new VarNameImpl();
    return varName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public VarType createVarType()
  {
    VarTypeImpl varType = new VarTypeImpl();
    return varType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Subprograms createSubprograms()
  {
    SubprogramsImpl subprograms = new SubprogramsImpl();
    return subprograms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockSubPrograms createBlockSubPrograms()
  {
    BlockSubProgramsImpl blockSubPrograms = new BlockSubProgramsImpl();
    return blockSubPrograms;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcedureName createProcedureName()
  {
    ProcedureNameImpl procedureName = new ProcedureNameImpl();
    return procedureName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FunctionName createFunctionName()
  {
    FunctionNameImpl functionName = new FunctionNameImpl();
    return functionName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockFunction createBlockFunction()
  {
    BlockFunctionImpl blockFunction = new BlockFunctionImpl();
    return blockFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockProcedure createBlockProcedure()
  {
    BlockProcedureImpl blockProcedure = new BlockProcedureImpl();
    return blockProcedure;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BlockCommand createBlockCommand()
  {
    BlockCommandImpl blockCommand = new BlockCommandImpl();
    return blockCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AbstractCommand createAbstractCommand()
  {
    AbstractCommandImpl abstractCommand = new AbstractCommandImpl();
    return abstractCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IfStatement createIfStatement()
  {
    IfStatementImpl ifStatement = new IfStatementImpl();
    return ifStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SwitchCaseStatement createSwitchCaseStatement()
  {
    SwitchCaseStatementImpl switchCaseStatement = new SwitchCaseStatementImpl();
    return switchCaseStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CaseList createCaseList()
  {
    CaseListImpl caseList = new CaseListImpl();
    return caseList;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OtherCase createOtherCase()
  {
    OtherCaseImpl otherCase = new OtherCaseImpl();
    return otherCase;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubprogramParam createSubprogramParam()
  {
    SubprogramParamImpl subprogramParam = new SubprogramParamImpl();
    return subprogramParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ReadCommand createReadCommand()
  {
    ReadCommandImpl readCommand = new ReadCommandImpl();
    return readCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WriteCommand createWriteCommand()
  {
    WriteCommandImpl writeCommand = new WriteCommandImpl();
    return writeCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WriteParam createWriteParam()
  {
    WriteParamImpl writeParam = new WriteParamImpl();
    return writeParam;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public OptDecimalPrecision createOptDecimalPrecision()
  {
    OptDecimalPrecisionImpl optDecimalPrecision = new OptDecimalPrecisionImpl();
    return optDecimalPrecision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclaredVar createDeclaredVar()
  {
    DeclaredVarImpl declaredVar = new DeclaredVarImpl();
    return declaredVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NumericLiteral createNumericLiteral()
  {
    NumericLiteralImpl numericLiteral = new NumericLiteralImpl();
    return numericLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public StringExpression createStringExpression()
  {
    StringExpressionImpl stringExpression = new StringExpressionImpl();
    return stringExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BinaryOperation createBinaryOperation()
  {
    BinaryOperationImpl binaryOperation = new BinaryOperationImpl();
    return binaryOperation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public UnaryExpression createUnaryExpression()
  {
    UnaryExpressionImpl unaryExpression = new UnaryExpressionImpl();
    return unaryExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PortugolPackage getPortugolPackage()
  {
    return (PortugolPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static PortugolPackage getPackage()
  {
    return PortugolPackage.eINSTANCE;
  }

} //PortugolFactoryImpl
