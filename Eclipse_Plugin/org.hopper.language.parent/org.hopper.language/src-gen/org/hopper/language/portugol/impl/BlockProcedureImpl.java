/**
 * generated by Xtext 2.9.0
 */
package org.hopper.language.portugol.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.hopper.language.portugol.BlockProcedure;
import org.hopper.language.portugol.PortugolPackage;
import org.hopper.language.portugol.ProcedureName;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Block Procedure</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.hopper.language.portugol.impl.BlockProcedureImpl#getProcedureName <em>Procedure Name</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BlockProcedureImpl extends BlockSubProgramsImpl implements BlockProcedure
{
  /**
   * The cached value of the '{@link #getProcedureName() <em>Procedure Name</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProcedureName()
   * @generated
   * @ordered
   */
  protected ProcedureName procedureName;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BlockProcedureImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PortugolPackage.Literals.BLOCK_PROCEDURE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProcedureName getProcedureName()
  {
    return procedureName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProcedureName(ProcedureName newProcedureName, NotificationChain msgs)
  {
    ProcedureName oldProcedureName = procedureName;
    procedureName = newProcedureName;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME, oldProcedureName, newProcedureName);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProcedureName(ProcedureName newProcedureName)
  {
    if (newProcedureName != procedureName)
    {
      NotificationChain msgs = null;
      if (procedureName != null)
        msgs = ((InternalEObject)procedureName).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME, null, msgs);
      if (newProcedureName != null)
        msgs = ((InternalEObject)newProcedureName).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME, null, msgs);
      msgs = basicSetProcedureName(newProcedureName, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME, newProcedureName, newProcedureName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME:
        return basicSetProcedureName(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME:
        return getProcedureName();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME:
        setProcedureName((ProcedureName)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME:
        setProcedureName((ProcedureName)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_PROCEDURE__PROCEDURE_NAME:
        return procedureName != null;
    }
    return super.eIsSet(featureID);
  }

} //BlockProcedureImpl
