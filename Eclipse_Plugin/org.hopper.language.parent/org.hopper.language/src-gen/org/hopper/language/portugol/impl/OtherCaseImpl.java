/**
 * generated by Xtext 2.9.0
 */
package org.hopper.language.portugol.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.hopper.language.portugol.AbstractCommand;
import org.hopper.language.portugol.OtherCase;
import org.hopper.language.portugol.PortugolPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Other Case</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.hopper.language.portugol.impl.OtherCaseImpl#getOtherCaseCommands <em>Other Case Commands</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.OtherCaseImpl#isBreakStatement <em>Break Statement</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OtherCaseImpl extends MinimalEObjectImpl.Container implements OtherCase
{
  /**
   * The cached value of the '{@link #getOtherCaseCommands() <em>Other Case Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOtherCaseCommands()
   * @generated
   * @ordered
   */
  protected EList<AbstractCommand> otherCaseCommands;

  /**
   * The default value of the '{@link #isBreakStatement() <em>Break Statement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBreakStatement()
   * @generated
   * @ordered
   */
  protected static final boolean BREAK_STATEMENT_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isBreakStatement() <em>Break Statement</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isBreakStatement()
   * @generated
   * @ordered
   */
  protected boolean breakStatement = BREAK_STATEMENT_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OtherCaseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PortugolPackage.Literals.OTHER_CASE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractCommand> getOtherCaseCommands()
  {
    if (otherCaseCommands == null)
    {
      otherCaseCommands = new EObjectContainmentEList<AbstractCommand>(AbstractCommand.class, this, PortugolPackage.OTHER_CASE__OTHER_CASE_COMMANDS);
    }
    return otherCaseCommands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public boolean isBreakStatement()
  {
    return breakStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setBreakStatement(boolean newBreakStatement)
  {
    boolean oldBreakStatement = breakStatement;
    breakStatement = newBreakStatement;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.OTHER_CASE__BREAK_STATEMENT, oldBreakStatement, breakStatement));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PortugolPackage.OTHER_CASE__OTHER_CASE_COMMANDS:
        return ((InternalEList<?>)getOtherCaseCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PortugolPackage.OTHER_CASE__OTHER_CASE_COMMANDS:
        return getOtherCaseCommands();
      case PortugolPackage.OTHER_CASE__BREAK_STATEMENT:
        return isBreakStatement();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PortugolPackage.OTHER_CASE__OTHER_CASE_COMMANDS:
        getOtherCaseCommands().clear();
        getOtherCaseCommands().addAll((Collection<? extends AbstractCommand>)newValue);
        return;
      case PortugolPackage.OTHER_CASE__BREAK_STATEMENT:
        setBreakStatement((Boolean)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.OTHER_CASE__OTHER_CASE_COMMANDS:
        getOtherCaseCommands().clear();
        return;
      case PortugolPackage.OTHER_CASE__BREAK_STATEMENT:
        setBreakStatement(BREAK_STATEMENT_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.OTHER_CASE__OTHER_CASE_COMMANDS:
        return otherCaseCommands != null && !otherCaseCommands.isEmpty();
      case PortugolPackage.OTHER_CASE__BREAK_STATEMENT:
        return breakStatement != BREAK_STATEMENT_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (breakStatement: ");
    result.append(breakStatement);
    result.append(')');
    return result.toString();
  }

} //OtherCaseImpl
