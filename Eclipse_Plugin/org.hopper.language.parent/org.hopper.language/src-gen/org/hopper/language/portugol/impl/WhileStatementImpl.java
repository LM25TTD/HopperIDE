/**
 * generated by Xtext 2.9.0
 */
package org.hopper.language.portugol.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.hopper.language.portugol.AbstractCommand;
import org.hopper.language.portugol.Expression;
import org.hopper.language.portugol.PortugolPackage;
import org.hopper.language.portugol.WhileStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>While Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.hopper.language.portugol.impl.WhileStatementImpl#getWhileExpr <em>While Expr</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.WhileStatementImpl#getCommands <em>Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class WhileStatementImpl extends AbstractCommandImpl implements WhileStatement
{
  /**
   * The cached value of the '{@link #getWhileExpr() <em>While Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhileExpr()
   * @generated
   * @ordered
   */
  protected Expression whileExpr;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<AbstractCommand> commands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected WhileStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PortugolPackage.Literals.WHILE_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getWhileExpr()
  {
    return whileExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhileExpr(Expression newWhileExpr, NotificationChain msgs)
  {
    Expression oldWhileExpr = whileExpr;
    whileExpr = newWhileExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.WHILE_STATEMENT__WHILE_EXPR, oldWhileExpr, newWhileExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setWhileExpr(Expression newWhileExpr)
  {
    if (newWhileExpr != whileExpr)
    {
      NotificationChain msgs = null;
      if (whileExpr != null)
        msgs = ((InternalEObject)whileExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.WHILE_STATEMENT__WHILE_EXPR, null, msgs);
      if (newWhileExpr != null)
        msgs = ((InternalEObject)newWhileExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.WHILE_STATEMENT__WHILE_EXPR, null, msgs);
      msgs = basicSetWhileExpr(newWhileExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.WHILE_STATEMENT__WHILE_EXPR, newWhileExpr, newWhileExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractCommand> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<AbstractCommand>(AbstractCommand.class, this, PortugolPackage.WHILE_STATEMENT__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PortugolPackage.WHILE_STATEMENT__WHILE_EXPR:
        return basicSetWhileExpr(null, msgs);
      case PortugolPackage.WHILE_STATEMENT__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PortugolPackage.WHILE_STATEMENT__WHILE_EXPR:
        return getWhileExpr();
      case PortugolPackage.WHILE_STATEMENT__COMMANDS:
        return getCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PortugolPackage.WHILE_STATEMENT__WHILE_EXPR:
        setWhileExpr((Expression)newValue);
        return;
      case PortugolPackage.WHILE_STATEMENT__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends AbstractCommand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.WHILE_STATEMENT__WHILE_EXPR:
        setWhileExpr((Expression)null);
        return;
      case PortugolPackage.WHILE_STATEMENT__COMMANDS:
        getCommands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.WHILE_STATEMENT__WHILE_EXPR:
        return whileExpr != null;
      case PortugolPackage.WHILE_STATEMENT__COMMANDS:
        return commands != null && !commands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //WhileStatementImpl
