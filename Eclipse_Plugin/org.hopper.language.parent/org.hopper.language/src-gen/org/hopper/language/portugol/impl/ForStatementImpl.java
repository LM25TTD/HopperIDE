/**
 * generated by Xtext 2.9.0
 */
package org.hopper.language.portugol.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.hopper.language.portugol.AbstractCommand;
import org.hopper.language.portugol.DeclaredVar;
import org.hopper.language.portugol.Expression;
import org.hopper.language.portugol.ForStatement;
import org.hopper.language.portugol.PortugolPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.hopper.language.portugol.impl.ForStatementImpl#getOperatorExpr <em>Operator Expr</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.ForStatementImpl#getStartExpr <em>Start Expr</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.ForStatementImpl#getEndExpr <em>End Expr</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.ForStatementImpl#getStepExpe <em>Step Expe</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.ForStatementImpl#getCommands <em>Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForStatementImpl extends AbstractCommandImpl implements ForStatement
{
  /**
   * The cached value of the '{@link #getOperatorExpr() <em>Operator Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOperatorExpr()
   * @generated
   * @ordered
   */
  protected DeclaredVar operatorExpr;

  /**
   * The cached value of the '{@link #getStartExpr() <em>Start Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStartExpr()
   * @generated
   * @ordered
   */
  protected Expression startExpr;

  /**
   * The cached value of the '{@link #getEndExpr() <em>End Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEndExpr()
   * @generated
   * @ordered
   */
  protected Expression endExpr;

  /**
   * The cached value of the '{@link #getStepExpe() <em>Step Expe</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStepExpe()
   * @generated
   * @ordered
   */
  protected Expression stepExpe;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<AbstractCommand> commands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PortugolPackage.Literals.FOR_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclaredVar getOperatorExpr()
  {
    return operatorExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOperatorExpr(DeclaredVar newOperatorExpr, NotificationChain msgs)
  {
    DeclaredVar oldOperatorExpr = operatorExpr;
    operatorExpr = newOperatorExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR, oldOperatorExpr, newOperatorExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setOperatorExpr(DeclaredVar newOperatorExpr)
  {
    if (newOperatorExpr != operatorExpr)
    {
      NotificationChain msgs = null;
      if (operatorExpr != null)
        msgs = ((InternalEObject)operatorExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR, null, msgs);
      if (newOperatorExpr != null)
        msgs = ((InternalEObject)newOperatorExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR, null, msgs);
      msgs = basicSetOperatorExpr(newOperatorExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR, newOperatorExpr, newOperatorExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getStartExpr()
  {
    return startExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStartExpr(Expression newStartExpr, NotificationChain msgs)
  {
    Expression oldStartExpr = startExpr;
    startExpr = newStartExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__START_EXPR, oldStartExpr, newStartExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStartExpr(Expression newStartExpr)
  {
    if (newStartExpr != startExpr)
    {
      NotificationChain msgs = null;
      if (startExpr != null)
        msgs = ((InternalEObject)startExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__START_EXPR, null, msgs);
      if (newStartExpr != null)
        msgs = ((InternalEObject)newStartExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__START_EXPR, null, msgs);
      msgs = basicSetStartExpr(newStartExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__START_EXPR, newStartExpr, newStartExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getEndExpr()
  {
    return endExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEndExpr(Expression newEndExpr, NotificationChain msgs)
  {
    Expression oldEndExpr = endExpr;
    endExpr = newEndExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__END_EXPR, oldEndExpr, newEndExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setEndExpr(Expression newEndExpr)
  {
    if (newEndExpr != endExpr)
    {
      NotificationChain msgs = null;
      if (endExpr != null)
        msgs = ((InternalEObject)endExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__END_EXPR, null, msgs);
      if (newEndExpr != null)
        msgs = ((InternalEObject)newEndExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__END_EXPR, null, msgs);
      msgs = basicSetEndExpr(newEndExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__END_EXPR, newEndExpr, newEndExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getStepExpe()
  {
    return stepExpe;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetStepExpe(Expression newStepExpe, NotificationChain msgs)
  {
    Expression oldStepExpe = stepExpe;
    stepExpe = newStepExpe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__STEP_EXPE, oldStepExpe, newStepExpe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setStepExpe(Expression newStepExpe)
  {
    if (newStepExpe != stepExpe)
    {
      NotificationChain msgs = null;
      if (stepExpe != null)
        msgs = ((InternalEObject)stepExpe).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__STEP_EXPE, null, msgs);
      if (newStepExpe != null)
        msgs = ((InternalEObject)newStepExpe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.FOR_STATEMENT__STEP_EXPE, null, msgs);
      msgs = basicSetStepExpe(newStepExpe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.FOR_STATEMENT__STEP_EXPE, newStepExpe, newStepExpe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractCommand> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<AbstractCommand>(AbstractCommand.class, this, PortugolPackage.FOR_STATEMENT__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR:
        return basicSetOperatorExpr(null, msgs);
      case PortugolPackage.FOR_STATEMENT__START_EXPR:
        return basicSetStartExpr(null, msgs);
      case PortugolPackage.FOR_STATEMENT__END_EXPR:
        return basicSetEndExpr(null, msgs);
      case PortugolPackage.FOR_STATEMENT__STEP_EXPE:
        return basicSetStepExpe(null, msgs);
      case PortugolPackage.FOR_STATEMENT__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR:
        return getOperatorExpr();
      case PortugolPackage.FOR_STATEMENT__START_EXPR:
        return getStartExpr();
      case PortugolPackage.FOR_STATEMENT__END_EXPR:
        return getEndExpr();
      case PortugolPackage.FOR_STATEMENT__STEP_EXPE:
        return getStepExpe();
      case PortugolPackage.FOR_STATEMENT__COMMANDS:
        return getCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR:
        setOperatorExpr((DeclaredVar)newValue);
        return;
      case PortugolPackage.FOR_STATEMENT__START_EXPR:
        setStartExpr((Expression)newValue);
        return;
      case PortugolPackage.FOR_STATEMENT__END_EXPR:
        setEndExpr((Expression)newValue);
        return;
      case PortugolPackage.FOR_STATEMENT__STEP_EXPE:
        setStepExpe((Expression)newValue);
        return;
      case PortugolPackage.FOR_STATEMENT__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends AbstractCommand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR:
        setOperatorExpr((DeclaredVar)null);
        return;
      case PortugolPackage.FOR_STATEMENT__START_EXPR:
        setStartExpr((Expression)null);
        return;
      case PortugolPackage.FOR_STATEMENT__END_EXPR:
        setEndExpr((Expression)null);
        return;
      case PortugolPackage.FOR_STATEMENT__STEP_EXPE:
        setStepExpe((Expression)null);
        return;
      case PortugolPackage.FOR_STATEMENT__COMMANDS:
        getCommands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.FOR_STATEMENT__OPERATOR_EXPR:
        return operatorExpr != null;
      case PortugolPackage.FOR_STATEMENT__START_EXPR:
        return startExpr != null;
      case PortugolPackage.FOR_STATEMENT__END_EXPR:
        return endExpr != null;
      case PortugolPackage.FOR_STATEMENT__STEP_EXPE:
        return stepExpe != null;
      case PortugolPackage.FOR_STATEMENT__COMMANDS:
        return commands != null && !commands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ForStatementImpl
