/**
 * generated by Xtext 2.9.0
 */
package org.hopper.language.portugol.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.hopper.language.portugol.AbstractCommand;
import org.hopper.language.portugol.Expression;
import org.hopper.language.portugol.PortugolPackage;
import org.hopper.language.portugol.RepeatStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Repeat Statement</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.hopper.language.portugol.impl.RepeatStatementImpl#getCommands <em>Commands</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.RepeatStatementImpl#getUntilExpr <em>Until Expr</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RepeatStatementImpl extends AbstractCommandImpl implements RepeatStatement
{
  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<AbstractCommand> commands;

  /**
   * The cached value of the '{@link #getUntilExpr() <em>Until Expr</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getUntilExpr()
   * @generated
   * @ordered
   */
  protected Expression untilExpr;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RepeatStatementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PortugolPackage.Literals.REPEAT_STATEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractCommand> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<AbstractCommand>(AbstractCommand.class, this, PortugolPackage.REPEAT_STATEMENT__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getUntilExpr()
  {
    return untilExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetUntilExpr(Expression newUntilExpr, NotificationChain msgs)
  {
    Expression oldUntilExpr = untilExpr;
    untilExpr = newUntilExpr;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR, oldUntilExpr, newUntilExpr);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setUntilExpr(Expression newUntilExpr)
  {
    if (newUntilExpr != untilExpr)
    {
      NotificationChain msgs = null;
      if (untilExpr != null)
        msgs = ((InternalEObject)untilExpr).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR, null, msgs);
      if (newUntilExpr != null)
        msgs = ((InternalEObject)newUntilExpr).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR, null, msgs);
      msgs = basicSetUntilExpr(newUntilExpr, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR, newUntilExpr, newUntilExpr));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PortugolPackage.REPEAT_STATEMENT__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
      case PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR:
        return basicSetUntilExpr(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PortugolPackage.REPEAT_STATEMENT__COMMANDS:
        return getCommands();
      case PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR:
        return getUntilExpr();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PortugolPackage.REPEAT_STATEMENT__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends AbstractCommand>)newValue);
        return;
      case PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR:
        setUntilExpr((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.REPEAT_STATEMENT__COMMANDS:
        getCommands().clear();
        return;
      case PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR:
        setUntilExpr((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.REPEAT_STATEMENT__COMMANDS:
        return commands != null && !commands.isEmpty();
      case PortugolPackage.REPEAT_STATEMENT__UNTIL_EXPR:
        return untilExpr != null;
    }
    return super.eIsSet(featureID);
  }

} //RepeatStatementImpl
