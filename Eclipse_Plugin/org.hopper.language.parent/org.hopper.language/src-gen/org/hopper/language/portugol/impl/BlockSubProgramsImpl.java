/**
 * generated by Xtext 2.9.0
 */
package org.hopper.language.portugol.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.hopper.language.portugol.AbstractCommand;
import org.hopper.language.portugol.BlockSubPrograms;
import org.hopper.language.portugol.DeclarationsBlock;
import org.hopper.language.portugol.PortugolPackage;
import org.hopper.language.portugol.SubprogramParamDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Block Sub Programs</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.hopper.language.portugol.impl.BlockSubProgramsImpl#getParams <em>Params</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.BlockSubProgramsImpl#getDeclarations <em>Declarations</em>}</li>
 *   <li>{@link org.hopper.language.portugol.impl.BlockSubProgramsImpl#getCommands <em>Commands</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BlockSubProgramsImpl extends MinimalEObjectImpl.Container implements BlockSubPrograms
{
  /**
   * The cached value of the '{@link #getParams() <em>Params</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParams()
   * @generated
   * @ordered
   */
  protected SubprogramParamDeclaration params;

  /**
   * The cached value of the '{@link #getDeclarations() <em>Declarations</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeclarations()
   * @generated
   * @ordered
   */
  protected DeclarationsBlock declarations;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<AbstractCommand> commands;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BlockSubProgramsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PortugolPackage.Literals.BLOCK_SUB_PROGRAMS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SubprogramParamDeclaration getParams()
  {
    return params;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetParams(SubprogramParamDeclaration newParams, NotificationChain msgs)
  {
    SubprogramParamDeclaration oldParams = params;
    params = newParams;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS, oldParams, newParams);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParams(SubprogramParamDeclaration newParams)
  {
    if (newParams != params)
    {
      NotificationChain msgs = null;
      if (params != null)
        msgs = ((InternalEObject)params).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS, null, msgs);
      if (newParams != null)
        msgs = ((InternalEObject)newParams).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS, null, msgs);
      msgs = basicSetParams(newParams, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS, newParams, newParams));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeclarationsBlock getDeclarations()
  {
    return declarations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDeclarations(DeclarationsBlock newDeclarations, NotificationChain msgs)
  {
    DeclarationsBlock oldDeclarations = declarations;
    declarations = newDeclarations;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS, oldDeclarations, newDeclarations);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDeclarations(DeclarationsBlock newDeclarations)
  {
    if (newDeclarations != declarations)
    {
      NotificationChain msgs = null;
      if (declarations != null)
        msgs = ((InternalEObject)declarations).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS, null, msgs);
      if (newDeclarations != null)
        msgs = ((InternalEObject)newDeclarations).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS, null, msgs);
      msgs = basicSetDeclarations(newDeclarations, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS, newDeclarations, newDeclarations));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AbstractCommand> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<AbstractCommand>(AbstractCommand.class, this, PortugolPackage.BLOCK_SUB_PROGRAMS__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS:
        return basicSetParams(null, msgs);
      case PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS:
        return basicSetDeclarations(null, msgs);
      case PortugolPackage.BLOCK_SUB_PROGRAMS__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS:
        return getParams();
      case PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS:
        return getDeclarations();
      case PortugolPackage.BLOCK_SUB_PROGRAMS__COMMANDS:
        return getCommands();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS:
        setParams((SubprogramParamDeclaration)newValue);
        return;
      case PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS:
        setDeclarations((DeclarationsBlock)newValue);
        return;
      case PortugolPackage.BLOCK_SUB_PROGRAMS__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends AbstractCommand>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS:
        setParams((SubprogramParamDeclaration)null);
        return;
      case PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS:
        setDeclarations((DeclarationsBlock)null);
        return;
      case PortugolPackage.BLOCK_SUB_PROGRAMS__COMMANDS:
        getCommands().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PortugolPackage.BLOCK_SUB_PROGRAMS__PARAMS:
        return params != null;
      case PortugolPackage.BLOCK_SUB_PROGRAMS__DECLARATIONS:
        return declarations != null;
      case PortugolPackage.BLOCK_SUB_PROGRAMS__COMMANDS:
        return commands != null && !commands.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BlockSubProgramsImpl
