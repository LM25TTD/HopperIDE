/*
 * generated by Xtext 2.9.0
 */
package org.hopper.language.ui.outline

import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.hopper.language.portugol.AbstractCommand
import org.hopper.language.portugol.BlockFunction
import org.hopper.language.portugol.BlockProcedure
import org.hopper.language.portugol.DeclarationsBlock
import org.hopper.language.portugol.Model
import org.hopper.language.portugol.SubprogramParamDeclaration
import org.hopper.language.portugol.VarName
import org.hopper.language.portugol.VarType

/**
 * Customization of the default outline structure.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#outline
 */
class PortugolOutlineTreeProvider extends DefaultOutlineTreeProvider {
	def _isLeaf(VarName varName) {
		true
	}

	def _isLeaf(AbstractCommand command) {
		true
	}

	def _isLeaf(VarType type) {
		true
	}

	def _createChildren(DocumentRootNode outlineNode, Model model) {
		createNode(outlineNode, model)
	}

	def _createChildren(IOutlineNode parentNode, Model model) {

		// If there is global declarations, include it
		if (model.globalDeclarations != null) {
			createNode(parentNode, model.globalDeclarations)
		}

		// If there is subprograms, include it
		if (model.subprograms != null) {
			createNode(parentNode, model.subprograms)
		}

		// Always include the main block
		createNode(parentNode, model.commands)

	}

	def _createChildren(IOutlineNode parentNode, BlockFunction function) {

		// If there is global declarations, include it
		if (function.params != null) {
			createNode(parentNode, function.params)
		}

		// If there is subprograms, include it
		if (function.declarations != null) {
			createNode(parentNode, function.declarations)
		}
	}

	def _createChildren(IOutlineNode parentNode, BlockProcedure procedure) {

		// If there is global declarations, include it
		if (procedure.params != null) {
			createNode(parentNode, procedure.params)
		}

		// If there is subprograms, include it
		if (procedure.declarations != null) {
			createNode(parentNode, procedure.declarations)
		}
	}

	/* This method make all variables as direct child of the DeclarationsBlock */
	def _createChildren(IOutlineNode parentNode, DeclarationsBlock declarationsBlock) {
		/* Search each Variable element */
		declarationsBlock.vars.forEach [ variableSet |
			/* Search each VarName element. This element will be a direct child. */
			variableSet.varDeclaration.vars.forEach [ variable |
				createNode(parentNode, variable)
			]
		]
	}

	/* This method make all variables as direct child of the SubprogramParamDeclaration block */
	def _createChildren(IOutlineNode parentNode, SubprogramParamDeclaration params) {
		/* Search each Variable element */
		params.paramList.forEach [ variableSet |
			/* Search each VarName element. This element will be a direct child. */
			variableSet.varDeclaration.vars.forEach [ variable |
				createNode(parentNode, variable)
			]
		]
	}
}
