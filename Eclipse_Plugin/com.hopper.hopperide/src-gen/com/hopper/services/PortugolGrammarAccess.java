/*
* generated by Xtext
*/
package com.hopper.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class PortugolGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cMainAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMainProgramaParserRuleCall_0 = (RuleCall)cMainAssignment.eContents().get(0);
		
		//Model:
		//	main=Programa;
		public ParserRule getRule() { return rule; }

		//main=Programa
		public Assignment getMainAssignment() { return cMainAssignment; }

		//Programa
		public RuleCall getMainProgramaParserRuleCall_0() { return cMainProgramaParserRuleCall_0; }
	}

	public class ABSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ABS");
		private final Keyword cAbsKeyword = (Keyword)rule.eContents().get(1);
		
		//// ---------------------- Keywords ----------------------
		//ABS:
		//	"abs";
		public ParserRule getRule() { return rule; }

		//"abs"
		public Keyword getAbsKeyword() { return cAbsKeyword; }
	}

	public class ALEATORIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ALEATORIO");
		private final Keyword cAleatorioKeyword = (Keyword)rule.eContents().get(1);
		
		//ALEATORIO:
		//	"aleatorio";
		public ParserRule getRule() { return rule; }

		//"aleatorio"
		public Keyword getAleatorioKeyword() { return cAleatorioKeyword; }
	}

	public class ALGORITMOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ALGORITMO");
		private final Keyword cAlgoritmoKeyword = (Keyword)rule.eContents().get(1);
		
		//ALGORITMO:
		//	"algoritmo";
		public ParserRule getRule() { return rule; }

		//"algoritmo"
		public Keyword getAlgoritmoKeyword() { return cAlgoritmoKeyword; }
	}

	public class ARCCOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARCCOS");
		private final Keyword cArccosKeyword = (Keyword)rule.eContents().get(1);
		
		//ARCCOS:
		//	"arccos";
		public ParserRule getRule() { return rule; }

		//"arccos"
		public Keyword getArccosKeyword() { return cArccosKeyword; }
	}

	public class ARCSENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARCSEN");
		private final Keyword cArcsenKeyword = (Keyword)rule.eContents().get(1);
		
		//ARCSEN:
		//	"arcsen";
		public ParserRule getRule() { return rule; }

		//"arcsen"
		public Keyword getArcsenKeyword() { return cArcsenKeyword; }
	}

	public class ARCTANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARCTAN");
		private final Keyword cArctanKeyword = (Keyword)rule.eContents().get(1);
		
		//ARCTAN:
		//	"arctan";
		public ParserRule getRule() { return rule; }

		//"arctan"
		public Keyword getArctanKeyword() { return cArctanKeyword; }
	}

	public class ARQUIVOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ARQUIVO");
		private final Keyword cArquivoKeyword = (Keyword)rule.eContents().get(1);
		
		//ARQUIVO:
		//	"arquivo";
		public ParserRule getRule() { return rule; }

		//"arquivo"
		public Keyword getArquivoKeyword() { return cArquivoKeyword; }
	}

	public class ASCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ASC");
		private final Keyword cAscKeyword = (Keyword)rule.eContents().get(1);
		
		//ASC:
		//	"asc";
		public ParserRule getRule() { return rule; }

		//"asc"
		public Keyword getAscKeyword() { return cAscKeyword; }
	}

	public class ATEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATE");
		private final Keyword cAteKeyword = (Keyword)rule.eContents().get(1);
		
		//ATE:
		//	"ate";
		public ParserRule getRule() { return rule; }

		//"ate"
		public Keyword getAteKeyword() { return cAteKeyword; }
	}

	public class CARACElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CARAC");
		private final Keyword cCaracKeyword = (Keyword)rule.eContents().get(1);
		
		//CARAC:
		//	"carac";
		public ParserRule getRule() { return rule; }

		//"carac"
		public Keyword getCaracKeyword() { return cCaracKeyword; }
	}

	public class CARACPNUMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CARACPNUM");
		private final Keyword cCaracpnumKeyword = (Keyword)rule.eContents().get(1);
		
		//CARACPNUM:
		//	"caracpnum";
		public ParserRule getRule() { return rule; }

		//"caracpnum"
		public Keyword getCaracpnumKeyword() { return cCaracpnumKeyword; }
	}

	public class CARACTERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CARACTER");
		private final Keyword cCaracterKeyword = (Keyword)rule.eContents().get(1);
		
		//CARACTER:
		//	"caracter";
		public ParserRule getRule() { return rule; }

		//"caracter"
		public Keyword getCaracterKeyword() { return cCaracterKeyword; }
	}

	public class CARACTEREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CARACTERE");
		private final Keyword cCaractereKeyword = (Keyword)rule.eContents().get(1);
		
		//CARACTERE:
		//	"caractere";
		public ParserRule getRule() { return rule; }

		//"caractere"
		public Keyword getCaractereKeyword() { return cCaractereKeyword; }
	}

	public class CASOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CASO");
		private final Keyword cCasoKeyword = (Keyword)rule.eContents().get(1);
		
		//CASO:
		//	"caso";
		public ParserRule getRule() { return rule; }

		//"caso"
		public Keyword getCasoKeyword() { return cCasoKeyword; }
	}

	public class COMPRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMPR");
		private final Keyword cComprKeyword = (Keyword)rule.eContents().get(1);
		
		//COMPR:
		//	"compr";
		public ParserRule getRule() { return rule; }

		//"compr"
		public Keyword getComprKeyword() { return cComprKeyword; }
	}

	public class COPIAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COPIA");
		private final Keyword cCopiaKeyword = (Keyword)rule.eContents().get(1);
		
		//COPIA:
		//	"copia";
		public ParserRule getRule() { return rule; }

		//"copia"
		public Keyword getCopiaKeyword() { return cCopiaKeyword; }
	}

	public class COSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COS");
		private final Keyword cCosKeyword = (Keyword)rule.eContents().get(1);
		
		//COS:
		//	"cos";
		public ParserRule getRule() { return rule; }

		//"cos"
		public Keyword getCosKeyword() { return cCosKeyword; }
	}

	public class COTANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COTAN");
		private final Keyword cCotanKeyword = (Keyword)rule.eContents().get(1);
		
		//COTAN:
		//	"cotan";
		public ParserRule getRule() { return rule; }

		//"cotan"
		public Keyword getCotanKeyword() { return cCotanKeyword; }
	}

	public class CRONOMETROElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CRONOMETRO");
		private final Keyword cCronometroKeyword = (Keyword)rule.eContents().get(1);
		
		//CRONOMETRO:
		//	"cronometro";
		public ParserRule getRule() { return rule; }

		//"cronometro"
		public Keyword getCronometroKeyword() { return cCronometroKeyword; }
	}

	public class DEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DE");
		private final Keyword cDeKeyword = (Keyword)rule.eContents().get(1);
		
		//DE:
		//	"de";
		public ParserRule getRule() { return rule; }

		//"de"
		public Keyword getDeKeyword() { return cDeKeyword; }
	}

	public class DEBUGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DEBUG");
		private final Keyword cDebugKeyword = (Keyword)rule.eContents().get(1);
		
		//DEBUG:
		//	"debug";
		public ParserRule getRule() { return rule; }

		//"debug"
		public Keyword getDebugKeyword() { return cDebugKeyword; }
	}

	public class DECLAREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DECLARE");
		private final Keyword cDeclareKeyword = (Keyword)rule.eContents().get(1);
		
		//DECLARE:
		//	"declare";
		public ParserRule getRule() { return rule; }

		//"declare"
		public Keyword getDeclareKeyword() { return cDeclareKeyword; }
	}

	public class EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "E");
		private final Keyword cEKeyword = (Keyword)rule.eContents().get(1);
		
		//E:
		//	"e";
		public ParserRule getRule() { return rule; }

		//"e"
		public Keyword getEKeyword() { return cEKeyword; }
	}

	public class ECOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ECO");
		private final Keyword cEcoKeyword = (Keyword)rule.eContents().get(1);
		
		//ECO:
		//	"eco";
		public ParserRule getRule() { return rule; }

		//"eco"
		public Keyword getEcoKeyword() { return cEcoKeyword; }
	}

	public class ENQUANTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ENQUANTO");
		private final Keyword cEnquantoKeyword = (Keyword)rule.eContents().get(1);
		
		//ENQUANTO:
		//	"enquanto";
		public ParserRule getRule() { return rule; }

		//"enquanto"
		public Keyword getEnquantoKeyword() { return cEnquantoKeyword; }
	}

	public class ENTAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ENTAO");
		private final Keyword cEntaoKeyword = (Keyword)rule.eContents().get(1);
		
		//ENTAO:
		//	"entao";
		public ParserRule getRule() { return rule; }

		//"entao"
		public Keyword getEntaoKeyword() { return cEntaoKeyword; }
	}

	public class ESCOLHAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ESCOLHA");
		private final Keyword cEscolhaKeyword = (Keyword)rule.eContents().get(1);
		
		//ESCOLHA:
		//	"escolha";
		public ParserRule getRule() { return rule; }

		//"escolha"
		public Keyword getEscolhaKeyword() { return cEscolhaKeyword; }
	}

	public class ESCREVAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ESCREVA");
		private final Keyword cEscrevaKeyword = (Keyword)rule.eContents().get(1);
		
		//ESCREVA:
		//	"escreva";
		public ParserRule getRule() { return rule; }

		//"escreva"
		public Keyword getEscrevaKeyword() { return cEscrevaKeyword; }
	}

	public class ESCREVALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ESCREVAL");
		private final Keyword cEscrevalKeyword = (Keyword)rule.eContents().get(1);
		
		//ESCREVAL:
		//	"escreval";
		public ParserRule getRule() { return rule; }

		//"escreval"
		public Keyword getEscrevalKeyword() { return cEscrevalKeyword; }
	}

	public class EXPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXP");
		private final Keyword cExpKeyword = (Keyword)rule.eContents().get(1);
		
		//EXP:
		//	"exp";
		public ParserRule getRule() { return rule; }

		//"exp"
		public Keyword getExpKeyword() { return cExpKeyword; }
	}

	public class FACAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FACA");
		private final Keyword cFacaKeyword = (Keyword)rule.eContents().get(1);
		
		//FACA:
		//	"faca";
		public ParserRule getRule() { return rule; }

		//"faca"
		public Keyword getFacaKeyword() { return cFacaKeyword; }
	}

	public class FALSOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FALSO");
		private final Keyword cFalsoKeyword = (Keyword)rule.eContents().get(1);
		
		//FALSO:
		//	"falso";
		public ParserRule getRule() { return rule; }

		//"falso"
		public Keyword getFalsoKeyword() { return cFalsoKeyword; }
	}

	public class FIMALGORITMOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIMALGORITMO");
		private final Keyword cFimalgoritmoKeyword = (Keyword)rule.eContents().get(1);
		
		//FIMALGORITMO:
		//	"fimalgoritmo";
		public ParserRule getRule() { return rule; }

		//"fimalgoritmo"
		public Keyword getFimalgoritmoKeyword() { return cFimalgoritmoKeyword; }
	}

	public class FIM_ENQUANTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIM_ENQUANTO");
		private final Keyword cFimenquantoKeyword = (Keyword)rule.eContents().get(1);
		
		//FIM_ENQUANTO:
		//	"fimenquanto";
		public ParserRule getRule() { return rule; }

		//"fimenquanto"
		public Keyword getFimenquantoKeyword() { return cFimenquantoKeyword; }
	}

	public class FIM_ESCOLHAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIM_ESCOLHA");
		private final Keyword cFimescolhaKeyword = (Keyword)rule.eContents().get(1);
		
		//FIM_ESCOLHA:
		//	"fimescolha";
		public ParserRule getRule() { return rule; }

		//"fimescolha"
		public Keyword getFimescolhaKeyword() { return cFimescolhaKeyword; }
	}

	public class FIM_FUNCAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIM_FUNCAO");
		private final Keyword cFimfuncaoKeyword = (Keyword)rule.eContents().get(1);
		
		//FIM_FUNCAO:
		//	"fimfuncao";
		public ParserRule getRule() { return rule; }

		//"fimfuncao"
		public Keyword getFimfuncaoKeyword() { return cFimfuncaoKeyword; }
	}

	public class FIM_PARAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIM_PARA");
		private final Keyword cFimparaKeyword = (Keyword)rule.eContents().get(1);
		
		//FIM_PARA:
		//	"fimpara";
		public ParserRule getRule() { return rule; }

		//"fimpara"
		public Keyword getFimparaKeyword() { return cFimparaKeyword; }
	}

	public class FIM_PROCEDIMENTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIM_PROCEDIMENTO");
		private final Keyword cFimprocedimentoKeyword = (Keyword)rule.eContents().get(1);
		
		//FIM_PROCEDIMENTO:
		//	"fimprocedimento";
		public ParserRule getRule() { return rule; }

		//"fimprocedimento"
		public Keyword getFimprocedimentoKeyword() { return cFimprocedimentoKeyword; }
	}

	public class FIM_REPITAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIM_REPITA");
		private final Keyword cFimrepitaKeyword = (Keyword)rule.eContents().get(1);
		
		//FIM_REPITA:
		//	"fimrepita";
		public ParserRule getRule() { return rule; }

		//"fimrepita"
		public Keyword getFimrepitaKeyword() { return cFimrepitaKeyword; }
	}

	public class FIM_SEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FIM_SE");
		private final Keyword cFimseKeyword = (Keyword)rule.eContents().get(1);
		
		//FIM_SE:
		//	"fimse";
		public ParserRule getRule() { return rule; }

		//"fimse"
		public Keyword getFimseKeyword() { return cFimseKeyword; }
	}

	public class FUNCAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FUNCAO");
		private final Keyword cFuncaoKeyword = (Keyword)rule.eContents().get(1);
		
		//FUNCAO:
		//	"funcao";
		public ParserRule getRule() { return rule; }

		//"funcao"
		public Keyword getFuncaoKeyword() { return cFuncaoKeyword; }
	}

	public class GRAUPRADElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GRAUPRAD");
		private final Keyword cGraupradKeyword = (Keyword)rule.eContents().get(1);
		
		//GRAUPRAD:
		//	"grauprad";
		public ParserRule getRule() { return rule; }

		//"grauprad"
		public Keyword getGraupradKeyword() { return cGraupradKeyword; }
	}

	public class INICIOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INICIO");
		private final Keyword cInicioKeyword = (Keyword)rule.eContents().get(1);
		
		//INICIO:
		//	"inicio";
		public ParserRule getRule() { return rule; }

		//"inicio"
		public Keyword getInicioKeyword() { return cInicioKeyword; }
	}

	public class T_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "T_INT");
		private final Keyword cIntKeyword = (Keyword)rule.eContents().get(1);
		
		//T_INT:
		//	"int";
		public ParserRule getRule() { return rule; }

		//"int"
		public Keyword getIntKeyword() { return cIntKeyword; }
	}

	public class INTEIROElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTEIRO");
		private final Keyword cInteiroKeyword = (Keyword)rule.eContents().get(1);
		
		//INTEIRO:
		//	"inteiro";
		public ParserRule getRule() { return rule; }

		//"inteiro"
		public Keyword getInteiroKeyword() { return cInteiroKeyword; }
	}

	public class INTERROMPAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "INTERROMPA");
		private final Keyword cInterrompaKeyword = (Keyword)rule.eContents().get(1);
		
		//INTERROMPA:
		//	"interrompa";
		public ParserRule getRule() { return rule; }

		//"interrompa"
		public Keyword getInterrompaKeyword() { return cInterrompaKeyword; }
	}

	public class LEIAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEIA");
		private final Keyword cLeiaKeyword = (Keyword)rule.eContents().get(1);
		
		//LEIA:
		//	"leia";
		public ParserRule getRule() { return rule; }

		//"leia"
		public Keyword getLeiaKeyword() { return cLeiaKeyword; }
	}

	public class LIMPATELAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LIMPATELA");
		private final Keyword cLimpatelaKeyword = (Keyword)rule.eContents().get(1);
		
		//LIMPATELA:
		//	"limpatela";
		public ParserRule getRule() { return rule; }

		//"limpatela"
		public Keyword getLimpatelaKeyword() { return cLimpatelaKeyword; }
	}

	public class LITERALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LITERAL");
		private final Keyword cLiteralKeyword = (Keyword)rule.eContents().get(1);
		
		//LITERAL:
		//	"literal";
		public ParserRule getRule() { return rule; }

		//"literal"
		public Keyword getLiteralKeyword() { return cLiteralKeyword; }
	}

	public class LOGElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOG");
		private final Keyword cLogKeyword = (Keyword)rule.eContents().get(1);
		
		//LOG:
		//	"log";
		public ParserRule getRule() { return rule; }

		//"log"
		public Keyword getLogKeyword() { return cLogKeyword; }
	}

	public class LOGICOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOGICO");
		private final Keyword cLogicoKeyword = (Keyword)rule.eContents().get(1);
		
		//LOGICO:
		//	"logico";
		public ParserRule getRule() { return rule; }

		//"logico"
		public Keyword getLogicoKeyword() { return cLogicoKeyword; }
	}

	public class MAIUSCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAIUSC");
		private final Keyword cMaiuscKeyword = (Keyword)rule.eContents().get(1);
		
		//MAIUSC:
		//	"maiusc";
		public ParserRule getRule() { return rule; }

		//"maiusc"
		public Keyword getMaiuscKeyword() { return cMaiuscKeyword; }
	}

	public class MENSAGEMElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MENSAGEM");
		private final Keyword cMensagemKeyword = (Keyword)rule.eContents().get(1);
		
		//MENSAGEM:
		//	"mensagem";
		public ParserRule getRule() { return rule; }

		//"mensagem"
		public Keyword getMensagemKeyword() { return cMensagemKeyword; }
	}

	public class MINUSCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MINUSC");
		private final Keyword cMinuscKeyword = (Keyword)rule.eContents().get(1);
		
		//MINUSC:
		//	"minusc";
		public ParserRule getRule() { return rule; }

		//"minusc"
		public Keyword getMinuscKeyword() { return cMinuscKeyword; }
	}

	public class MODElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MOD");
		private final Keyword cModKeyword = (Keyword)rule.eContents().get(1);
		
		//MOD:
		//	"mod";
		public ParserRule getRule() { return rule; }

		//"mod"
		public Keyword getModKeyword() { return cModKeyword; }
	}

	public class NAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NAO");
		private final Keyword cNaoKeyword = (Keyword)rule.eContents().get(1);
		
		//NAO:
		//	"nao";
		public ParserRule getRule() { return rule; }

		//"nao"
		public Keyword getNaoKeyword() { return cNaoKeyword; }
	}

	public class NUMERICOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMERICO");
		private final Keyword cNumericoKeyword = (Keyword)rule.eContents().get(1);
		
		//NUMERICO:
		//	"numerico";
		public ParserRule getRule() { return rule; }

		//"numerico"
		public Keyword getNumericoKeyword() { return cNumericoKeyword; }
	}

	public class NUMPCARACElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMPCARAC");
		private final Keyword cNumpcaracKeyword = (Keyword)rule.eContents().get(1);
		
		//NUMPCARAC:
		//	"numpcarac";
		public ParserRule getRule() { return rule; }

		//"numpcarac"
		public Keyword getNumpcaracKeyword() { return cNumpcaracKeyword; }
	}

	public class OUElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OU");
		private final Keyword cOuKeyword = (Keyword)rule.eContents().get(1);
		
		//OU:
		//	"ou";
		public ParserRule getRule() { return rule; }

		//"ou"
		public Keyword getOuKeyword() { return cOuKeyword; }
	}

	public class OUTROCASOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OUTROCASO");
		private final Keyword cOutrocasoKeyword = (Keyword)rule.eContents().get(1);
		
		//OUTROCASO:
		//	"outrocaso";
		public ParserRule getRule() { return rule; }

		//"outrocaso"
		public Keyword getOutrocasoKeyword() { return cOutrocasoKeyword; }
	}

	public class PARAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PARA");
		private final Keyword cParaKeyword = (Keyword)rule.eContents().get(1);
		
		//PARA:
		//	"para";
		public ParserRule getRule() { return rule; }

		//"para"
		public Keyword getParaKeyword() { return cParaKeyword; }
	}

	public class PASSOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PASSO");
		private final Keyword cPassoKeyword = (Keyword)rule.eContents().get(1);
		
		//PASSO:
		//	"passo";
		public ParserRule getRule() { return rule; }

		//"passo"
		public Keyword getPassoKeyword() { return cPassoKeyword; }
	}

	public class PAUSAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PAUSA");
		private final Keyword cPausaKeyword = (Keyword)rule.eContents().get(1);
		
		//PAUSA:
		//	"pausa";
		public ParserRule getRule() { return rule; }

		//"pausa"
		public Keyword getPausaKeyword() { return cPausaKeyword; }
	}

	public class PIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PI");
		private final Keyword cPiKeyword = (Keyword)rule.eContents().get(1);
		
		//PI:
		//	"pi";
		public ParserRule getRule() { return rule; }

		//"pi"
		public Keyword getPiKeyword() { return cPiKeyword; }
	}

	public class POSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "POS");
		private final Keyword cPosKeyword = (Keyword)rule.eContents().get(1);
		
		//POS:
		//	"pos";
		public ParserRule getRule() { return rule; }

		//"pos"
		public Keyword getPosKeyword() { return cPosKeyword; }
	}

	public class PROCEDIMENTOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PROCEDIMENTO");
		private final Keyword cProcedimentoKeyword = (Keyword)rule.eContents().get(1);
		
		//PROCEDIMENTO:
		//	"procedimento";
		public ParserRule getRule() { return rule; }

		//"procedimento"
		public Keyword getProcedimentoKeyword() { return cProcedimentoKeyword; }
	}

	public class QUADElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QUAD");
		private final Keyword cQuadKeyword = (Keyword)rule.eContents().get(1);
		
		//QUAD:
		//	"quad";
		public ParserRule getRule() { return rule; }

		//"quad"
		public Keyword getQuadKeyword() { return cQuadKeyword; }
	}

	public class RADPGRAUElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RADPGRAU");
		private final Keyword cRadpgrauKeyword = (Keyword)rule.eContents().get(1);
		
		//RADPGRAU:
		//	"radpgrau";
		public ParserRule getRule() { return rule; }

		//"radpgrau"
		public Keyword getRadpgrauKeyword() { return cRadpgrauKeyword; }
	}

	public class RAIZQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RAIZQ");
		private final Keyword cRaizqKeyword = (Keyword)rule.eContents().get(1);
		
		//RAIZQ:
		//	"raizq";
		public ParserRule getRule() { return rule; }

		//"raizq"
		public Keyword getRaizqKeyword() { return cRaizqKeyword; }
	}

	public class RANDIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RANDI");
		private final Keyword cRandiKeyword = (Keyword)rule.eContents().get(1);
		
		//RANDI:
		//	"randi";
		public ParserRule getRule() { return rule; }

		//"randi"
		public Keyword getRandiKeyword() { return cRandiKeyword; }
	}

	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REAL");
		private final Keyword cRealKeyword = (Keyword)rule.eContents().get(1);
		
		//REAL:
		//	"real";
		public ParserRule getRule() { return rule; }

		//"real"
		public Keyword getRealKeyword() { return cRealKeyword; }
	}

	public class REPITAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "REPITA");
		private final Keyword cRepitaKeyword = (Keyword)rule.eContents().get(1);
		
		//REPITA:
		//	"repita";
		public ParserRule getRule() { return rule; }

		//"repita"
		public Keyword getRepitaKeyword() { return cRepitaKeyword; }
	}

	public class RETORNEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RETORNE");
		private final Keyword cRetorneKeyword = (Keyword)rule.eContents().get(1);
		
		//RETORNE:
		//	"retorne";
		public ParserRule getRule() { return rule; }

		//"retorne"
		public Keyword getRetorneKeyword() { return cRetorneKeyword; }
	}

	public class SEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SE");
		private final Keyword cSeKeyword = (Keyword)rule.eContents().get(1);
		
		//SE:
		//	"se";
		public ParserRule getRule() { return rule; }

		//"se"
		public Keyword getSeKeyword() { return cSeKeyword; }
	}

	public class SENElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SEN");
		private final Keyword cSenKeyword = (Keyword)rule.eContents().get(1);
		
		//SEN:
		//	"sen";
		public ParserRule getRule() { return rule; }

		//"sen"
		public Keyword getSenKeyword() { return cSenKeyword; }
	}

	public class SENAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SENAO");
		private final Keyword cSenaoKeyword = (Keyword)rule.eContents().get(1);
		
		//SENAO:
		//	"senao";
		public ParserRule getRule() { return rule; }

		//"senao"
		public Keyword getSenaoKeyword() { return cSenaoKeyword; }
	}

	public class TANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TAN");
		private final Keyword cTanKeyword = (Keyword)rule.eContents().get(1);
		
		//TAN:
		//	"tan";
		public ParserRule getRule() { return rule; }

		//"tan"
		public Keyword getTanKeyword() { return cTanKeyword; }
	}

	public class TIMERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TIMER");
		private final Keyword cTimerKeyword = (Keyword)rule.eContents().get(1);
		
		//TIMER:
		//	"timer";
		public ParserRule getRule() { return rule; }

		//"timer"
		public Keyword getTimerKeyword() { return cTimerKeyword; }
	}

	public class VARElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VAR");
		private final Keyword cVarKeyword = (Keyword)rule.eContents().get(1);
		
		//VAR:
		//	"var";
		public ParserRule getRule() { return rule; }

		//"var"
		public Keyword getVarKeyword() { return cVarKeyword; }
	}

	public class VETORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VETOR");
		private final Keyword cVetorKeyword = (Keyword)rule.eContents().get(1);
		
		//VETOR:
		//	"vetor";
		public ParserRule getRule() { return rule; }

		//"vetor"
		public Keyword getVetorKeyword() { return cVetorKeyword; }
	}

	public class VERDADEIROElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VERDADEIRO");
		private final Keyword cVerdadeiroKeyword = (Keyword)rule.eContents().get(1);
		
		//VERDADEIRO:
		//	"verdadeiro";
		public ParserRule getRule() { return rule; }

		//"verdadeiro"
		public Keyword getVerdadeiroKeyword() { return cVerdadeiroKeyword; }
	}

	public class XOUElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "XOU");
		private final Keyword cXouKeyword = (Keyword)rule.eContents().get(1);
		
		//XOU:
		//	"xou";
		public ParserRule getRule() { return rule; }

		//"xou"
		public Keyword getXouKeyword() { return cXouKeyword; }
	}

	public class MAISElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAIS");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		////------------------------- Operators ------------------------- \
		//MAIS:
		//	"+";
		public ParserRule getRule() { return rule; }

		//"+"
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}

	public class MENOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MENOS");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//MENOS:
		//	"-";
		public ParserRule getRule() { return rule; }

		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}

	public class MULTIPLICACAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MULTIPLICACAO");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//MULTIPLICACAO:
		//	"*";
		public ParserRule getRule() { return rule; }

		//"*"
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}

	public class DIVISAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIVISAO");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//DIVISAO:
		//	"/";
		public ParserRule getRule() { return rule; }

		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}

	public class DIVISAO_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIVISAO_INT");
		private final Keyword cReverseSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//DIVISAO_INT:
		//	"\\";
		public ParserRule getRule() { return rule; }

		//"\\"
		public Keyword getReverseSolidusKeyword() { return cReverseSolidusKeyword; }
	}

	public class EXPONENCIACAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENCIACAO");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//EXPONENCIACAO:
		//	"^";
		public ParserRule getRule() { return rule; }

		//"^"
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}

	public class RESTO_DIVISAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RESTO_DIVISAO");
		private final Keyword cPercentSignKeyword = (Keyword)rule.eContents().get(1);
		
		//RESTO_DIVISAO:
		//	"%";
		public ParserRule getRule() { return rule; }

		//"%"
		public Keyword getPercentSignKeyword() { return cPercentSignKeyword; }
	}

	public class DIFERENTEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DIFERENTE");
		private final Keyword cLessThanSignGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//DIFERENTE:
		//	"<>";
		public ParserRule getRule() { return rule; }

		//"<>"
		public Keyword getLessThanSignGreaterThanSignKeyword() { return cLessThanSignGreaterThanSignKeyword; }
	}

	public class MENORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MENOR");
		private final Keyword cLessThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MENOR:
		//	"<";
		public ParserRule getRule() { return rule; }

		//"<"
		public Keyword getLessThanSignKeyword() { return cLessThanSignKeyword; }
	}

	public class MAIORElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAIOR");
		private final Keyword cGreaterThanSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MAIOR:
		//	">";
		public ParserRule getRule() { return rule; }

		//">"
		public Keyword getGreaterThanSignKeyword() { return cGreaterThanSignKeyword; }
	}

	public class MENOR_IGUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MENOR_IGUAL");
		private final Keyword cLessThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MENOR_IGUAL:
		//	"<=";
		public ParserRule getRule() { return rule; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword() { return cLessThanSignEqualsSignKeyword; }
	}

	public class MAIOR_IGUALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MAIOR_IGUAL");
		private final Keyword cGreaterThanSignEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//MAIOR_IGUAL:
		//	">=";
		public ParserRule getRule() { return rule; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword() { return cGreaterThanSignEqualsSignKeyword; }
	}

	public class PARENTESE_ESQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PARENTESE_ESQ");
		private final Keyword cLeftParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//PARENTESE_ESQ:
		//	"(";
		public ParserRule getRule() { return rule; }

		//"("
		public Keyword getLeftParenthesisKeyword() { return cLeftParenthesisKeyword; }
	}

	public class PARENTESE_DIRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PARENTESE_DIR");
		private final Keyword cRightParenthesisKeyword = (Keyword)rule.eContents().get(1);
		
		//PARENTESE_DIR:
		//	")";
		public ParserRule getRule() { return rule; }

		//")"
		public Keyword getRightParenthesisKeyword() { return cRightParenthesisKeyword; }
	}

	public class COLCHETE_ESQElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COLCHETE_ESQ");
		private final Keyword cLeftSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//COLCHETE_ESQ:
		//	"[";
		public ParserRule getRule() { return rule; }

		//"["
		public Keyword getLeftSquareBracketKeyword() { return cLeftSquareBracketKeyword; }
	}

	public class COLCHETE_DIRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COLCHETE_DIR");
		private final Keyword cRightSquareBracketKeyword = (Keyword)rule.eContents().get(1);
		
		//COLCHETE_DIR:
		//	"]";
		public ParserRule getRule() { return rule; }

		//"]"
		public Keyword getRightSquareBracketKeyword() { return cRightSquareBracketKeyword; }
	}

	public class VETOR_INTERVALOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VETOR_INTERVALO");
		private final Keyword cFullStopFullStopKeyword = (Keyword)rule.eContents().get(1);
		
		//VETOR_INTERVALO:
		//	"..";
		public ParserRule getRule() { return rule; }

		//".."
		public Keyword getFullStopFullStopKeyword() { return cFullStopFullStopKeyword; }
	}

	public class ATRIBUICAOElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ATRIBUICAO");
		private final Keyword cLessThanSignHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//ATRIBUICAO:
		//	"<-";
		public ParserRule getRule() { return rule; }

		//"<-"
		public Keyword getLessThanSignHyphenMinusKeyword() { return cLessThanSignHyphenMinusKeyword; }
	}

	public class VIRGULAElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VIRGULA");
		private final Keyword cCommaKeyword = (Keyword)rule.eContents().get(1);
		
		//VIRGULA:
		//	",";
		public ParserRule getRule() { return rule; }

		//","
		public Keyword getCommaKeyword() { return cCommaKeyword; }
	}

	public class DOIS_PONTOSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DOIS_PONTOS");
		private final Keyword cColonKeyword = (Keyword)rule.eContents().get(1);
		
		//DOIS_PONTOS:
		//	":";
		public ParserRule getRule() { return rule; }

		//":"
		public Keyword getColonKeyword() { return cColonKeyword; }
	}

	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cHEADERParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cWSTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//// ---------------------------- MAIN RULES ----------------------------
		//Programa:
		//	WS* HEADER WS*;
		public ParserRule getRule() { return rule; }

		//WS* HEADER WS*
		public Group getGroup() { return cGroup; }

		//WS*
		public RuleCall getWSTerminalRuleCall_0() { return cWSTerminalRuleCall_0; }

		//HEADER
		public RuleCall getHEADERParserRuleCall_1() { return cHEADERParserRuleCall_1; }

		//WS*
		public RuleCall getWSTerminalRuleCall_2() { return cWSTerminalRuleCall_2; }
	}

	public class HEADERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HEADER");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cALGORITMOParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameOfProgramAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameOfProgramSTRINGTerminalRuleCall_2_0 = (RuleCall)cNameOfProgramAssignment_2.eContents().get(0);
		private final RuleCall cWSTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HEADER:
		//	ALGORITMO WS* nameOfProgram=STRING WS*;
		public ParserRule getRule() { return rule; }

		//ALGORITMO WS* nameOfProgram=STRING WS*
		public Group getGroup() { return cGroup; }

		//ALGORITMO
		public RuleCall getALGORITMOParserRuleCall_0() { return cALGORITMOParserRuleCall_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_1() { return cWSTerminalRuleCall_1; }

		//nameOfProgram=STRING
		public Assignment getNameOfProgramAssignment_2() { return cNameOfProgramAssignment_2; }

		//STRING
		public RuleCall getNameOfProgramSTRINGTerminalRuleCall_2_0() { return cNameOfProgramSTRINGTerminalRuleCall_2_0; }

		//WS*
		public RuleCall getWSTerminalRuleCall_3() { return cWSTerminalRuleCall_3; }
	}
	
	
	private ModelElements pModel;
	private ABSElements pABS;
	private ALEATORIOElements pALEATORIO;
	private ALGORITMOElements pALGORITMO;
	private ARCCOSElements pARCCOS;
	private ARCSENElements pARCSEN;
	private ARCTANElements pARCTAN;
	private ARQUIVOElements pARQUIVO;
	private ASCElements pASC;
	private ATEElements pATE;
	private CARACElements pCARAC;
	private CARACPNUMElements pCARACPNUM;
	private CARACTERElements pCARACTER;
	private CARACTEREElements pCARACTERE;
	private CASOElements pCASO;
	private COMPRElements pCOMPR;
	private COPIAElements pCOPIA;
	private COSElements pCOS;
	private COTANElements pCOTAN;
	private CRONOMETROElements pCRONOMETRO;
	private DEElements pDE;
	private DEBUGElements pDEBUG;
	private DECLAREElements pDECLARE;
	private EElements pE;
	private ECOElements pECO;
	private ENQUANTOElements pENQUANTO;
	private ENTAOElements pENTAO;
	private ESCOLHAElements pESCOLHA;
	private ESCREVAElements pESCREVA;
	private ESCREVALElements pESCREVAL;
	private EXPElements pEXP;
	private FACAElements pFACA;
	private FALSOElements pFALSO;
	private FIMALGORITMOElements pFIMALGORITMO;
	private FIM_ENQUANTOElements pFIM_ENQUANTO;
	private FIM_ESCOLHAElements pFIM_ESCOLHA;
	private FIM_FUNCAOElements pFIM_FUNCAO;
	private FIM_PARAElements pFIM_PARA;
	private FIM_PROCEDIMENTOElements pFIM_PROCEDIMENTO;
	private FIM_REPITAElements pFIM_REPITA;
	private FIM_SEElements pFIM_SE;
	private FUNCAOElements pFUNCAO;
	private GRAUPRADElements pGRAUPRAD;
	private INICIOElements pINICIO;
	private T_INTElements pT_INT;
	private INTEIROElements pINTEIRO;
	private INTERROMPAElements pINTERROMPA;
	private LEIAElements pLEIA;
	private LIMPATELAElements pLIMPATELA;
	private LITERALElements pLITERAL;
	private LOGElements pLOG;
	private LOGICOElements pLOGICO;
	private MAIUSCElements pMAIUSC;
	private MENSAGEMElements pMENSAGEM;
	private MINUSCElements pMINUSC;
	private MODElements pMOD;
	private NAOElements pNAO;
	private NUMERICOElements pNUMERICO;
	private NUMPCARACElements pNUMPCARAC;
	private OUElements pOU;
	private OUTROCASOElements pOUTROCASO;
	private PARAElements pPARA;
	private PASSOElements pPASSO;
	private PAUSAElements pPAUSA;
	private PIElements pPI;
	private POSElements pPOS;
	private PROCEDIMENTOElements pPROCEDIMENTO;
	private QUADElements pQUAD;
	private RADPGRAUElements pRADPGRAU;
	private RAIZQElements pRAIZQ;
	private RANDIElements pRANDI;
	private REALElements pREAL;
	private REPITAElements pREPITA;
	private RETORNEElements pRETORNE;
	private SEElements pSE;
	private SENElements pSEN;
	private SENAOElements pSENAO;
	private TANElements pTAN;
	private TIMERElements pTIMER;
	private VARElements pVAR;
	private VETORElements pVETOR;
	private VERDADEIROElements pVERDADEIRO;
	private XOUElements pXOU;
	private MAISElements pMAIS;
	private MENOSElements pMENOS;
	private MULTIPLICACAOElements pMULTIPLICACAO;
	private DIVISAOElements pDIVISAO;
	private DIVISAO_INTElements pDIVISAO_INT;
	private EXPONENCIACAOElements pEXPONENCIACAO;
	private RESTO_DIVISAOElements pRESTO_DIVISAO;
	private DIFERENTEElements pDIFERENTE;
	private MENORElements pMENOR;
	private MAIORElements pMAIOR;
	private MENOR_IGUALElements pMENOR_IGUAL;
	private MAIOR_IGUALElements pMAIOR_IGUAL;
	private PARENTESE_ESQElements pPARENTESE_ESQ;
	private PARENTESE_DIRElements pPARENTESE_DIR;
	private COLCHETE_ESQElements pCOLCHETE_ESQ;
	private COLCHETE_DIRElements pCOLCHETE_DIR;
	private VETOR_INTERVALOElements pVETOR_INTERVALO;
	private ATRIBUICAOElements pATRIBUICAO;
	private VIRGULAElements pVIRGULA;
	private DOIS_PONTOSElements pDOIS_PONTOS;
	private ProgramaElements pPrograma;
	private HEADERElements pHEADER;
	private TerminalRule tML_COMMENT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public PortugolGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.hopper.Portugol".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	main=Programa;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//// ---------------------- Keywords ----------------------
	//ABS:
	//	"abs";
	public ABSElements getABSAccess() {
		return (pABS != null) ? pABS : (pABS = new ABSElements());
	}
	
	public ParserRule getABSRule() {
		return getABSAccess().getRule();
	}

	//ALEATORIO:
	//	"aleatorio";
	public ALEATORIOElements getALEATORIOAccess() {
		return (pALEATORIO != null) ? pALEATORIO : (pALEATORIO = new ALEATORIOElements());
	}
	
	public ParserRule getALEATORIORule() {
		return getALEATORIOAccess().getRule();
	}

	//ALGORITMO:
	//	"algoritmo";
	public ALGORITMOElements getALGORITMOAccess() {
		return (pALGORITMO != null) ? pALGORITMO : (pALGORITMO = new ALGORITMOElements());
	}
	
	public ParserRule getALGORITMORule() {
		return getALGORITMOAccess().getRule();
	}

	//ARCCOS:
	//	"arccos";
	public ARCCOSElements getARCCOSAccess() {
		return (pARCCOS != null) ? pARCCOS : (pARCCOS = new ARCCOSElements());
	}
	
	public ParserRule getARCCOSRule() {
		return getARCCOSAccess().getRule();
	}

	//ARCSEN:
	//	"arcsen";
	public ARCSENElements getARCSENAccess() {
		return (pARCSEN != null) ? pARCSEN : (pARCSEN = new ARCSENElements());
	}
	
	public ParserRule getARCSENRule() {
		return getARCSENAccess().getRule();
	}

	//ARCTAN:
	//	"arctan";
	public ARCTANElements getARCTANAccess() {
		return (pARCTAN != null) ? pARCTAN : (pARCTAN = new ARCTANElements());
	}
	
	public ParserRule getARCTANRule() {
		return getARCTANAccess().getRule();
	}

	//ARQUIVO:
	//	"arquivo";
	public ARQUIVOElements getARQUIVOAccess() {
		return (pARQUIVO != null) ? pARQUIVO : (pARQUIVO = new ARQUIVOElements());
	}
	
	public ParserRule getARQUIVORule() {
		return getARQUIVOAccess().getRule();
	}

	//ASC:
	//	"asc";
	public ASCElements getASCAccess() {
		return (pASC != null) ? pASC : (pASC = new ASCElements());
	}
	
	public ParserRule getASCRule() {
		return getASCAccess().getRule();
	}

	//ATE:
	//	"ate";
	public ATEElements getATEAccess() {
		return (pATE != null) ? pATE : (pATE = new ATEElements());
	}
	
	public ParserRule getATERule() {
		return getATEAccess().getRule();
	}

	//CARAC:
	//	"carac";
	public CARACElements getCARACAccess() {
		return (pCARAC != null) ? pCARAC : (pCARAC = new CARACElements());
	}
	
	public ParserRule getCARACRule() {
		return getCARACAccess().getRule();
	}

	//CARACPNUM:
	//	"caracpnum";
	public CARACPNUMElements getCARACPNUMAccess() {
		return (pCARACPNUM != null) ? pCARACPNUM : (pCARACPNUM = new CARACPNUMElements());
	}
	
	public ParserRule getCARACPNUMRule() {
		return getCARACPNUMAccess().getRule();
	}

	//CARACTER:
	//	"caracter";
	public CARACTERElements getCARACTERAccess() {
		return (pCARACTER != null) ? pCARACTER : (pCARACTER = new CARACTERElements());
	}
	
	public ParserRule getCARACTERRule() {
		return getCARACTERAccess().getRule();
	}

	//CARACTERE:
	//	"caractere";
	public CARACTEREElements getCARACTEREAccess() {
		return (pCARACTERE != null) ? pCARACTERE : (pCARACTERE = new CARACTEREElements());
	}
	
	public ParserRule getCARACTERERule() {
		return getCARACTEREAccess().getRule();
	}

	//CASO:
	//	"caso";
	public CASOElements getCASOAccess() {
		return (pCASO != null) ? pCASO : (pCASO = new CASOElements());
	}
	
	public ParserRule getCASORule() {
		return getCASOAccess().getRule();
	}

	//COMPR:
	//	"compr";
	public COMPRElements getCOMPRAccess() {
		return (pCOMPR != null) ? pCOMPR : (pCOMPR = new COMPRElements());
	}
	
	public ParserRule getCOMPRRule() {
		return getCOMPRAccess().getRule();
	}

	//COPIA:
	//	"copia";
	public COPIAElements getCOPIAAccess() {
		return (pCOPIA != null) ? pCOPIA : (pCOPIA = new COPIAElements());
	}
	
	public ParserRule getCOPIARule() {
		return getCOPIAAccess().getRule();
	}

	//COS:
	//	"cos";
	public COSElements getCOSAccess() {
		return (pCOS != null) ? pCOS : (pCOS = new COSElements());
	}
	
	public ParserRule getCOSRule() {
		return getCOSAccess().getRule();
	}

	//COTAN:
	//	"cotan";
	public COTANElements getCOTANAccess() {
		return (pCOTAN != null) ? pCOTAN : (pCOTAN = new COTANElements());
	}
	
	public ParserRule getCOTANRule() {
		return getCOTANAccess().getRule();
	}

	//CRONOMETRO:
	//	"cronometro";
	public CRONOMETROElements getCRONOMETROAccess() {
		return (pCRONOMETRO != null) ? pCRONOMETRO : (pCRONOMETRO = new CRONOMETROElements());
	}
	
	public ParserRule getCRONOMETRORule() {
		return getCRONOMETROAccess().getRule();
	}

	//DE:
	//	"de";
	public DEElements getDEAccess() {
		return (pDE != null) ? pDE : (pDE = new DEElements());
	}
	
	public ParserRule getDERule() {
		return getDEAccess().getRule();
	}

	//DEBUG:
	//	"debug";
	public DEBUGElements getDEBUGAccess() {
		return (pDEBUG != null) ? pDEBUG : (pDEBUG = new DEBUGElements());
	}
	
	public ParserRule getDEBUGRule() {
		return getDEBUGAccess().getRule();
	}

	//DECLARE:
	//	"declare";
	public DECLAREElements getDECLAREAccess() {
		return (pDECLARE != null) ? pDECLARE : (pDECLARE = new DECLAREElements());
	}
	
	public ParserRule getDECLARERule() {
		return getDECLAREAccess().getRule();
	}

	//E:
	//	"e";
	public EElements getEAccess() {
		return (pE != null) ? pE : (pE = new EElements());
	}
	
	public ParserRule getERule() {
		return getEAccess().getRule();
	}

	//ECO:
	//	"eco";
	public ECOElements getECOAccess() {
		return (pECO != null) ? pECO : (pECO = new ECOElements());
	}
	
	public ParserRule getECORule() {
		return getECOAccess().getRule();
	}

	//ENQUANTO:
	//	"enquanto";
	public ENQUANTOElements getENQUANTOAccess() {
		return (pENQUANTO != null) ? pENQUANTO : (pENQUANTO = new ENQUANTOElements());
	}
	
	public ParserRule getENQUANTORule() {
		return getENQUANTOAccess().getRule();
	}

	//ENTAO:
	//	"entao";
	public ENTAOElements getENTAOAccess() {
		return (pENTAO != null) ? pENTAO : (pENTAO = new ENTAOElements());
	}
	
	public ParserRule getENTAORule() {
		return getENTAOAccess().getRule();
	}

	//ESCOLHA:
	//	"escolha";
	public ESCOLHAElements getESCOLHAAccess() {
		return (pESCOLHA != null) ? pESCOLHA : (pESCOLHA = new ESCOLHAElements());
	}
	
	public ParserRule getESCOLHARule() {
		return getESCOLHAAccess().getRule();
	}

	//ESCREVA:
	//	"escreva";
	public ESCREVAElements getESCREVAAccess() {
		return (pESCREVA != null) ? pESCREVA : (pESCREVA = new ESCREVAElements());
	}
	
	public ParserRule getESCREVARule() {
		return getESCREVAAccess().getRule();
	}

	//ESCREVAL:
	//	"escreval";
	public ESCREVALElements getESCREVALAccess() {
		return (pESCREVAL != null) ? pESCREVAL : (pESCREVAL = new ESCREVALElements());
	}
	
	public ParserRule getESCREVALRule() {
		return getESCREVALAccess().getRule();
	}

	//EXP:
	//	"exp";
	public EXPElements getEXPAccess() {
		return (pEXP != null) ? pEXP : (pEXP = new EXPElements());
	}
	
	public ParserRule getEXPRule() {
		return getEXPAccess().getRule();
	}

	//FACA:
	//	"faca";
	public FACAElements getFACAAccess() {
		return (pFACA != null) ? pFACA : (pFACA = new FACAElements());
	}
	
	public ParserRule getFACARule() {
		return getFACAAccess().getRule();
	}

	//FALSO:
	//	"falso";
	public FALSOElements getFALSOAccess() {
		return (pFALSO != null) ? pFALSO : (pFALSO = new FALSOElements());
	}
	
	public ParserRule getFALSORule() {
		return getFALSOAccess().getRule();
	}

	//FIMALGORITMO:
	//	"fimalgoritmo";
	public FIMALGORITMOElements getFIMALGORITMOAccess() {
		return (pFIMALGORITMO != null) ? pFIMALGORITMO : (pFIMALGORITMO = new FIMALGORITMOElements());
	}
	
	public ParserRule getFIMALGORITMORule() {
		return getFIMALGORITMOAccess().getRule();
	}

	//FIM_ENQUANTO:
	//	"fimenquanto";
	public FIM_ENQUANTOElements getFIM_ENQUANTOAccess() {
		return (pFIM_ENQUANTO != null) ? pFIM_ENQUANTO : (pFIM_ENQUANTO = new FIM_ENQUANTOElements());
	}
	
	public ParserRule getFIM_ENQUANTORule() {
		return getFIM_ENQUANTOAccess().getRule();
	}

	//FIM_ESCOLHA:
	//	"fimescolha";
	public FIM_ESCOLHAElements getFIM_ESCOLHAAccess() {
		return (pFIM_ESCOLHA != null) ? pFIM_ESCOLHA : (pFIM_ESCOLHA = new FIM_ESCOLHAElements());
	}
	
	public ParserRule getFIM_ESCOLHARule() {
		return getFIM_ESCOLHAAccess().getRule();
	}

	//FIM_FUNCAO:
	//	"fimfuncao";
	public FIM_FUNCAOElements getFIM_FUNCAOAccess() {
		return (pFIM_FUNCAO != null) ? pFIM_FUNCAO : (pFIM_FUNCAO = new FIM_FUNCAOElements());
	}
	
	public ParserRule getFIM_FUNCAORule() {
		return getFIM_FUNCAOAccess().getRule();
	}

	//FIM_PARA:
	//	"fimpara";
	public FIM_PARAElements getFIM_PARAAccess() {
		return (pFIM_PARA != null) ? pFIM_PARA : (pFIM_PARA = new FIM_PARAElements());
	}
	
	public ParserRule getFIM_PARARule() {
		return getFIM_PARAAccess().getRule();
	}

	//FIM_PROCEDIMENTO:
	//	"fimprocedimento";
	public FIM_PROCEDIMENTOElements getFIM_PROCEDIMENTOAccess() {
		return (pFIM_PROCEDIMENTO != null) ? pFIM_PROCEDIMENTO : (pFIM_PROCEDIMENTO = new FIM_PROCEDIMENTOElements());
	}
	
	public ParserRule getFIM_PROCEDIMENTORule() {
		return getFIM_PROCEDIMENTOAccess().getRule();
	}

	//FIM_REPITA:
	//	"fimrepita";
	public FIM_REPITAElements getFIM_REPITAAccess() {
		return (pFIM_REPITA != null) ? pFIM_REPITA : (pFIM_REPITA = new FIM_REPITAElements());
	}
	
	public ParserRule getFIM_REPITARule() {
		return getFIM_REPITAAccess().getRule();
	}

	//FIM_SE:
	//	"fimse";
	public FIM_SEElements getFIM_SEAccess() {
		return (pFIM_SE != null) ? pFIM_SE : (pFIM_SE = new FIM_SEElements());
	}
	
	public ParserRule getFIM_SERule() {
		return getFIM_SEAccess().getRule();
	}

	//FUNCAO:
	//	"funcao";
	public FUNCAOElements getFUNCAOAccess() {
		return (pFUNCAO != null) ? pFUNCAO : (pFUNCAO = new FUNCAOElements());
	}
	
	public ParserRule getFUNCAORule() {
		return getFUNCAOAccess().getRule();
	}

	//GRAUPRAD:
	//	"grauprad";
	public GRAUPRADElements getGRAUPRADAccess() {
		return (pGRAUPRAD != null) ? pGRAUPRAD : (pGRAUPRAD = new GRAUPRADElements());
	}
	
	public ParserRule getGRAUPRADRule() {
		return getGRAUPRADAccess().getRule();
	}

	//INICIO:
	//	"inicio";
	public INICIOElements getINICIOAccess() {
		return (pINICIO != null) ? pINICIO : (pINICIO = new INICIOElements());
	}
	
	public ParserRule getINICIORule() {
		return getINICIOAccess().getRule();
	}

	//T_INT:
	//	"int";
	public T_INTElements getT_INTAccess() {
		return (pT_INT != null) ? pT_INT : (pT_INT = new T_INTElements());
	}
	
	public ParserRule getT_INTRule() {
		return getT_INTAccess().getRule();
	}

	//INTEIRO:
	//	"inteiro";
	public INTEIROElements getINTEIROAccess() {
		return (pINTEIRO != null) ? pINTEIRO : (pINTEIRO = new INTEIROElements());
	}
	
	public ParserRule getINTEIRORule() {
		return getINTEIROAccess().getRule();
	}

	//INTERROMPA:
	//	"interrompa";
	public INTERROMPAElements getINTERROMPAAccess() {
		return (pINTERROMPA != null) ? pINTERROMPA : (pINTERROMPA = new INTERROMPAElements());
	}
	
	public ParserRule getINTERROMPARule() {
		return getINTERROMPAAccess().getRule();
	}

	//LEIA:
	//	"leia";
	public LEIAElements getLEIAAccess() {
		return (pLEIA != null) ? pLEIA : (pLEIA = new LEIAElements());
	}
	
	public ParserRule getLEIARule() {
		return getLEIAAccess().getRule();
	}

	//LIMPATELA:
	//	"limpatela";
	public LIMPATELAElements getLIMPATELAAccess() {
		return (pLIMPATELA != null) ? pLIMPATELA : (pLIMPATELA = new LIMPATELAElements());
	}
	
	public ParserRule getLIMPATELARule() {
		return getLIMPATELAAccess().getRule();
	}

	//LITERAL:
	//	"literal";
	public LITERALElements getLITERALAccess() {
		return (pLITERAL != null) ? pLITERAL : (pLITERAL = new LITERALElements());
	}
	
	public ParserRule getLITERALRule() {
		return getLITERALAccess().getRule();
	}

	//LOG:
	//	"log";
	public LOGElements getLOGAccess() {
		return (pLOG != null) ? pLOG : (pLOG = new LOGElements());
	}
	
	public ParserRule getLOGRule() {
		return getLOGAccess().getRule();
	}

	//LOGICO:
	//	"logico";
	public LOGICOElements getLOGICOAccess() {
		return (pLOGICO != null) ? pLOGICO : (pLOGICO = new LOGICOElements());
	}
	
	public ParserRule getLOGICORule() {
		return getLOGICOAccess().getRule();
	}

	//MAIUSC:
	//	"maiusc";
	public MAIUSCElements getMAIUSCAccess() {
		return (pMAIUSC != null) ? pMAIUSC : (pMAIUSC = new MAIUSCElements());
	}
	
	public ParserRule getMAIUSCRule() {
		return getMAIUSCAccess().getRule();
	}

	//MENSAGEM:
	//	"mensagem";
	public MENSAGEMElements getMENSAGEMAccess() {
		return (pMENSAGEM != null) ? pMENSAGEM : (pMENSAGEM = new MENSAGEMElements());
	}
	
	public ParserRule getMENSAGEMRule() {
		return getMENSAGEMAccess().getRule();
	}

	//MINUSC:
	//	"minusc";
	public MINUSCElements getMINUSCAccess() {
		return (pMINUSC != null) ? pMINUSC : (pMINUSC = new MINUSCElements());
	}
	
	public ParserRule getMINUSCRule() {
		return getMINUSCAccess().getRule();
	}

	//MOD:
	//	"mod";
	public MODElements getMODAccess() {
		return (pMOD != null) ? pMOD : (pMOD = new MODElements());
	}
	
	public ParserRule getMODRule() {
		return getMODAccess().getRule();
	}

	//NAO:
	//	"nao";
	public NAOElements getNAOAccess() {
		return (pNAO != null) ? pNAO : (pNAO = new NAOElements());
	}
	
	public ParserRule getNAORule() {
		return getNAOAccess().getRule();
	}

	//NUMERICO:
	//	"numerico";
	public NUMERICOElements getNUMERICOAccess() {
		return (pNUMERICO != null) ? pNUMERICO : (pNUMERICO = new NUMERICOElements());
	}
	
	public ParserRule getNUMERICORule() {
		return getNUMERICOAccess().getRule();
	}

	//NUMPCARAC:
	//	"numpcarac";
	public NUMPCARACElements getNUMPCARACAccess() {
		return (pNUMPCARAC != null) ? pNUMPCARAC : (pNUMPCARAC = new NUMPCARACElements());
	}
	
	public ParserRule getNUMPCARACRule() {
		return getNUMPCARACAccess().getRule();
	}

	//OU:
	//	"ou";
	public OUElements getOUAccess() {
		return (pOU != null) ? pOU : (pOU = new OUElements());
	}
	
	public ParserRule getOURule() {
		return getOUAccess().getRule();
	}

	//OUTROCASO:
	//	"outrocaso";
	public OUTROCASOElements getOUTROCASOAccess() {
		return (pOUTROCASO != null) ? pOUTROCASO : (pOUTROCASO = new OUTROCASOElements());
	}
	
	public ParserRule getOUTROCASORule() {
		return getOUTROCASOAccess().getRule();
	}

	//PARA:
	//	"para";
	public PARAElements getPARAAccess() {
		return (pPARA != null) ? pPARA : (pPARA = new PARAElements());
	}
	
	public ParserRule getPARARule() {
		return getPARAAccess().getRule();
	}

	//PASSO:
	//	"passo";
	public PASSOElements getPASSOAccess() {
		return (pPASSO != null) ? pPASSO : (pPASSO = new PASSOElements());
	}
	
	public ParserRule getPASSORule() {
		return getPASSOAccess().getRule();
	}

	//PAUSA:
	//	"pausa";
	public PAUSAElements getPAUSAAccess() {
		return (pPAUSA != null) ? pPAUSA : (pPAUSA = new PAUSAElements());
	}
	
	public ParserRule getPAUSARule() {
		return getPAUSAAccess().getRule();
	}

	//PI:
	//	"pi";
	public PIElements getPIAccess() {
		return (pPI != null) ? pPI : (pPI = new PIElements());
	}
	
	public ParserRule getPIRule() {
		return getPIAccess().getRule();
	}

	//POS:
	//	"pos";
	public POSElements getPOSAccess() {
		return (pPOS != null) ? pPOS : (pPOS = new POSElements());
	}
	
	public ParserRule getPOSRule() {
		return getPOSAccess().getRule();
	}

	//PROCEDIMENTO:
	//	"procedimento";
	public PROCEDIMENTOElements getPROCEDIMENTOAccess() {
		return (pPROCEDIMENTO != null) ? pPROCEDIMENTO : (pPROCEDIMENTO = new PROCEDIMENTOElements());
	}
	
	public ParserRule getPROCEDIMENTORule() {
		return getPROCEDIMENTOAccess().getRule();
	}

	//QUAD:
	//	"quad";
	public QUADElements getQUADAccess() {
		return (pQUAD != null) ? pQUAD : (pQUAD = new QUADElements());
	}
	
	public ParserRule getQUADRule() {
		return getQUADAccess().getRule();
	}

	//RADPGRAU:
	//	"radpgrau";
	public RADPGRAUElements getRADPGRAUAccess() {
		return (pRADPGRAU != null) ? pRADPGRAU : (pRADPGRAU = new RADPGRAUElements());
	}
	
	public ParserRule getRADPGRAURule() {
		return getRADPGRAUAccess().getRule();
	}

	//RAIZQ:
	//	"raizq";
	public RAIZQElements getRAIZQAccess() {
		return (pRAIZQ != null) ? pRAIZQ : (pRAIZQ = new RAIZQElements());
	}
	
	public ParserRule getRAIZQRule() {
		return getRAIZQAccess().getRule();
	}

	//RANDI:
	//	"randi";
	public RANDIElements getRANDIAccess() {
		return (pRANDI != null) ? pRANDI : (pRANDI = new RANDIElements());
	}
	
	public ParserRule getRANDIRule() {
		return getRANDIAccess().getRule();
	}

	//REAL:
	//	"real";
	public REALElements getREALAccess() {
		return (pREAL != null) ? pREAL : (pREAL = new REALElements());
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}

	//REPITA:
	//	"repita";
	public REPITAElements getREPITAAccess() {
		return (pREPITA != null) ? pREPITA : (pREPITA = new REPITAElements());
	}
	
	public ParserRule getREPITARule() {
		return getREPITAAccess().getRule();
	}

	//RETORNE:
	//	"retorne";
	public RETORNEElements getRETORNEAccess() {
		return (pRETORNE != null) ? pRETORNE : (pRETORNE = new RETORNEElements());
	}
	
	public ParserRule getRETORNERule() {
		return getRETORNEAccess().getRule();
	}

	//SE:
	//	"se";
	public SEElements getSEAccess() {
		return (pSE != null) ? pSE : (pSE = new SEElements());
	}
	
	public ParserRule getSERule() {
		return getSEAccess().getRule();
	}

	//SEN:
	//	"sen";
	public SENElements getSENAccess() {
		return (pSEN != null) ? pSEN : (pSEN = new SENElements());
	}
	
	public ParserRule getSENRule() {
		return getSENAccess().getRule();
	}

	//SENAO:
	//	"senao";
	public SENAOElements getSENAOAccess() {
		return (pSENAO != null) ? pSENAO : (pSENAO = new SENAOElements());
	}
	
	public ParserRule getSENAORule() {
		return getSENAOAccess().getRule();
	}

	//TAN:
	//	"tan";
	public TANElements getTANAccess() {
		return (pTAN != null) ? pTAN : (pTAN = new TANElements());
	}
	
	public ParserRule getTANRule() {
		return getTANAccess().getRule();
	}

	//TIMER:
	//	"timer";
	public TIMERElements getTIMERAccess() {
		return (pTIMER != null) ? pTIMER : (pTIMER = new TIMERElements());
	}
	
	public ParserRule getTIMERRule() {
		return getTIMERAccess().getRule();
	}

	//VAR:
	//	"var";
	public VARElements getVARAccess() {
		return (pVAR != null) ? pVAR : (pVAR = new VARElements());
	}
	
	public ParserRule getVARRule() {
		return getVARAccess().getRule();
	}

	//VETOR:
	//	"vetor";
	public VETORElements getVETORAccess() {
		return (pVETOR != null) ? pVETOR : (pVETOR = new VETORElements());
	}
	
	public ParserRule getVETORRule() {
		return getVETORAccess().getRule();
	}

	//VERDADEIRO:
	//	"verdadeiro";
	public VERDADEIROElements getVERDADEIROAccess() {
		return (pVERDADEIRO != null) ? pVERDADEIRO : (pVERDADEIRO = new VERDADEIROElements());
	}
	
	public ParserRule getVERDADEIRORule() {
		return getVERDADEIROAccess().getRule();
	}

	//XOU:
	//	"xou";
	public XOUElements getXOUAccess() {
		return (pXOU != null) ? pXOU : (pXOU = new XOUElements());
	}
	
	public ParserRule getXOURule() {
		return getXOUAccess().getRule();
	}

	////------------------------- Operators ------------------------- \
	//MAIS:
	//	"+";
	public MAISElements getMAISAccess() {
		return (pMAIS != null) ? pMAIS : (pMAIS = new MAISElements());
	}
	
	public ParserRule getMAISRule() {
		return getMAISAccess().getRule();
	}

	//MENOS:
	//	"-";
	public MENOSElements getMENOSAccess() {
		return (pMENOS != null) ? pMENOS : (pMENOS = new MENOSElements());
	}
	
	public ParserRule getMENOSRule() {
		return getMENOSAccess().getRule();
	}

	//MULTIPLICACAO:
	//	"*";
	public MULTIPLICACAOElements getMULTIPLICACAOAccess() {
		return (pMULTIPLICACAO != null) ? pMULTIPLICACAO : (pMULTIPLICACAO = new MULTIPLICACAOElements());
	}
	
	public ParserRule getMULTIPLICACAORule() {
		return getMULTIPLICACAOAccess().getRule();
	}

	//DIVISAO:
	//	"/";
	public DIVISAOElements getDIVISAOAccess() {
		return (pDIVISAO != null) ? pDIVISAO : (pDIVISAO = new DIVISAOElements());
	}
	
	public ParserRule getDIVISAORule() {
		return getDIVISAOAccess().getRule();
	}

	//DIVISAO_INT:
	//	"\\";
	public DIVISAO_INTElements getDIVISAO_INTAccess() {
		return (pDIVISAO_INT != null) ? pDIVISAO_INT : (pDIVISAO_INT = new DIVISAO_INTElements());
	}
	
	public ParserRule getDIVISAO_INTRule() {
		return getDIVISAO_INTAccess().getRule();
	}

	//EXPONENCIACAO:
	//	"^";
	public EXPONENCIACAOElements getEXPONENCIACAOAccess() {
		return (pEXPONENCIACAO != null) ? pEXPONENCIACAO : (pEXPONENCIACAO = new EXPONENCIACAOElements());
	}
	
	public ParserRule getEXPONENCIACAORule() {
		return getEXPONENCIACAOAccess().getRule();
	}

	//RESTO_DIVISAO:
	//	"%";
	public RESTO_DIVISAOElements getRESTO_DIVISAOAccess() {
		return (pRESTO_DIVISAO != null) ? pRESTO_DIVISAO : (pRESTO_DIVISAO = new RESTO_DIVISAOElements());
	}
	
	public ParserRule getRESTO_DIVISAORule() {
		return getRESTO_DIVISAOAccess().getRule();
	}

	//DIFERENTE:
	//	"<>";
	public DIFERENTEElements getDIFERENTEAccess() {
		return (pDIFERENTE != null) ? pDIFERENTE : (pDIFERENTE = new DIFERENTEElements());
	}
	
	public ParserRule getDIFERENTERule() {
		return getDIFERENTEAccess().getRule();
	}

	//MENOR:
	//	"<";
	public MENORElements getMENORAccess() {
		return (pMENOR != null) ? pMENOR : (pMENOR = new MENORElements());
	}
	
	public ParserRule getMENORRule() {
		return getMENORAccess().getRule();
	}

	//MAIOR:
	//	">";
	public MAIORElements getMAIORAccess() {
		return (pMAIOR != null) ? pMAIOR : (pMAIOR = new MAIORElements());
	}
	
	public ParserRule getMAIORRule() {
		return getMAIORAccess().getRule();
	}

	//MENOR_IGUAL:
	//	"<=";
	public MENOR_IGUALElements getMENOR_IGUALAccess() {
		return (pMENOR_IGUAL != null) ? pMENOR_IGUAL : (pMENOR_IGUAL = new MENOR_IGUALElements());
	}
	
	public ParserRule getMENOR_IGUALRule() {
		return getMENOR_IGUALAccess().getRule();
	}

	//MAIOR_IGUAL:
	//	">=";
	public MAIOR_IGUALElements getMAIOR_IGUALAccess() {
		return (pMAIOR_IGUAL != null) ? pMAIOR_IGUAL : (pMAIOR_IGUAL = new MAIOR_IGUALElements());
	}
	
	public ParserRule getMAIOR_IGUALRule() {
		return getMAIOR_IGUALAccess().getRule();
	}

	//PARENTESE_ESQ:
	//	"(";
	public PARENTESE_ESQElements getPARENTESE_ESQAccess() {
		return (pPARENTESE_ESQ != null) ? pPARENTESE_ESQ : (pPARENTESE_ESQ = new PARENTESE_ESQElements());
	}
	
	public ParserRule getPARENTESE_ESQRule() {
		return getPARENTESE_ESQAccess().getRule();
	}

	//PARENTESE_DIR:
	//	")";
	public PARENTESE_DIRElements getPARENTESE_DIRAccess() {
		return (pPARENTESE_DIR != null) ? pPARENTESE_DIR : (pPARENTESE_DIR = new PARENTESE_DIRElements());
	}
	
	public ParserRule getPARENTESE_DIRRule() {
		return getPARENTESE_DIRAccess().getRule();
	}

	//COLCHETE_ESQ:
	//	"[";
	public COLCHETE_ESQElements getCOLCHETE_ESQAccess() {
		return (pCOLCHETE_ESQ != null) ? pCOLCHETE_ESQ : (pCOLCHETE_ESQ = new COLCHETE_ESQElements());
	}
	
	public ParserRule getCOLCHETE_ESQRule() {
		return getCOLCHETE_ESQAccess().getRule();
	}

	//COLCHETE_DIR:
	//	"]";
	public COLCHETE_DIRElements getCOLCHETE_DIRAccess() {
		return (pCOLCHETE_DIR != null) ? pCOLCHETE_DIR : (pCOLCHETE_DIR = new COLCHETE_DIRElements());
	}
	
	public ParserRule getCOLCHETE_DIRRule() {
		return getCOLCHETE_DIRAccess().getRule();
	}

	//VETOR_INTERVALO:
	//	"..";
	public VETOR_INTERVALOElements getVETOR_INTERVALOAccess() {
		return (pVETOR_INTERVALO != null) ? pVETOR_INTERVALO : (pVETOR_INTERVALO = new VETOR_INTERVALOElements());
	}
	
	public ParserRule getVETOR_INTERVALORule() {
		return getVETOR_INTERVALOAccess().getRule();
	}

	//ATRIBUICAO:
	//	"<-";
	public ATRIBUICAOElements getATRIBUICAOAccess() {
		return (pATRIBUICAO != null) ? pATRIBUICAO : (pATRIBUICAO = new ATRIBUICAOElements());
	}
	
	public ParserRule getATRIBUICAORule() {
		return getATRIBUICAOAccess().getRule();
	}

	//VIRGULA:
	//	",";
	public VIRGULAElements getVIRGULAAccess() {
		return (pVIRGULA != null) ? pVIRGULA : (pVIRGULA = new VIRGULAElements());
	}
	
	public ParserRule getVIRGULARule() {
		return getVIRGULAAccess().getRule();
	}

	//DOIS_PONTOS:
	//	":";
	public DOIS_PONTOSElements getDOIS_PONTOSAccess() {
		return (pDOIS_PONTOS != null) ? pDOIS_PONTOS : (pDOIS_PONTOS = new DOIS_PONTOSElements());
	}
	
	public ParserRule getDOIS_PONTOSRule() {
		return getDOIS_PONTOSAccess().getRule();
	}

	//// ---------------------------- MAIN RULES ----------------------------
	//Programa:
	//	WS* HEADER WS*;
	public ProgramaElements getProgramaAccess() {
		return (pPrograma != null) ? pPrograma : (pPrograma = new ProgramaElements());
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}

	//HEADER:
	//	ALGORITMO WS* nameOfProgram=STRING WS*;
	public HEADERElements getHEADERAccess() {
		return (pHEADER != null) ? pHEADER : (pHEADER = new HEADERElements());
	}
	
	public ParserRule getHEADERRule() {
		return getHEADERAccess().getRule();
	}

	//terminal ML_COMMENT:
	//	"{"->"}";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
