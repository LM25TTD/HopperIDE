/*
* generated by Xtext
*/
grammar InternalPortugol;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.hopper.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.hopper.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.hopper.services.PortugolGrammarAccess;

}

@parser::members {
 
 	private PortugolGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(PortugolGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getMainAssignment()); }
(rule__Model__MainAssignment)
{ after(grammarAccess.getModelAccess().getMainAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}







// Entry rule entryRuleALGORITMO
entryRuleALGORITMO 
:
{ before(grammarAccess.getALGORITMORule()); }
	 ruleALGORITMO
{ after(grammarAccess.getALGORITMORule()); } 
	 EOF 
;

// Rule ALGORITMO
ruleALGORITMO
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getALGORITMOAccess().getAlgoritmoKeyword()); }

	'algoritmo' 

{ after(grammarAccess.getALGORITMOAccess().getAlgoritmoKeyword()); }
)

;
finally {
	restoreStackSize(stackSize);
}









































































































































































































// Entry rule entryRulePrograma
entryRulePrograma 
:
{ before(grammarAccess.getProgramaRule()); }
	 rulePrograma
{ after(grammarAccess.getProgramaRule()); } 
	 EOF 
;

// Rule Programa
rulePrograma
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramaAccess().getGroup()); }
(rule__Programa__Group__0)
{ after(grammarAccess.getProgramaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleHEADER
entryRuleHEADER 
:
{ before(grammarAccess.getHEADERRule()); }
	 ruleHEADER
{ after(grammarAccess.getHEADERRule()); } 
	 EOF 
;

// Rule HEADER
ruleHEADER
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHEADERAccess().getGroup()); }
(rule__HEADER__Group__0)
{ after(grammarAccess.getHEADERAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Programa__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Programa__Group__0__Impl
	rule__Programa__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Programa__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramaAccess().getWSTerminalRuleCall_0()); }
(	RULE_WS)*
{ after(grammarAccess.getProgramaAccess().getWSTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Programa__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Programa__Group__1__Impl
	rule__Programa__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Programa__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramaAccess().getHEADERParserRuleCall_1()); }
	ruleHEADER
{ after(grammarAccess.getProgramaAccess().getHEADERParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Programa__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Programa__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Programa__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramaAccess().getWSTerminalRuleCall_2()); }
(	RULE_WS)*
{ after(grammarAccess.getProgramaAccess().getWSTerminalRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__HEADER__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HEADER__Group__0__Impl
	rule__HEADER__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HEADER__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHEADERAccess().getALGORITMOParserRuleCall_0()); }
	ruleALGORITMO
{ after(grammarAccess.getHEADERAccess().getALGORITMOParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HEADER__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HEADER__Group__1__Impl
	rule__HEADER__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HEADER__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHEADERAccess().getWSTerminalRuleCall_1()); }
(	RULE_WS)*
{ after(grammarAccess.getHEADERAccess().getWSTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HEADER__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HEADER__Group__2__Impl
	rule__HEADER__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__HEADER__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHEADERAccess().getNameOfProgramAssignment_2()); }
(rule__HEADER__NameOfProgramAssignment_2)
{ after(grammarAccess.getHEADERAccess().getNameOfProgramAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HEADER__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HEADER__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HEADER__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHEADERAccess().getWSTerminalRuleCall_3()); }
(	RULE_WS)*
{ after(grammarAccess.getHEADERAccess().getWSTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Model__MainAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getMainProgramaParserRuleCall_0()); }
	rulePrograma{ after(grammarAccess.getModelAccess().getMainProgramaParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HEADER__NameOfProgramAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHEADERAccess().getNameOfProgramSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getHEADERAccess().getNameOfProgramSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ML_COMMENT : '{' ( options {greedy=false;} : . )*'}';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


